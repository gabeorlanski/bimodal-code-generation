{"564": [{"input": "search([0])", "output": "-1", "ops": "=="}, {"input": "search([1, 2, 4, 5, 6, 97, 4])", "output": "1", "ops": "=="}, {"input": "search([7, 9, 5, 6, 7, 4, 1])", "output": "1", "ops": "=="}, {"input": "search([5, 2, 9, 8, 7, 7, 3, 9, 8, 5, 3, 5, 4, 1, 3, 4, 7, 9, 3, 2, 6, 2, 9])", "output": "3", "ops": "=="}, {"input": "search([4, 7, 6, 2, 5, 4, 2, 8, 3, 2, 9, 3, 2, 2, 6, 10])", "output": "2", "ops": "=="}, {"input": "search.__defaults__", "output": "None", "ops": "=="}], "636": [{"input": "file_name_check(('s1234.txt'))", "output": "'No'", "ops": "=="}, {"input": "file_name_check(str(1)+str(1)+str(1))", "output": "'No'", "ops": "=="}, {"input": "file_name_check('IygKy3mG4.txt')", "output": "'Yes'", "ops": "=="}, {"input": "file_name_check('_ThisFile.is-OK.dll')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('')", "output": "'No'", "ops": "=="}, {"input": "file_name_check(('S1245.txt'))", "output": "'No'", "ops": "=="}, {"input": "file_name_check(('_s03456.txt'))", "output": "'No'", "ops": "=="}, {"input": "file_name_check(\"\")", "output": "'No'", "ops": "=="}, {"input": "file_name_check(('  _s4565.txt  '))", "output": "'No'", "ops": "=="}], "624": [{"input": "minPath([], 3)", "output": "[1, 1, 1]", "ops": "=="}, {"input": "minPath([], 2)", "output": "[1, 1]", "ops": "=="}, {"input": "minPath([[1, 3], [3, 2]],11)", "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]", "ops": "=="}, {"input": "minPath([], 9)", "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1]", "ops": "=="}, {"input": "minPath([], 1)", "output": "[1]", "ops": "=="}, {"input": "minPath([], 9)", "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1]", "ops": "=="}, {"input": "minPath([], 3)", "output": "[1, 1, 1]", "ops": "=="}, {"input": "minPath([], 7)", "output": "[1, 1, 1, 1, 1, 1, 1]", "ops": "=="}, {"input": "minPath([], 17)", "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]", "ops": "=="}], "648": [{"input": "Strongest_Extension(  'Ben', ['ZelaR', 'tHi', 'tt', 'nope', 'MelanCO', '6N8R'])", "output": "'Ben.6N8R'", "ops": "=="}, {"input": "Strongest_Extension('HabBaz__3', ['IeN5eTJhWK', 'MrMrH', 'Y', '0T'])", "output": "'HabBaz__3.IeN5eTJhWK'", "ops": "=="}, {"input": "Strongest_Extension('123123a', ['1G', '2ZkA8', 'ZzLKgCf', 'OoeJ', '0T'])", "output": "'123123a.1G'", "ops": "=="}, {"input": "Strongest_Extension('BbS', ['3Ec123'])", "output": "'BbS.3Ec123'", "ops": "=="}, {"input": "Strongest_Extension('', ['Rr'])", "output": "'.Rr'", "ops": "=="}], "631": [{"input": "largest_smallest_integers([-100, -3, -100, -100, 1])", "output": "(-3, 1)", "ops": "=="}, {"input": "largest_smallest_integers([1, 3, 5, 1000, 6])", "output": "(None, 1)", "ops": "=="}, {"input": "largest_smallest_integers([1, 2, 5, 2, 0])", "output": "(None, 1)", "ops": "=="}, {"input": "largest_smallest_integers([0, 1, 2, 4])", "output": "(None, 1)", "ops": "=="}, {"input": "largest_smallest_integers([-6, 4, 5, 6, 1])", "output": "(-6, 1)", "ops": "=="}, {"input": "largest_smallest_integers([-4, -7, 2, -3, -6])", "output": "(-3, 2)", "ops": "=="}, {"input": "largest_smallest_integers([-6, 0, 0, 4, 5, -1])", "output": "(-1, 4)", "ops": "=="}, {"input": "largest_smallest_integers([1])", "output": "(None, 1)", "ops": "=="}, {"input": "largest_smallest_integers([0, 1])", "output": "(None, 1)", "ops": "=="}, {"input": "largest_smallest_integers([1])", "output": "(None, 1)", "ops": "=="}, {"input": "largest_smallest_integers([0, 7, 3, 5, -2])", "output": "(-2, 3)", "ops": "=="}, {"input": "largest_smallest_integers([1])", "output": "(None, 1)", "ops": "=="}, {"input": "largest_smallest_integers([2, 1, -3, 0, 5, 1, 5, -100])", "output": "(-3, 1)", "ops": "=="}, {"input": "largest_smallest_integers([-1] * 5000)", "output": "(-1, None)", "ops": "=="}, {"input": "largest_smallest_integers([ 4, -7, 1, 3, 2])", "output": "(-7, 1)", "ops": "=="}], "637": [{"input": "sum_squares([1, 1])", "output": "2", "ops": "=="}, {"input": "sum_squares([1, 0, 1, 1])", "output": "3", "ops": "=="}, {"input": "sum_squares(range(1, 100))", "output": "3778614", "ops": "=="}, {"input": "sum_squares([1]*10)", "output": "10", "ops": "=="}, {"input": "sum_squares([1]*9) * (9*16)", "output": "1296", "ops": "=="}, {"input": "sum_squares(range(2))", "output": "1", "ops": "=="}, {"input": "sum_squares(range(10))", "output": "717", "ops": "=="}, {"input": "sum_squares(range(1,7))", "output": "153", "ops": "=="}, {"input": "sum_squares([1]) * 18", "output": "18", "ops": "=="}], "589": [{"input": "skjkasdkd([8191, 0, 2, 4, 5, 1, 1234, 0])", "output": "19", "ops": "=="}, {"input": "skjkasdkd([82, 8191])", "output": "19", "ops": "=="}, {"input": "skjkasdkd([1, 1297446, 0, 2])", "output": "2", "ops": "=="}, {"input": "skjkasdkd([9098])", "output": "0", "ops": "=="}, {"input": "skjkasdkd([32, 40984, 1, 32, 32, 1, 2, 4, 4, 9, 5])", "output": "5", "ops": "=="}, {"input": "skjkasdkd([4, 2, 1, 3, 2, 1])", "output": "3", "ops": "=="}, {"input": "skjkasdkd([1, 3, 32, 81, 113, 8, 8, 2, 342, 134, 3, 1, 4, 82, 113, 4, 1])", "output": "5", "ops": "=="}, {"input": "skjkasdkd([329437637127927890687, 9, 32, 9, 3324])", "output": "0", "ops": "=="}, {"input": "skjkasdkd([9819, 8192])", "output": "0", "ops": "=="}, {"input": "skjkasdkd([127093, 7, 7, 97, 1273, 10098])", "output": "16", "ops": "=="}, {"input": "skjkasdkd([2, 4, 2, 2, 1])", "output": "2", "ops": "=="}, {"input": "skjkasdkd([1, 2, 5, 9])", "output": "5", "ops": "=="}, {"input": "skjkasdkd([3, 4, 5, 3])", "output": "5", "ops": "=="}, {"input": "skjkasdkd([96, 5, 8192])", "output": "5", "ops": "=="}, {"input": "skjkasdkd([4, 0, 4, 3, 4, 3, 5, 5, 0, 4])", "output": "5", "ops": "=="}, {"input": "skjkasdkd([789])", "output": "0", "ops": "=="}, {"input": "skjkasdkd([125, 8129, 2, 818])", "output": "2", "ops": "=="}, {"input": "skjkasdkd([5, 1, 4, 3, 0, 3, 5, 4, 0, 2])", "output": "5", "ops": "=="}, {"input": "skjkasdkd([3, 3, 5, 4, 5, 0])", "output": "5", "ops": "=="}, {"input": "skjkasdkd([0, 0, 5, 0, 5, 3, 4, 2, 3, 5, 3])", "output": "5", "ops": "=="}], "582": [{"input": "get_row([], 4)", "output": "[]", "ops": "=="}, {"input": "get_row([], 3)", "output": "[]", "ops": "=="}, {"input": "get_row([], 100)", "output": "[]", "ops": "=="}, {"input": "get_row(list(), 4)", "output": "[]", "ops": "=="}, {"input": "get_row([[3, 2, 1]], 1)", "output": "[(0, 2)]", "ops": "=="}, {"input": "get_row({}, 4)", "output": "[]", "ops": "=="}, {"input": "get_row([], 4)", "output": "[]", "ops": "=="}, {"input": "get_row({}, 4)", "output": "[]", "ops": "=="}, {"input": "get_row([], 0)", "output": "[]", "ops": "=="}, {"input": "get_row([], 10)", "output": "[]", "ops": "=="}, {"input": "get_row([[[1, 2], [3, 4]]], 4)", "output": "[]", "ops": "=="}, {"input": "get_row([], 50)", "output": "[]", "ops": "=="}, {"input": "get_row([], 8)", "output": "[]", "ops": "=="}], "629": [{"input": "check_if_last_char_is_a_letter(('aa' + \"bcd\"))", "output": "False", "ops": "=="}, {"input": "(check_if_last_char_is_a_letter(chr(256) + chr(128)) / 8)", "output": "0.0", "ops": "=="}, {"input": "check_if_last_char_is_a_letter(\" apple \")", "output": "False", "ops": "=="}, {"input": "check_if_last_char_is_a_letter('A1')", "output": "False", "ops": "=="}, {"input": "check_if_last_char_is_a_letter('aa' + str({'aaaa', 'bbbbb'}))", "output": "False", "ops": "=="}, {"input": "check_if_last_char_is_a_letter(chr(127))", "output": "False", "ops": "=="}, {"input": "check_if_last_char_is_a_letter(\"\")", "output": "False", "ops": "=="}], "412": [{"input": "extract_nth_element([], 50)", "output": "[]", "ops": "=="}, {"input": "extract_nth_element([\"abc\", \"de\", \"fg\", \"xyz\"], 0)", "output": "['a', 'd', 'f', 'x']", "ops": "=="}, {"input": "extract_nth_element([], 5)", "output": "[]", "ops": "=="}, {"input": "extract_nth_element({}, 5)", "output": "[]", "ops": "=="}, {"input": "extract_nth_element('this is a string',0)", "output": "['t', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 's', 't', 'r', 'i', 'n', 'g']", "ops": "=="}], "609": [{"input": "minSubArraySum([1, 0])", "output": "0", "ops": "=="}, {"input": "minSubArraySum([1, 2, 3, 4])", "output": "1", "ops": "=="}, {"input": "minSubArraySum([1])", "output": "1", "ops": "=="}, {"input": "minSubArraySum([1])", "output": "1", "ops": "=="}, {"input": "minSubArraySum([-1])", "output": "-1", "ops": "=="}, {"input": "minSubArraySum([1])", "output": "1", "ops": "=="}, {"input": "minSubArraySum(range(5))", "output": "0", "ops": "=="}, {"input": "minSubArraySum([1, 2, 3, 4, 5, 6])", "output": "1", "ops": "=="}], "500": [{"input": "has_close_elements([1], 1.01)", "output": "False", "ops": "=="}, {"input": "has_close_elements([0, 2.2, 2.3], 0.2)", "output": "True", "ops": "=="}, {"input": "has_close_elements([], 1e-4)", "output": "False", "ops": "=="}, {"input": "has_close_elements([1], 1.011)", "output": "False", "ops": "=="}, {"input": "has_close_elements([1.11, 1, 10], 10)", "output": "True", "ops": "=="}, {"input": "has_close_elements([1.01], 1.0)", "output": "False", "ops": "=="}, {"input": "has_close_elements([21, 22, 7.0], 1.7)", "output": "True", "ops": "=="}, {"input": "has_close_elements([21, 22, 19, 18, 7, 6, 0, 17], 17)", "output": "True", "ops": "=="}, {"input": "has_close_elements(['b'], 0.0)", "output": "False", "ops": "=="}], "390": [{"input": "convert_list_dictionary([' R', 'a3','A'], 'Python', [50, 10, 80, 100])", "output": "[{' R': {'P': 50}}, {'a3': {'y': 10}}, {'A': {'t': 80}}]", "ops": "=="}], "590": [{"input": "check_dict_case({'Name': 'John'})", "output": "False", "ops": "=="}, {"input": "print(check_dict_case(dict(a=1)))", "output": "None", "ops": "=="}, {"input": "check_dict_case({'b': 2})", "output": "True", "ops": "=="}, {"input": "check_dict_case({'Name': 'Zed'})", "output": "False", "ops": "=="}], "619": [{"input": "valid_date('12-03-2003')", "output": "True", "ops": "=="}, {"input": "valid_date('123003')", "output": "False", "ops": "=="}, {"input": "valid_date(None)", "output": "False", "ops": "=="}, {"input": "valid_date(-1)", "output": "False", "ops": "=="}, {"input": "valid_date('20030904')", "output": "False", "ops": "=="}, {"input": "valid_date('03/2007/01') == valid_date('07/2007/03') is True", "output": "False", "ops": "=="}, {"input": "valid_date(False)", "output": "False", "ops": "=="}, {"input": "valid_date('0311') == valid_date('2011') is False", "output": "True", "ops": "=="}, {"input": "valid_date('3') == valid_date('12') is False", "output": "True", "ops": "=="}], "569": [{"input": "total_match(['test2', 'test', 'test1'], ['3', '4', '13'])", "output": "['3', '4', '13']", "ops": "=="}, {"input": "total_match(['4'], ['1', '1', '2', '5'])", "output": "['4']", "ops": "=="}, {"input": "total_match([], 'that')", "output": "[]", "ops": "=="}, {"input": "total_match(['hi', 'admin'], sorted(['hi',  'admin_a', 'project_2']))", "output": "['hi', 'admin']", "ops": "=="}, {"input": "total_match(['One, One,'], ['One'])", "output": "['One']", "ops": "=="}, {"input": "total_match(['a', 'B', 'b', 'C', ''], 'abcd')", "output": "['a', 'B', 'b', 'C', '']", "ops": "=="}, {"input": "total_match(['4'], ['2', '3', '4', '5'])", "output": "['4']", "ops": "=="}, {"input": "total_match([], [[]])", "output": "[]", "ops": "=="}, {"input": "sorted(sorted(total_match([],['foo']), key=lambda w: w[1].split()[1]))", "output": "[]", "ops": "=="}, {"input": "total_match(['0'], []).count(1)", "output": "0", "ops": "=="}, {"input": "total_match(['hi', 'admin'], ['admin'])", "output": "['admin']", "ops": "=="}, {"input": "total_match(['one', 'another','something'], ['something','something'])", "output": "['something', 'something']", "ops": "=="}, {"input": "total_match([' ',' ', ''], '1')", "output": "'1'", "ops": "=="}], "297": [{"input": "intersection_nested_lists(('amena', 'amy'), ('joy', 'am'))", "output": "[[], []]", "ops": "=="}, {"input": "intersection_nested_lists(['amal', 2, 'john'], ['jude'])", "output": "[[]]", "ops": "=="}, {"input": "intersection_nested_lists(['John', 'Sarah'], [['Sara'], ['Jody', 1]])", "output": "[[], []]", "ops": "=="}, {"input": "intersection_nested_lists([0, 2], [[0, 1, 2]])", "output": "[[0, 2]]", "ops": "=="}, {"input": "intersection_nested_lists([0, 1], [[0, 1, 0]])", "output": "[[0, 1, 0]]", "ops": "=="}, {"input": "intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45],  [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])", "output": "[[12], [7, 11], [1, 5, 8]]", "ops": "=="}, {"input": "intersection_nested_lists([], [['abc', ''], ['', 'def']])", "output": "[[], []]", "ops": "=="}, {"input": "intersection_nested_lists({'a':'b', 'c':'b','c':'a'}, ['a'])", "output": "[['a']]", "ops": "=="}, {"input": "intersection_nested_lists([], ['a', 'b'])", "output": "[[], []]", "ops": "=="}], "653": [{"input": "find_max([\"you\", \"will\", \"no\"])", "output": "'will'", "ops": "=="}, {"input": "find_max(['name', 'of','string'])", "output": "'string'", "ops": "=="}, {"input": "find_max(['we', 'are', 'a','mad', 'nation'])", "output": "'nation'", "ops": "=="}, {"input": "len(find_max(['this', 'is', 'a', 'play']))", "output": "4", "ops": "=="}, {"input": "find_max(['name', 'of','string'])", "output": "'string'", "ops": "=="}, {"input": "find_max(['name', 'of','string'])", "output": "'string'", "ops": "=="}, {"input": "find_max(['we', 'are', 'a','mad', 'nation'])", "output": "'nation'", "ops": "=="}, {"input": "find_max(['d'])", "output": "'d'", "ops": "=="}, {"input": "find_max(['we', 'are', 'a','mad', 'nation'])", "output": "'nation'", "ops": "=="}, {"input": "find_max(['we', 'are', 'a','mad', 'nation'])", "output": "'nation'", "ops": "=="}, {"input": "find_max(['just', 'a'])", "output": "'just'", "ops": "=="}, {"input": "find_max(['name', 'of','string'])", "output": "'string'", "ops": "=="}, {"input": "find_max([''])", "output": "''", "ops": "=="}, {"input": "find_max(['this', 'h1', 'game','string', 'prrrr', 'loos'])", "output": "'string'", "ops": "=="}, {"input": "find_max(['name', 'of','string'])", "output": "'string'", "ops": "=="}, {"input": "find_max(['aa', 'ee', 'ef', 'ii','mm', 'rr','ss', 'tt', 'vv', 'kk', 'gbb', 'gopog'])", "output": "'gopog'", "ops": "=="}, {"input": "find_max(['we', 'are', 'a','mad', 'nation'])", "output": "'nation'", "ops": "=="}, {"input": "find_max(['aaab', 'bbc'])", "output": "'aaab'", "ops": "=="}, {"input": "find_max([''])", "output": "''", "ops": "=="}, {"input": "find_max(['name', 'of','string'])", "output": "'string'", "ops": "=="}, {"input": "find_max(['you', 'would', 'never', 'expect', 'not', 'play', 'game'])", "output": "'expect'", "ops": "=="}, {"input": "find_max(['we', 'are', 'a','mad', 'nation'])", "output": "'nation'", "ops": "=="}, {"input": "find_max(['a', 'd'])", "output": "'a'", "ops": "=="}, {"input": "find_max(['we', 'are', 'a','mad', 'nation'])", "output": "'nation'", "ops": "=="}, {"input": "find_max(['abc'])", "output": "'abc'", "ops": "=="}, {"input": "find_max(['jj', 'g', 'qq', 'iffyqq'])", "output": "'iffyqq'", "ops": "=="}, {"input": "find_max(['cc', 'kk', 'vopop', 'ww', 'x', 'z'])", "output": "'vopop'", "ops": "=="}, {"input": "find_max('C')", "output": "'C'", "ops": "=="}, {"input": "find_max(['we', 'a'])", "output": "'we'", "ops": "=="}, {"input": "find_max(['name', 'of','string'])", "output": "'string'", "ops": "=="}, {"input": "find_max(['c', 'C'])", "output": "'C'", "ops": "=="}, {"input": "find_max('123')", "output": "'1'", "ops": "=="}, {"input": "find_max('A23B334')", "output": "'2'", "ops": "=="}, {"input": "find_max(['we', 'are', 'a','mad', 'nation'])", "output": "'nation'", "ops": "=="}, {"input": "find_max(['name', 'of','string'])", "output": "'string'", "ops": "=="}, {"input": "find_max([\"play\", \"kamykays\", \"he\"])", "output": "'kamykays'", "ops": "=="}, {"input": "find_max(['we', 'are', 'a','mad', 'nation'])", "output": "'nation'", "ops": "=="}, {"input": "find_max(['name', 'of','string'])", "output": "'string'", "ops": "=="}, {"input": "find_max(['we', 'are', 'a','mad', 'nation'])", "output": "'nation'", "ops": "=="}, {"input": "find_max(['pr', 'k'])", "output": "'pr'", "ops": "=="}, {"input": "find_max(['name', 'of','string'])", "output": "'string'", "ops": "=="}], "614": [{"input": "match_parens(['(()(', '(()('])", "output": "'No'", "ops": "=="}, {"input": "match_parens(['()))', ')()'])", "output": "'No'", "ops": "=="}, {"input": "match_parens(['', ''])", "output": "'Yes'", "ops": "=="}, {"input": "match_parens(['(()(())', '(()(()', ')]'])", "output": "'No'", "ops": "=="}, {"input": "match_parens(['(', '('])", "output": "'No'", "ops": "=="}, {"input": "match_parens(['()', '(', '()))))((\"((('])", "output": "'No'", "ops": "=="}, {"input": "match_parens(['((', ')('])", "output": "'No'", "ops": "=="}, {"input": "match_parens(['(', '])'])", "output": "'No'", "ops": "=="}], "483": [{"input": "remove_matching_tuple(tuple(['a', 'a', 'z', 'y', 'a']), tuple([3, 4, 1, 6, 4, 2])) == (1, 2, 2, 4, 2, 2, 1)", "output": "False", "ops": "=="}, {"input": "remove_matching_tuple(['I like'], [])", "output": "['I like']", "ops": "=="}, {"input": "remove_matching_tuple([], [])", "output": "[]", "ops": "=="}, {"input": "remove_matching_tuple([], [])", "output": "[]", "ops": "=="}, {"input": "remove_matching_tuple([], [])", "output": "[]", "ops": "=="}, {"input": "remove_matching_tuple((), ['and', (3, 'others', 'do', 1)])", "output": "[]", "ops": "=="}, {"input": "remove_matching_tuple([], [1])", "output": "[]", "ops": "=="}, {"input": "remove_matching_tuple(['my', 'name', 'is'], [('name', 'is')])", "output": "['my', 'name', 'is']", "ops": "=="}], "615": [{"input": "maximum([1, 2, True, 3], False)", "output": "[]", "ops": "=="}, {"input": "maximum([1, 2, 3, 100, -1], -5)", "output": "[]", "ops": "=="}, {"input": "maximum([], 0)", "output": "[]", "ops": "=="}, {"input": "maximum([0], -3)", "output": "[]", "ops": "=="}, {"input": "maximum([], 5)", "output": "[]", "ops": "=="}], "562": [{"input": "fruit_distribution('', 0)", "output": "0", "ops": "=="}], "652": [{"input": "right_angle_triangle(100, 100, 100)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(23, 7, 39)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(6, 15, 20)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(2, 1, 1)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(4, 6, 15)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(8, 10, 26)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(1, 3, 10)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(1, 7, 24)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(19, 37, 55)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(2, 7, 9)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(7, 7, 12)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(9, 4, 7)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(6, 15, 28)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(8, 14, 15)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(5, 4, 24)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(1, 1, 4)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(26, 17, 8)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(9, 5, 29)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(3, 4, 1)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(10, 12, 5)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(50, 49, 47)", "output": "False", "ops": "=="}], "577": [{"input": "prime_length('3333')", "output": "False", "ops": "=="}, {"input": "prime_length([])", "output": "False", "ops": "=="}, {"input": "prime_length(str(10))*5+prime_length(str('1'))+prime_length(str('03030303030'))**2==(290081)**2", "output": "False", "ops": "=="}, {"input": "prime_length('333')", "output": "True", "ops": "=="}], "613": [{"input": "get_closest_vowel(\"\")", "output": "''", "ops": "=="}, {"input": "get_closest_vowel('')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel('Oxy')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel(', Ain!')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel('')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel(r'c:/')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel(r'as://')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel(r'c:\\:/')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel(r'/\\:')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel(r'a\\nb\\r\\n\\ccup')", "output": "'u'", "ops": "=="}], "276": [{"input": "dict_filter({}, 150)", "output": "{}", "ops": "=="}, {"input": "dict_filter({}, -170)", "output": "{}", "ops": "=="}, {"input": "dict_filter({}, 'cierra')", "output": "{}", "ops": "=="}], "621": [{"input": "is_sorted([0])", "output": "True", "ops": "=="}, {"input": "is_sorted([0, 2, 4])", "output": "True", "ops": "=="}, {"input": "is_sorted([0, 1, -2, 3])", "output": "False", "ops": "=="}, {"input": "is_sorted([0]) == False", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 2, 4])!= False", "output": "True", "ops": "=="}, {"input": "is_sorted([1]) == True", "output": "True", "ops": "=="}, {"input": "is_sorted([3]) == True", "output": "True", "ops": "=="}, {"input": "is_sorted([1, 3])", "output": "True", "ops": "=="}, {"input": "is_sorted([1, 20])", "output": "True", "ops": "=="}, {"input": "is_sorted([14, 5, 18, 27])", "output": "False", "ops": "=="}, {"input": "is_sorted([104, 5, 25, 16, 6, 31, 39, 28, 10, 19, 36, 24, 28, 49, 19, 35, 29, 4, 7, 23, 22, 30])", "output": "False", "ops": "=="}, {"input": "is_sorted([72, 1, 20, 0, 16, 12, 6, 31, 27, 8, 30, 32, 39, 28, 8, 30, 24, 4, 14, 9, 22, 36, 36, 27, 4, 11, 33, 51])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 2, 5, 6])", "output": "True", "ops": "=="}, {"input": "not is_sorted([32, 2, 1, 36, 35, 33, 13, 33, 3, 34, 19, 29, 28, 42, 39, 19, 42, 19, 10, 39, 11, 38, 4, 23, 27, 13, 41])", "output": "True", "ops": "=="}, {"input": "is_sorted([4, 2])", "output": "False", "ops": "=="}, {"input": "is_sorted([2, 2, 3, 3])", "output": "True", "ops": "=="}, {"input": "is_sorted([2, 3])", "output": "True", "ops": "=="}, {"input": "is_sorted([4, 2, 5, 6])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 3, 4])", "output": "True", "ops": "=="}, {"input": "is_sorted([6, 3])", "output": "False", "ops": "=="}, {"input": "is_sorted([4, 1, 6, 6])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 2, 2, 4, 6, 1, 6])", "output": "False", "ops": "=="}, {"input": "is_sorted([2])", "output": "True", "ops": "=="}, {"input": "is_sorted([3])", "output": "True", "ops": "=="}, {"input": "is_sorted([2, 3])", "output": "True", "ops": "=="}, {"input": "is_sorted([7, 10])", "output": "True", "ops": "=="}, {"input": "is_sorted([7, 3, 15, 9])", "output": "False", "ops": "=="}, {"input": "is_sorted([0, 9])", "output": "True", "ops": "=="}, {"input": "is_sorted([9, 0])", "output": "False", "ops": "=="}, {"input": "is_sorted([-1, 7])", "output": "True", "ops": "=="}, {"input": "is_sorted([1, 2])", "output": "True", "ops": "=="}, {"input": "is_sorted([922337203685198973111156, 827503810225404620793, 50704424979773290747396709])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 0])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 2, 3]) and is_sorted([2, 3])", "output": "True", "ops": "=="}, {"input": "is_sorted([2, 1, 2, 3, 4])", "output": "False", "ops": "=="}, {"input": "is_sorted([2, 3, 1, 2, 3, 4])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 123, 2, 3, 453, 10, 9, 32])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 32, 2, 3, 453, 123, 10, 9, 34])", "output": "False", "ops": "=="}, {"input": "is_sorted([-3, 1, 5, 2, 3, 5])", "output": "False", "ops": "=="}, {"input": "is_sorted([423])", "output": "True", "ops": "=="}, {"input": "is_sorted([-17])", "output": "True", "ops": "=="}, {"input": "is_sorted([1234])", "output": "True", "ops": "=="}, {"input": "is_sorted([2, 1, 3, 4, 5, 6])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 2, 3, 4, 5, 1, 9])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 2, 3, 4, 1, 2, 9])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 3, 6])", "output": "True", "ops": "=="}, {"input": "is_sorted([3, 6])", "output": "True", "ops": "=="}, {"input": "is_sorted([2, 4])", "output": "True", "ops": "=="}, {"input": "is_sorted([103, 546, 978])", "output": "True", "ops": "=="}, {"input": "is_sorted([3])", "output": "True", "ops": "=="}, {"input": "is_sorted([2, 3, 5])", "output": "True", "ops": "=="}], "541": [{"input": "pairs_sum_to_zero([0, 0])", "output": "True", "ops": "=="}, {"input": "pairs_sum_to_zero([])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero(())", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([1] or [0] and [1] +[-4])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([0] * 1000)", "output": "True", "ops": "=="}, {"input": "pairs_sum_to_zero([-3, 9, -1])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero(list(range(1, 100)))", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([1, 3, -1])!= [-1, 3]", "output": "True", "ops": "=="}, {"input": "pairs_sum_to_zero([1] * 15)", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([] or [0])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([0])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([3, 1])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([-1])", "output": "False", "ops": "=="}], "532": [{"input": "sort_third([-30, -8, -25, -104, -4, -79, -28, -16, -2, -27, -1203])", "output": "[-104, -8, -25, -30, -4, -79, -28, -16, -2, -27, -1203]", "ops": "=="}, {"input": "sort_third([]) == ([], [], [])", "output": "False", "ops": "=="}, {"input": "sort_third([]).sort()", "output": "None", "ops": "=="}, {"input": "sort_third([1, 2, -10, -2]) is None", "output": "False", "ops": "=="}, {"input": "sort_third([(1, 2, 5)])", "output": "[(1, 2, 5)]", "ops": "=="}, {"input": "sort_third([-5, 5, -8, -9, -11])", "output": "[-9, 5, -8, -5, -11]", "ops": "=="}, {"input": "sort_third([\"hi-1\", \"hi-23\", \"world-21\", \"hell0\"])", "output": "['hell0', 'hi-23', 'world-21', 'hi-1']", "ops": "=="}, {"input": "sort_third([0, 1, 0])", "output": "[0, 1, 0]", "ops": "=="}], "538": [{"input": "triples_sum_to_zero([0])", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero(range(1, 10))", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero([])", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero([0, 1, 1, 2])", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero(range(0, 1))", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero([0])", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero([])", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero([0] * 100)", "output": "True", "ops": "=="}, {"input": "triples_sum_to_zero([])", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero([])", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero([0])", "output": "False", "ops": "=="}], "565": [{"input": "strange_sort_list({})", "output": "[]", "ops": "=="}, {"input": "strange_sort_list([[4, 5, 6], [3, 4, -1], [1]])", "output": "[[1], [4, 5, 6], [3, 4, -1]]", "ops": "=="}, {"input": "strange_sort_list([2, 7])", "output": "[2, 7]", "ops": "=="}, {"input": "strange_sort_list([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9780])", "output": "[0, 9780, 0, 9, 1, 8, 2, 7, 3, 6, 4, 5]", "ops": "=="}, {"input": "strange_sort_list([-1, -3, -4])", "output": "[-4, -1, -3]", "ops": "=="}, {"input": "strange_sort_list([3, 1, 6])", "output": "[1, 6, 3]", "ops": "=="}, {"input": "strange_sort_list([1]*30)", "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]", "ops": "=="}, {"input": "strange_sort_list([-11, -11])", "output": "[-11, -11]", "ops": "=="}, {"input": "strange_sort_list([-1, -2, -3])", "output": "[-3, -1, -2]", "ops": "=="}, {"input": "strange_sort_list([0] * 8)", "output": "[0, 0, 0, 0, 0, 0, 0, 0]", "ops": "=="}, {"input": "strange_sort_list([1, 3, 7])", "output": "[1, 7, 3]", "ops": "=="}, {"input": "strange_sort_list([1, 5, 2])", "output": "[1, 5, 2]", "ops": "=="}, {"input": "strange_sort_list(['a'])", "output": "['a']", "ops": "=="}, {"input": "strange_sort_list([-2147483648])", "output": "[-2147483648]", "ops": "=="}], "463": [{"input": "check_value({'Dinet': 3, 'Einste': 10, 'Vallorbeer': 0}, 12)", "output": "False", "ops": "=="}, {"input": "check_value({'Dinet': 3, 'Einste': 10, 'Vallorbeer': 0}, 0)", "output": "False", "ops": "=="}, {"input": "check_value({'Mirabel Beach': 6,'Toronto': 13,'Ontario': 6}, 11)", "output": "False", "ops": "=="}, {"input": "check_value({'City1': 0, 'City2': 1, 'City3': 2, 'City4': 1, 'City5': 3}, -2)", "output": "False", "ops": "=="}], "651": [{"input": "int_to_mini_roman( 945)", "output": "'cmxlv'", "ops": "=="}, {"input": "int_to_mini_roman(1560)", "output": "'mdlx'", "ops": "=="}, {"input": "int_to_mini_roman(4506)", "output": "'mmmmdvi'", "ops": "=="}, {"input": "int_to_mini_roman(1044)", "output": "'mxliv'", "ops": "=="}, {"input": "int_to_mini_roman(2156)", "output": "'mmclvi'", "ops": "=="}, {"input": "int_to_mini_roman(1900)", "output": "'mcm'", "ops": "=="}, {"input": "int_to_mini_roman(2000)", "output": "'mm'", "ops": "=="}, {"input": "int_to_mini_roman(5001)", "output": "'mmmmmi'", "ops": "=="}, {"input": "int_to_mini_roman(10000)", "output": "'mmmmmmmmmm'", "ops": "=="}, {"input": "int_to_mini_roman(9000)", "output": "'mmmmmmmmm'", "ops": "=="}, {"input": "int_to_mini_roman(9999)", "output": "'mmmmmmmmmcmxcix'", "ops": "=="}, {"input": "int_to_mini_roman(10043)", "output": "'mmmmmmmmmmxliii'", "ops": "=="}, {"input": "int_to_mini_roman(10000)", "output": "'mmmmmmmmmm'", "ops": "=="}, {"input": "int_to_mini_roman(423)", "output": "'cdxxiii'", "ops": "=="}, {"input": "int_to_mini_roman(4201)", "output": "'mmmmcci'", "ops": "=="}, {"input": "int_to_mini_roman(100234)", "output": "'mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmccxxxiv'", "ops": "=="}, {"input": "int_to_mini_roman(1535)", "output": "'mdxxxv'", "ops": "=="}, {"input": "int_to_mini_roman(1056)", "output": "'mlvi'", "ops": "=="}, {"input": "int_to_mini_roman(2104)", "output": "'mmciv'", "ops": "=="}, {"input": "int_to_mini_roman(1234)", "output": "'mccxxxiv'", "ops": "=="}, {"input": "int_to_mini_roman(54321)", "output": "'mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmcccxxi'", "ops": "=="}, {"input": "int_to_mini_roman(1610)", "output": "'mdcx'", "ops": "=="}, {"input": "int_to_mini_roman(100000)", "output": "'mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm'", "ops": "=="}, {"input": "int_to_mini_roman(1009)", "output": "'mix'", "ops": "=="}, {"input": "int_to_mini_roman(99998)", "output": "'mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmcmxcviii'", "ops": "=="}, {"input": "int_to_mini_roman(99324)", "output": "'mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmcccxxiv'", "ops": "=="}], "628": [{"input": "sum_squares([1, 2, 3, 4, 5])", "output": "55", "ops": "=="}, {"input": "sum_squares([1, 2, 4, 8, 16])", "output": "341", "ops": "=="}, {"input": "sum_squares(range(1, 10))", "output": "285", "ops": "=="}, {"input": "sum_squares('')", "output": "0", "ops": "=="}, {"input": "sum_squares([1])", "output": "1", "ops": "=="}, {"input": "sum_squares([])", "output": "0", "ops": "=="}, {"input": "sum_squares('')", "output": "0", "ops": "=="}, {"input": "sum_squares([])", "output": "0", "ops": "=="}, {"input": "sum_squares([1])", "output": "1", "ops": "=="}, {"input": "sum_squares([])", "output": "0", "ops": "=="}, {"input": "sum_squares([])", "output": "0", "ops": "=="}, {"input": "ss = sum_squares(x for x in [1, 2, 3])", "output": "14", "ops": "=="}, {"input": "sum_squares([])", "output": "0", "ops": "=="}], "30": [{"input": "func('', 1)", "output": "[]", "ops": "=="}, {"input": "func([], 0)", "output": "[]", "ops": "=="}], "141": [{"input": "count_samepair([], [], [])", "output": "0", "ops": "=="}, {"input": "count_samepair([1], [1, 2], [1, 2])", "output": "1", "ops": "=="}, {"input": "count_samepair([\"aa\"], [2, \"b\"], [2, \"b\"])", "output": "0", "ops": "=="}, {"input": "count_samepair([\"aa\"], [2, 3, 4], [2])", "output": "0", "ops": "=="}, {"input": "count_samepair([], [1], [1])", "output": "0", "ops": "=="}, {"input": "count_samepair([1], [1], [1])", "output": "1", "ops": "=="}], "644": [{"input": "sorted_list_sum(['a', 'aa', 'abc', 'acc', ''])", "output": "['', 'aa']", "ops": "=="}, {"input": "sorted_list_sum([])", "output": "[]", "ops": "=="}, {"input": "sorted_list_sum(['a', 'aucc', 'bbb', 'dd'])", "output": "['dd', 'aucc']", "ops": "=="}, {"input": "sorted_list_sum(['d', 'd'])", "output": "[]", "ops": "=="}, {"input": "sorted_list_sum(['h', 'b', 'x', 'e', 'j', 'hq'])", "output": "['hq']", "ops": "=="}, {"input": "sorted_list_sum(['xx', 'xx', 'bbb', 'hhh', 'yyy'])", "output": "['xx', 'xx']", "ops": "=="}, {"input": "sorted_list_sum(['h', 'a', 'c'])", "output": "[]", "ops": "=="}, {"input": "sorted_list_sum([])", "output": "[]", "ops": "=="}, {"input": "sorted_list_sum(['', '', '', 'ai'])", "output": "['', '', '', 'ai']", "ops": "=="}, {"input": "sorted_list_sum(['school', 'ai', 'asdf'])", "output": "['ai', 'asdf', 'school']", "ops": "=="}, {"input": "sorted_list_sum(['c', 'cd', 'cde', 'd'])", "output": "['cd']", "ops": "=="}], "472": [{"input": "tuple_intersection([], [])", "output": "set()", "ops": "=="}, {"input": "tuple_intersection([], [])", "output": "set()", "ops": "=="}, {"input": "tuple_intersection([], [(7, 4), (11, 12), (17, 10)])", "output": "set()", "ops": "=="}, {"input": "tuple_intersection(list([(1, 2, 3)]) * (50//3), '...')", "output": "set()", "ops": "=="}, {"input": "tuple_intersection([(13, 15), (17, 20)], [])", "output": "set()", "ops": "=="}, {"input": "tuple_intersection([], [])", "output": "set()", "ops": "=="}], "72": [{"input": "multiple_split('  \\n\\n\\n    '*3)", "output": "['  ', '', '', '      ', '', '', '      ', '', '', '    ']", "ops": "=="}, {"input": "len(multiple_split('  \\n\\n\\n' * 4))", "output": "13", "ops": "=="}, {"input": "multiple_split(\"\")", "output": "['']", "ops": "=="}], "640": [{"input": "order_by_points((0, 4, 3, 3, 5, 4, 3, 2, 5, 4, 5, 3))", "output": "[0, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5]", "ops": "=="}, {"input": "order_by_points([-2, -2, -1])", "output": "[-2, -2, -1]", "ops": "=="}, {"input": "order_by_points({})", "output": "[]", "ops": "=="}, {"input": "order_by_points(range(10))", "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "ops": "=="}, {"input": "sorted(order_by_points([5, -42, 0, 4, 6]))[0:4] == [-64, -41, -41, 0, -5]", "output": "False", "ops": "=="}, {"input": "order_by_points(range(11))", "output": "[0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9]", "ops": "=="}, {"input": "order_by_points(set([1, 1, 2, 2, -4, 5, 94, 99]))", "output": "[-4, 1, 2, 5, 94, 99]", "ops": "=="}], "173": [{"input": "group_keyvalue(zip([\"x\" for i in range(20)], \"y\"))", "output": "{'x': ['y']}", "ops": "=="}, {"input": "group_keyvalue([])", "output": "{}", "ops": "=="}, {"input": "group_keyvalue([])", "output": "{}", "ops": "=="}, {"input": "group_keyvalue([])", "output": "{}", "ops": "=="}], "444": [{"input": "index_multiplication([], ((2, 4), (5, 6)))", "output": "()", "ops": "=="}], "258": [{"input": "maximize_elements((('A', 2), ('B', 4), (1,)), (('B', 3), ('A', 1)))", "output": "(('B', 3), ('B', 4))", "ops": "=="}, {"input": "maximize_elements(((1, 9), (4, 3)), ((4, 11), (9, 9)))", "output": "((4, 11), (9, 9))", "ops": "=="}, {"input": "maximize_elements(((9, 10), ()), ((0, 4), ()))", "output": "((9, 10), ())", "ops": "=="}], "400": [{"input": "add_nested_tuples(((1, 9), (2, 10), (0, 11)), ((0, 12), (9, 13), (12, 0)))", "output": "((1, 21), (11, 23), (12, 11))", "ops": "=="}], "110": [{"input": "common_in_nested_lists([[], []])", "output": "[]", "ops": "=="}, {"input": "common_in_nested_lists([[2, 3, 4, 4], [4, 5], [3, 4, 8], [2, 9]])", "output": "[]", "ops": "=="}, {"input": "common_in_nested_lists([[2, 9, 7], [0, 1], [3, 5], [4, 9], [1, 2]])", "output": "[]", "ops": "=="}, {"input": "common_in_nested_lists([[2, 3, 4, 2], [4, 5], [6, 4, 8], [4, 7], [6, 8, 5]])", "output": "[]", "ops": "=="}, {"input": "common_in_nested_lists([[7, 8], [9]])", "output": "[]", "ops": "=="}, {"input": "common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6]])", "output": "[]", "ops": "=="}, {"input": "common_in_nested_lists([[], [], [0]])", "output": "[]", "ops": "=="}, {"input": "common_in_nested_lists([[2, 3, 4, 1, 5, 8, 23], [11, 12, 15, 17], [6, 8, 4, 5, 6]])", "output": "[]", "ops": "=="}, {"input": "common_in_nested_lists([[]])", "output": "[]", "ops": "=="}, {"input": "common_in_nested_lists([[0]])", "output": "[0]", "ops": "=="}, {"input": "common_in_nested_lists([[10, 12, 14], [4, 5], [6, 7, 8, 9, 10]])", "output": "[]", "ops": "=="}, {"input": "common_in_nested_lists([[], []])", "output": "[]", "ops": "=="}], "325": [{"input": "most_occurrences(['Helicoid is the mother of all rods in a given tree'])", "output": "'Helicoid'", "ops": "=="}, {"input": "most_occurrences(['the workdays', 'working days', 'nightwork'])", "output": "'the'", "ops": "=="}, {"input": "most_occurrences('Sally has the pleasure of the super')", "output": "'e'", "ops": "=="}, {"input": "most_occurrences(['Water can splash', 'It could easily splash water'])", "output": "'splash'", "ops": "=="}, {"input": "'Python rocks!' in most_occurrences('testPython rocks!')", "output": "False", "ops": "=="}, {"input": "most_occurrences(['No one is as great as you think it '])", "output": "'as'", "ops": "=="}, {"input": "most_occurrences(['The rain is quite heavy', 'It can be heavey'])", "output": "'The'", "ops": "=="}], "627": [{"input": "is_nested(\"[123]+[{}]\")", "output": "True", "ops": "=="}, {"input": "is_nested(\" \")", "output": "False", "ops": "=="}, {"input": "is_nested(']')", "output": "False", "ops": "=="}, {"input": "not is_nested(b'  ')", "output": "True", "ops": "=="}, {"input": "is_nested([])", "output": "False", "ops": "=="}, {"input": "not is_nested(b' \\t')", "output": "True", "ops": "=="}, {"input": "is_nested([])", "output": "False", "ops": "=="}, {"input": "is_nested([ ])", "output": "False", "ops": "=="}, {"input": "is_nested( '[ [] ] { }')", "output": "True", "ops": "=="}, {"input": "is_nested([])", "output": "False", "ops": "=="}, {"input": "is_nested(())", "output": "False", "ops": "=="}, {"input": "is_nested({})", "output": "False", "ops": "=="}, {"input": "is_nested('(1+2j[3)4]')", "output": "False", "ops": "=="}, {"input": "not is_nested(' ')", "output": "True", "ops": "=="}], "212": [{"input": "concatenate_strings(('Shammarla', 'Noet'), ('Raju','Laxmi Nopeami'))", "output": "('ShammarlaRaju', 'NoetLaxmi Nopeami')", "ops": "=="}, {"input": "concatenate_strings('Rao Mamta',' ')", "output": "('R ',)", "ops": "=="}], "607": [{"input": "reverse_delete([], '')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete('mamma','mia')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete('mamma','mia')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete('mamma','mia')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete('', '')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete('mamma','mia')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete([], '')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete('mamma','mia')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete('mamma','mia')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete('', '')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete('mamma','mia')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete_none = ''", "output": "''", "ops": "=="}, {"input": "reverse_delete(('mata', 'gamm'), 'omt')", "output": "('matagamm', False)", "ops": "=="}, {"input": "reverse_delete('mamma','mia')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete('mamma','mia')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete('mamma','mia')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete('', 'v')", "output": "('', True)", "ops": "=="}], "215": [{"input": "check_subset_list([1, 3, 5], [[5],[4],[3,1]])", "output": "False", "ops": "=="}, {"input": "check_subset_list([['a', 'a', 'a', 1, 2, 2, 2]], [[2, 4, 5]])", "output": "False", "ops": "=="}, {"input": "check_subset_list(['a'], [1, 2, 'a'])", "output": "False", "ops": "=="}], "506": [{"input": "filter_by_substring(['champagne'], 'ampagraf')", "output": "[]", "ops": "=="}, {"input": "filter_by_substring(['grease', 'greataasd', 'greasy'], 'grea')", "output": "['grease', 'greataasd', 'greasy']", "ops": "=="}, {"input": "filter_by_substring(['blah'], 'xx')", "output": "[]", "ops": "=="}, {"input": "filter_by_substring(['xxxBBBxxx'], 'XXX')", "output": "[]", "ops": "=="}, {"input": "filter_by_substring(['grunt', 'gruesome'], 'ruing')", "output": "[]", "ops": "=="}, {"input": "filter_by_substring(['bower', 'oop', 'potter', 'lol','mop', 'flip', 'wrangl'], 'op')", "output": "['oop', 'mop']", "ops": "=="}, {"input": "filter_by_substring(['mop','spokes', 'op', 'killer','stigger'], 'r')", "output": "['killer', 'stigger']", "ops": "=="}, {"input": "filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome runs', 'dry run'], 'run')", "output": "['grunt', 'prune', 'gruesome runs', 'dry run']", "ops": "=="}, {"input": "filter_by_substring(['acehill', 'caryl', 'DrEvil', 'rhyolite'],'revile')", "output": "[]", "ops": "=="}, {"input": "filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA'], 'aa')", "output": "['aaaxxy']", "ops": "=="}, {"input": "filter_by_substring(['the', 'quick'], 'th')", "output": "['the']", "ops": "=="}, {"input": "filter_by_substring(['the', 'quick', 'lord', 'gargling'],'s')", "output": "[]", "ops": "=="}, {"input": "filter_by_substring(['v', 't', 'rine'], 'v')", "output": "['v']", "ops": "=="}, {"input": "filter_by_substring(['bam', 'bok', 'gulp', 'lo', 'john', 'dok'], '')", "output": "['bam', 'bok', 'gulp', 'lo', 'john', 'dok']", "ops": "=="}, {"input": "filter_by_substring(['asb', 'asd', 'grg', 'grtez'], 'abcefg')", "output": "[]", "ops": "=="}, {"input": "filter_by_substring(['abcdef', 'fggg'], 'ef')", "output": "['abcdef']", "ops": "=="}], "103": [{"input": "sort_sublists(([' red ', 'green'], ['blue ','black'], [' orange', 'brown']))", "output": "[[' red ', 'green'], ['blue ', 'black'], [' orange', 'brown']]", "ops": "=="}, {"input": "sort_sublists(([' red ', 'green'], ['blue ','black'], [' orange', 'brown']))", "output": "[[' red ', 'green'], ['blue ', 'black'], [' orange', 'brown']]", "ops": "=="}, {"input": "sort_sublists( ([]))", "output": "[]", "ops": "=="}, {"input": "sort_sublists(([' red ', 'green'], ['blue ','black'], [' orange', 'brown']))", "output": "[[' red ', 'green'], ['blue ', 'black'], [' orange', 'brown']]", "ops": "=="}, {"input": "sort_sublists(([' red ', 'green'], ['blue ','black'], [' orange', 'brown']))", "output": "[[' red ', 'green'], ['blue ', 'black'], [' orange', 'brown']]", "ops": "=="}, {"input": "sort_sublists(([' red ', 'green'], ['blue ','black'], [' orange', 'brown']))", "output": "[[' red ', 'green'], ['blue ', 'black'], [' orange', 'brown']]", "ops": "=="}, {"input": "sort_sublists(([' x ', ['y']], [['x']]))", "output": "[[' x ', ['y']], [['x']]]", "ops": "=="}, {"input": "sort_sublists(([' red ', 'green'], ['blue ','black'], [' orange', 'brown']))", "output": "[[' red ', 'green'], ['blue ', 'black'], [' orange', 'brown']]", "ops": "=="}, {"input": "sort_sublists(([], []))", "output": "[[], []]", "ops": "=="}, {"input": "sort_sublists(([' red ', 'green'], ['blue ','black'], [' orange', 'brown']))", "output": "[[' red ', 'green'], ['blue ', 'black'], [' orange', 'brown']]", "ops": "=="}, {"input": "sort_sublists(([' red ', 'green'], ['blue ','black'], [' orange', 'brown']))", "output": "[[' red ', 'green'], ['blue ', 'black'], [' orange', 'brown']]", "ops": "=="}, {"input": "sort_sublists(([' red ', 'green'], ['blue ','black'], [' orange', 'brown']))", "output": "[[' red ', 'green'], ['blue ', 'black'], [' orange', 'brown']]", "ops": "=="}, {"input": "sort_sublists(([' red ', 'green'], ['blue ','black'], [' orange', 'brown']))", "output": "[[' red ', 'green'], ['blue ', 'black'], [' orange', 'brown']]", "ops": "=="}], "519": [{"input": "find_closest_elements([1, 0, 0, 0, 1, 1])", "output": "(1, 1)", "ops": "=="}, {"input": "find_closest_elements([1, 0, 1, 0, 1, 2])", "output": "(1, 1)", "ops": "=="}, {"input": "find_closest_elements('')", "output": "None", "ops": "=="}, {"input": "find_closest_elements([-1.0, -2.1])", "output": "(-2.1, -1.0)", "ops": "=="}, {"input": "find_closest_elements([-10, 0])", "output": "(-10, 0)", "ops": "=="}, {"input": "find_closest_elements([10.0])", "output": "None", "ops": "=="}, {"input": "find_closest_elements(list())", "output": "None", "ops": "=="}], "605": [{"input": "exchange([0], [1, 2, 3])", "output": "'YES'", "ops": "=="}, {"input": "exchange({}, {})", "output": "'YES'", "ops": "=="}, {"input": "exchange([0], [-1, 5, 3])", "output": "'YES'", "ops": "=="}, {"input": "exchange(range(8), range(2))", "output": "'NO'", "ops": "=="}, {"input": "exchange([1], [2, 3])", "output": "'YES'", "ops": "=="}, {"input": "exchange([1], [1, 1])", "output": "'NO'", "ops": "=="}, {"input": "exchange([], [])", "output": "'YES'", "ops": "=="}], "638": [{"input": "words_in_sentence.default_sentence = 'The Default.'", "output": "'The Default.'", "ops": "=="}, {"input": "words_in_sentence.default_words_in_sentence = {'go', 'let'}", "output": "{'let', 'go'}", "ops": "=="}, {"input": "words_in_sentence(\" the sentence has whitespace at the end\")", "output": "'the has at the end'", "ops": "=="}, {"input": "words_in_sentence(u'this is hur\\uF301 toh-by\\uF302')", "output": "'is toh-by\\uf302'", "ops": "=="}, {"input": "words_in_sentence('hello and you go there')", "output": "'hello and you go there'", "ops": "=="}, {"input": "words_in_sentence('I am writing an article and he goes byeeeeeeedtta at his moooooooooooot  http://mysite/articles and he goes toeeeeeeett here too by hello-eee-uuuuuuuu')", "output": "'am writing an article and he byeeeeeeedtta at his and he toeeeeeeett too by'", "ops": "=="}], "443": [{"input": "trim_tuple({'hello': 1}, 10)", "output": "'[()]'", "ops": "=="}, {"input": "trim_tuple([], 0)", "output": "'[]'", "ops": "=="}, {"input": "trim_tuple([(2, 0, 1, 1, 1)], 1)[1]", "output": "'('", "ops": "=="}, {"input": "print(trim_tuple([(10, 0, 1, 0), (1, 1, 0, 1, 0), (0, 0, 1, 0),], 0))", "output": "None", "ops": "=="}, {"input": "trim_tuple([(0, 1, 1, 2)], 3)[1]", "output": "'('", "ops": "=="}, {"input": "trim_tuple([], 3)", "output": "'[]'", "ops": "=="}], "570": [{"input": "is_multiply_prime(2 * 3)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(9 * 11 * 9)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(23 * 13)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(23 * 33 * 4 - 1)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(1) is False", "output": "True", "ops": "=="}, {"input": "is_multiply_prime(11 * 13 * 2 * 7 - 51)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(0)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(131 * 73)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(923132)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(2 * 11 * 13 +2)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(11 * 3 * 13)", "output": "True", "ops": "=="}, {"input": "is_multiply_prime(9 * 11 * 11)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(99 * 99)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(9 * 11 * 10)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(9 * 19 * 23)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime((99 * 99 * 199) + 93)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(-1)", "output": "False", "ops": "=="}], "551": [{"input": "same_chars(b'aab', b'aaccc')", "output": "False", "ops": "=="}, {"input": "same_chars('\u00e6', 'f')", "output": "False", "ops": "=="}, {"input": "same_chars(['aabb', 'aaccc'], ['aabb', 'aaccc', 'cdccc'])", "output": "False", "ops": "=="}, {"input": "same_chars(set(('A', 'B', 'C')), 'aabb')", "output": "False", "ops": "=="}, {"input": "same_chars('aazza', 'bzzca')", "output": "False", "ops": "=="}, {"input": "same_chars(('a'), ['a'])", "output": "True", "ops": "=="}, {"input": "same_chars((1, 2), {1: 1})", "output": "False", "ops": "=="}, {"input": "same_chars([], [None])", "output": "False", "ops": "=="}, {"input": "same_chars([\"ab\"], [\"\", \" \"])", "output": "False", "ops": "=="}, {"input": "same_chars('testabc', 'testabcTEST')", "output": "False", "ops": "=="}, {"input": "same_chars('test', '')", "output": "False", "ops": "=="}, {"input": "same_chars(\"Hello, 'world'!\", \"'Hello!'\")", "output": "False", "ops": "=="}, {"input": "same_chars(['e', 'e'], 'eee')", "output": "True", "ops": "=="}], "424": [{"input": "count_element_in_list(['a', 'c', 'e'], 'a')", "output": "1", "ops": "=="}, {"input": "count_element_in_list([], 3)", "output": "0", "ops": "=="}], "610": [{"input": "max_fill([], 0)", "output": "0", "ops": "=="}], "568": [{"input": "smallest_change([])", "output": "0", "ops": "=="}, {"input": "smallest_change([])", "output": "0", "ops": "=="}, {"input": "smallest_change([0])", "output": "0", "ops": "=="}, {"input": "smallest_change([])", "output": "0", "ops": "=="}, {"input": "smallest_change([])", "output": "0", "ops": "=="}, {"input": "smallest_change([1, 2, 3]) == [1, 0, 3, 5]", "output": "False", "ops": "=="}, {"input": "smallest_change([6, 5, 3, 2, 0, 3]) == [3, 1, 3, 8, 4]", "output": "False", "ops": "=="}, {"input": "smallest_change([0, 1, 2, 3, 4]) == [4]", "output": "False", "ops": "=="}, {"input": "smallest_change([0])", "output": "0", "ops": "=="}, {"input": "smallest_change([])", "output": "0", "ops": "=="}], "622": [{"input": "intersection((1, 0), (1, 2))", "output": "'NO'", "ops": "=="}], "611": [{"input": "sort_array([1])", "output": "[1]", "ops": "=="}, {"input": "sort_array([1])", "output": "[1]", "ops": "=="}, {"input": "sort_array([1,1,3,1,3,5,7,3,3,3,4,3,3,1])", "output": "[1, 1, 1, 1, 4, 3, 3, 3, 3, 3, 3, 3, 5, 7]", "ops": "=="}], "598": [{"input": "result = rounded_avg(986, 985)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(18, 23)", "output": "'0b10100'", "ops": "=="}, {"input": "rounded_avg(35, 30)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(513, 124)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(745, 390)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(591, 342)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(548, 166)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(13, 28)", "output": "'0b10100'", "ops": "=="}, {"input": "rounded_avg(13, 14)", "output": "'0b1110'", "ops": "=="}, {"input": "rounded_avg(12, 12)", "output": "'0b1100'", "ops": "=="}, {"input": "rounded_avg(1, 9)", "output": "'0b101'", "ops": "=="}, {"input": "rounded_avg(8, 10)", "output": "'0b1001'", "ops": "=="}, {"input": "rounded_avg(7, 9)", "output": "'0b1000'", "ops": "=="}, {"input": "rounded_avg(5, 7)", "output": "'0b110'", "ops": "=="}, {"input": "rounded_avg(1000, -700)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(8, 3)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(2, 2)", "output": "'0b10'", "ops": "=="}, {"input": "rounded_avg(4, 1)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(11, 10)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(30, 14)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(11, 17)", "output": "'0b1110'", "ops": "=="}, {"input": "rounded_avg(2, 13)", "output": "'0b1000'", "ops": "=="}, {"input": "rounded_avg(36, 12)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(20, 12)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(93, 34)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(0, 34)", "output": "'0b10001'", "ops": "=="}, {"input": "rounded_avg(36, 544)", "output": "'0b100100010'", "ops": "=="}, {"input": "rounded_avg(0, 986)", "output": "'0b111101101'", "ops": "=="}, {"input": "rounded_avg('42398', '01234')", "output": "-1", "ops": "=="}, {"input": "rounded_avg(7, 6)", "output": "-1", "ops": "=="}], "22": [{"input": "maximum_Sum([])", "output": "-100000", "ops": "=="}, {"input": "maximum_Sum([])", "output": "-100000", "ops": "=="}, {"input": "maximum_Sum([])", "output": "-100000", "ops": "=="}, {"input": "maximum_Sum([])", "output": "-100000", "ops": "=="}], "360": [{"input": "remove_empty([1])", "output": "[1]", "ops": "=="}, {"input": "remove_empty(range(0, 253, 10))", "output": "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]", "ops": "=="}, {"input": "remove_empty([])", "output": "[]", "ops": "=="}, {"input": "remove_empty([[], []])", "output": "[]", "ops": "=="}, {"input": "remove_empty([])", "output": "[]", "ops": "=="}, {"input": "remove_empty([])", "output": "[]", "ops": "=="}], "129": [{"input": "max_occurrences(list(range(10)))", "output": "(0, 1)", "ops": "=="}, {"input": "max_occurrences([1, 3, 5, 1, 1, 3])", "output": "(1, 3)", "ops": "=="}, {"input": "max_occurrences([1])", "output": "(1, 1)", "ops": "=="}, {"input": "max_occurrences([0, None, None, None])", "output": "(None, 3)", "ops": "=="}, {"input": "max_occurrences(set([0, 5, None]))", "output": "(0, 1)", "ops": "=="}, {"input": "max_occurrences([\"a\", 22, 10, 4, \"a\", 5, 10, 20, 20, 10, 3, 30]);", "output": "(10, 3)", "ops": "=="}, {"input": "max_occurrences(list(range(0, 1001)))", "output": "(0, 1)", "ops": "=="}, {"input": "max_occurrences([0, 100, 100, 30, 10, 10, 10, 20, 50, 70, 30])", "output": "(10, 3)", "ops": "=="}, {"input": "max_occurrences([0, 4, 3, 2, 9, 4, 3, 5])", "output": "(4, 2)", "ops": "=="}, {"input": "max_occurrences([1])", "output": "(1, 1)", "ops": "=="}, {"input": "max_occurrences([3, 3, 4, 7])", "output": "(3, 2)", "ops": "=="}, {"input": "max_occurrences(['a'] * 9874984)", "output": "('a', 9874984)", "ops": "=="}], "612": [{"input": "select_words('abc', 1)", "output": "[]", "ops": "=="}, {"input": "select_words('Hello dear world', 4)", "output": "['world']", "ops": "=="}, {"input": "select_words('a', 1)", "output": "[]", "ops": "=="}], "63": [{"input": "subject_marks([])", "output": "[]", "ops": "=="}, {"input": "subject_marks([])", "output": "[]", "ops": "=="}, {"input": "subject_marks([])", "output": "[]", "ops": "=="}, {"input": "subject_marks([('Computer', 96)])", "output": "[('Computer', 96)]", "ops": "=="}], "571": [{"input": "is_simple_power(154810, 5)", "output": "False", "ops": "=="}, {"input": "is_simple_power(163,30)", "output": "False", "ops": "=="}, {"input": "is_simple_power(1, 4096)", "output": "True", "ops": "=="}, {"input": "is_simple_power(4, 6)", "output": "False", "ops": "=="}, {"input": "is_simple_power(12221, 10)", "output": "False", "ops": "=="}, {"input": "is_simple_power(21, 12)", "output": "False", "ops": "=="}, {"input": "is_simple_power(9, 6)", "output": "False", "ops": "=="}, {"input": "is_simple_power(12, 8)", "output": "False", "ops": "=="}, {"input": "is_simple_power(14, 7)", "output": "False", "ops": "=="}, {"input": "is_simple_power(2, 33)", "output": "False", "ops": "=="}, {"input": "is_simple_power(124, 7)", "output": "False", "ops": "=="}, {"input": "is_simple_power(2, 25)", "output": "False", "ops": "=="}, {"input": "is_simple_power(2, 1)", "output": "False", "ops": "=="}, {"input": "is_simple_power(13, 6)", "output": "False", "ops": "=="}, {"input": "is_simple_power(2, 3)", "output": "False", "ops": "=="}, {"input": "is_simple_power(12, 2)", "output": "False", "ops": "=="}, {"input": "is_simple_power(12, 14)", "output": "False", "ops": "=="}, {"input": "is_simple_power(2, 12)", "output": "False", "ops": "=="}, {"input": "is_simple_power(1021, 12)", "output": "False", "ops": "=="}, {"input": "is_simple_power(1024, 1)", "output": "False", "ops": "=="}, {"input": "is_simple_power(0, 1)", "output": "False", "ops": "=="}, {"input": "is_simple_power(4, 156810)", "output": "False", "ops": "=="}, {"input": "is_simple_power(1, 16)", "output": "True", "ops": "=="}], "449": [{"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 8)", "output": "['practice', 'solution']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 6)", "output": "['Python']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 9)", "output": "['exercises']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 13)", "output": "[]", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 8)", "output": "['practice', 'solution']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 6)", "output": "['Python']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 9)", "output": "['exercises']", "ops": "=="}, {"input": "extract_string(['list', 'exercises', 'practice','solution'], 5)", "output": "[]", "ops": "=="}, {"input": "extract_string(['exercises', 'practice','solution'], 1)", "output": "[]", "ops": "=="}, {"input": "extract_string(['problems'], 1)", "output": "[]", "ops": "=="}, {"input": "extract_string(['Problems!', \"It's all right\\n.\\n\\r\\t\\a\"], 2)", "output": "[]", "ops": "=="}, {"input": "extract_string('Problem!', \"It's all right\\n.\\n\\r\\t\")", "output": "[]", "ops": "=="}, {"input": "extract_string('I like lists or more of strings.', '')", "output": "[]", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 8)", "output": "['practice', 'solution']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 6)", "output": "['Python']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 9)", "output": "['exercises']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 9)", "output": "['exercises']", "ops": "=="}, {"input": "extract_string(['Python'], 3)", "output": "[]", "ops": "=="}, {"input": "extract_string(['Python'], 3)", "output": "[]", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 8)", "output": "['practice', 'solution']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 6)", "output": "['Python']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 9)", "output": "['exercises']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 0)", "output": "[]", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 8)", "output": "['practice', 'solution']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 6)", "output": "['Python']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 9)", "output": "['exercises']", "ops": "=="}, {"input": "extract_string([\"practice\"], 16)", "output": "[]", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 8)", "output": "['practice', 'solution']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 6)", "output": "['Python']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 9)", "output": "['exercises']", "ops": "=="}, {"input": "extract_string(['Ruby On Rails'], 10)", "output": "[]", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 6)", "output": "['Python']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 8)", "output": "['practice', 'solution']", "ops": "=="}, {"input": "extract_string([], 5)", "output": "[]", "ops": "=="}, {"input": "extract_string(['Python'], 100)", "output": "[]", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 8)", "output": "['practice', 'solution']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 9)", "output": "['exercises']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 6)", "output": "['Python']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 9)", "output": "['exercises']", "ops": "=="}, {"input": "extract_string([], -1)", "output": "[]", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 8)", "output": "['practice', 'solution']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 6)", "output": "['Python']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 12)", "output": "[]", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 9)", "output": "['exercises']", "ops": "=="}, {"input": "extract_string(['Python', 'Python', 'practice'], 'no')", "output": "[]", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 8)", "output": "['practice', 'solution']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 6)", "output": "['Python']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 9)", "output": "['exercises']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice','solution'], 22)", "output": "[]", "ops": "=="}, {"input": "extract_string([], 11)", "output": "[]", "ops": "=="}, {"input": "extract_string([], 10)", "output": "[]", "ops": "=="}], "641": [{"input": "specialFilter(\"\")", "output": "0", "ops": "=="}, {"input": "specialFilter({})", "output": "0", "ops": "=="}, {"input": "specialFilter({})", "output": "0", "ops": "=="}, {"input": "specialFilter({})", "output": "0", "ops": "=="}, {"input": "specialFilter(range(6))", "output": "0", "ops": "=="}, {"input": "specialFilter(range(1))", "output": "0", "ops": "=="}], "25": [{"input": "check_k_elements([(1,)], 9)", "output": "False", "ops": "=="}, {"input": "check_k_elements([(10, 7, 9, 8)], 15)", "output": "False", "ops": "=="}, {"input": "check_k_elements([(9, 9, 9, 9, 9, 9)], 9)", "output": "True", "ops": "=="}, {"input": "check_k_elements([], 15)", "output": "True", "ops": "=="}, {"input": "check_k_elements([()], 1)", "output": "True", "ops": "=="}, {"input": "check_k_elements([(0, 0, 3, 0), (3, 8, 0, 0), (2, 2, 8, 0)], 8)", "output": "False", "ops": "=="}, {"input": "check_k_elements(('5', 'a','c', 'a'), 6)", "output": "False", "ops": "=="}, {"input": "check_k_elements(((\"a\", \"b\"), (5, 6)), 4)", "output": "False", "ops": "=="}, {"input": "check_k_elements([(9, 8, 9, 8, 9), (4,)], 21)", "output": "False", "ops": "=="}, {"input": "check_k_elements((), 42)", "output": "True", "ops": "=="}, {"input": "check_k_elements([(10,)], 32)", "output": "False", "ops": "=="}, {"input": "check_k_elements([(3, 3, 3, 3, 3, 3), (3, 3)], 3)", "output": "True", "ops": "=="}, {"input": "check_k_elements([(10, 0, 0), (9, 0, 0), (9, 9, 0), (0, 1, 0, 0)], 0)", "output": "False", "ops": "=="}, {"input": "check_k_elements([], 0)", "output": "True", "ops": "=="}], "185": [{"input": "check_literals(3, [])", "output": "None", "ops": "=="}, {"input": "check_literals(\"\", [])", "output": "None", "ops": "=="}, {"input": "check_literals(True, [])", "output": "None", "ops": "=="}, {"input": "check_literals('abcd', ['abcde', 'fghij'])", "output": "'Not Matched!'", "ops": "=="}, {"input": "check_literals('Good girl.', [])", "output": "None", "ops": "=="}, {"input": "check_literals('The brown fox.', ['brown'])", "output": "'Matched!'", "ops": "=="}], "603": [{"input": "count_nums([1, 2])", "output": "2", "ops": "=="}, {"input": "count_nums([0, 0])", "output": "0", "ops": "=="}, {"input": "count_nums([0, 1, -2, 4])", "output": "2", "ops": "=="}, {"input": "count_nums({0: 12, 2: 1})", "output": "1", "ops": "=="}, {"input": "count_nums(range(5, 8))", "output": "3", "ops": "=="}, {"input": "count_nums([0])", "output": "0", "ops": "=="}, {"input": "count_nums([0])", "output": "0", "ops": "=="}, {"input": "count_nums([-1,-20000])", "output": "0", "ops": "=="}, {"input": "count_nums([1, 0, -999999, 0, 1, 99999, 9881, 0])", "output": "5", "ops": "=="}, {"input": "count_nums([1, 0, 4, 0, 0, 99999])", "output": "3", "ops": "=="}], "116": [{"input": "list_to_float([])", "output": "'[]'", "ops": "=="}, {"input": "list_to_float([('10')])", "output": "'[(1.0, 0.0)]'", "ops": "=="}, {"input": "list_to_float([('10', '1')])", "output": "'[(10.0, 1.0)]'", "ops": "=="}, {"input": "list_to_float([('4', '0', '300000'), ('4', '0', '0100000'), ('5', '0', '0150557')])", "output": "'[(4.0, 0.0), (4.0, 0.0), (5.0, 0.0)]'", "ops": "=="}, {"input": "list_to_float(['14'])", "output": "'[(1.0, 4.0)]'", "ops": "=="}], "264": [{"input": "list_split([1, 2, 2, 4, 1, 2], 6)", "output": "[[1], [2], [2], [4], [1], [2]]", "ops": "=="}, {"input": "list_split([], 1)", "output": "[[]]", "ops": "=="}, {"input": "list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 1)", "output": "[['python', 'java', 'C', 'C++', 'DBMS', 'SQL']]", "ops": "=="}, {"input": "list_split([1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3,4,5,6,6,1,1,1,1,1,2,3,3,1,1,1,1,3,6,3,4,7,4,3,2], 1)", "output": "[[1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 5, 6, 6, 1, 1, 1, 1, 1, 2, 3, 3, 1, 1, 1, 1, 3, 6, 3, 4, 7, 4, 3, 2]]", "ops": "=="}, {"input": "list_split(['java', 'cobol', 'database'], 1)", "output": "[['java', 'cobol', 'database']]", "ops": "=="}, {"input": "list_split(['php', 'c++','mysql'], 1)", "output": "[['php', 'c++', 'mysql']]", "ops": "=="}, {"input": "list_split([13, 14, 1, 2, 2, 6, 3, 5], 4)", "output": "[[13, 2], [14, 6], [1, 3], [2, 5]]", "ops": "=="}, {"input": "list_split(['this', 'is','not', 'hello', 'world', '1', 'this', 'is'], 3)", "output": "[['this', 'hello', 'this'], ['is', 'world', 'is'], ['not', '1']]", "ops": "=="}, {"input": "list_split(['His', 'is ', 'a ', 'great', '.', 'My', 'name','is ', 'Daniel'], 2)", "output": "[['His', 'a ', '.', 'name', 'Daniel'], ['is ', 'great', 'My', 'is ']]", "ops": "=="}], "576": [{"input": "numerical_letter_grade([])", "output": "[]", "ops": "=="}, {"input": "numerical_letter_grade(\"\")", "output": "[]", "ops": "=="}, {"input": "numerical_letter_grade([1]), \"A \"", "output": "(['D'], 'A ')", "ops": "=="}, {"input": "numerical_letter_grade([0])", "output": "['E']", "ops": "=="}, {"input": "numerical_letter_grade([])", "output": "[]", "ops": "=="}, {"input": "numerical_letter_grade([0])", "output": "['E']", "ops": "=="}, {"input": "numerical_letter_grade([1])", "output": "['D']", "ops": "=="}], "617": [{"input": "add_elements([], 1)", "output": "0", "ops": "=="}, {"input": "add_elements(['ab', 'c', 'def', 'ghj'], 0)", "output": "0", "ops": "=="}, {"input": "add_elements([12, 23, 564, 7864, 92687, 2341, 2988, 995, 12], 3)", "output": "35", "ops": "=="}, {"input": "add_elements([], 0)", "output": "0", "ops": "=="}, {"input": "add_elements([], 1)", "output": "0", "ops": "=="}, {"input": "add_elements([1, -1], 6)", "output": "0", "ops": "=="}, {"input": "add_elements([0, 0, 0], -2)", "output": "0", "ops": "=="}, {"input": "add_elements([], 1)", "output": "0", "ops": "=="}, {"input": "add_elements([1], 0)", "output": "0", "ops": "=="}, {"input": "add_elements([-11], -11)", "output": "0", "ops": "=="}, {"input": "add_elements([1], 2)", "output": "1", "ops": "=="}, {"input": "add_elements([], 0)", "output": "0", "ops": "=="}, {"input": "add_elements([1, 2], 3)!= [3, 2, 1]", "output": "True", "ops": "=="}, {"input": "add_elements([1], 0)", "output": "0", "ops": "=="}, {"input": "add_elements([1, 2, 4], 4)", "output": "7", "ops": "=="}], "489": [{"input": "extract_symmetric([])", "output": "set()", "ops": "=="}, {"input": "extract_symmetric([])", "output": "set()", "ops": "=="}, {"input": "extract_symmetric([])", "output": "set()", "ops": "=="}, {"input": "extract_symmetric({})", "output": "set()", "ops": "=="}], "596": [{"input": "words_string('ahmed    , gamal')", "output": "['ahmed', 'gamal']", "ops": "=="}, {"input": "words_string('ahmed    , gamal')", "output": "['ahmed', 'gamal']", "ops": "=="}, {"input": "words_string(\"\"\"One, two, three!\\n four, five!\\n six\\n a one, a four, no!\"\"\")", "output": "['One', 'two', 'three!', 'four', 'five!', 'six', 'a', 'one', 'a', 'four', 'no!']", "ops": "=="}, {"input": "words_string('ahmed    , gamal')", "output": "['ahmed', 'gamal']", "ops": "=="}, {"input": "words_string(u'Hi, \u067e\u06cc\u067a\u0646 \u0648\u0634\u06cc\u0641\u0627')", "output": "['Hi', '\u067e\u06cc\u067a\u0646', '\u0648\u0634\u06cc\u0641\u0627']", "ops": "=="}, {"input": "words_string('ahmed    , gamal')", "output": "['ahmed', 'gamal']", "ops": "=="}, {"input": "words_string('ahmed    , gamal')", "output": "['ahmed', 'gamal']", "ops": "=="}, {"input": "words_string('ahmed    , gamal')", "output": "['ahmed', 'gamal']", "ops": "=="}, {"input": "words_string('ahmed    , gamal')", "output": "['ahmed', 'gamal']", "ops": "=="}, {"input": "words_string(None)", "output": "[]", "ops": "=="}, {"input": "words_string('ahmed    , gamal')", "output": "['ahmed', 'gamal']", "ops": "=="}, {"input": "words_string('ahmed    , gamal')", "output": "['ahmed', 'gamal']", "ops": "=="}, {"input": "words_string('ahmed    , gamal')", "output": "['ahmed', 'gamal']", "ops": "=="}, {"input": "words_string(['h\u00e9', 'llo'])", "output": "['h\u00e9llo']", "ops": "=="}, {"input": "words_string('h\u00e9,h\u00e9,he,,hllo')", "output": "['h\u00e9', 'h\u00e9', 'he', 'hllo']", "ops": "=="}, {"input": "words_string('h\u00fcvely, hello')", "output": "['h\u00fcvely', 'hello']", "ops": "=="}, {"input": "words_string('\u00a1Xoo dawg, hello')", "output": "['\u00a1Xoo', 'dawg', 'hello']", "ops": "=="}, {"input": "words_string(u'oh\u00e9 ngozillas hoya! \u00a1Xoodar\u0131k hoya da gutan\u00e0 da\u011flanl\u0131g\u00ec!')", "output": "['oh\u00e9', 'ngozillas', 'hoya!', '\u00a1Xoodar\u0131k', 'hoya', 'da', 'gutan\u00e0', 'da\u011flanl\u0131g\u00ec!']", "ops": "=="}], "205": [{"input": "concatenate_elements(['A ', 'DET '])", "output": "('A DET ',)", "ops": "=="}, {"input": "concatenate_elements(('FAT ', 'FAMN ', 'IS ', 'BEST', 'FOR ', 'ALL ', 'PTS'))", "output": "('FAT FAMN ', 'FAMN IS ', 'IS BEST', 'BESTFOR ', 'FOR ALL ', 'ALL PTS')", "ops": "=="}, {"input": "concatenate_elements(('TECH, ', 'GAME', 'PARENT', 'DE', 'IS', 'WORK.', 'FINDING', '.'))", "output": "('TECH, GAME', 'GAMEPARENT', 'PARENTDE', 'DEIS', 'ISWORK.', 'WORK.FINDING', 'FINDING.')", "ops": "=="}, {"input": "concatenate_elements(('STOXWG', 'IS ', 'NES', 'R ', 'FOR ', 'GRAND ', 'UTG PDX ', 'WGT'))", "output": "('STOXWGIS ', 'IS NES', 'NESR ', 'R FOR ', 'FOR GRAND ', 'GRAND UTG PDX ', 'UTG PDX WGT')", "ops": "=="}, {"input": "concatenate_elements(('SKY', 'SR ', 'IS ', 'SAN ', 'SITM ', 'SC ', 'HG PU', 'ER ', 'BI'))", "output": "('SKYSR ', 'SR IS ', 'IS SAN ', 'SAN SITM ', 'SITM SC ', 'SC HG PU', 'HG PUER ', 'ER BI')", "ops": "=="}, {"input": "concatenate_elements(('MA ', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'AOS'))", "output": "('MA IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL AOS')", "ops": "=="}, {"input": "concatenate_elements(('RES ', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'AVER', 'REM'))", "output": "('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL AVER', 'AVERREM')", "ops": "=="}, {"input": "concatenate_elements([(1, 2), (3, 'foo')])", "output": "((1, 2, 3, 'foo'),)", "ops": "=="}, {"input": "concatenate_elements(('BILL', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'XLEX', 'YLEX', 'ZED', 'CLAS'))", "output": "('BILLIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL XLEX', 'XLEXYLEX', 'YLEXZED', 'ZEDCLAS')", "ops": "=="}, {"input": "concatenate_elements(('OIL', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'PTR'))", "output": "('OILIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL PTR')", "ops": "=="}, {"input": "concatenate_elements(('RES ', 'BEST', 'IS', 'ALL', 'SKD', 'MARG'))", "output": "('RES BEST', 'BESTIS', 'ISALL', 'ALLSKD', 'SKDMARG')", "ops": "=="}, {"input": "concatenate_elements(('MSAM', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'QEDL'))", "output": "('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QEDL')", "ops": "=="}], "437": [{"input": "count_bidirectional({})", "output": "'0'", "ops": "=="}, {"input": "count_bidirectional([])", "output": "'0'", "ops": "=="}, {"input": "count_bidirectional([1])", "output": "'0'", "ops": "=="}], "271": [{"input": "rear_extract([])", "output": "[]", "ops": "=="}, {"input": "rear_extract([])", "output": "[]", "ops": "=="}, {"input": "rear_extract([])", "output": "[]", "ops": "=="}, {"input": "rear_extract([])", "output": "[]", "ops": "=="}], "553": [{"input": "monotonic(range(4, -1, 1))", "output": "False", "ops": "=="}, {"input": "monotonic([1, 2, 3, 4, 1, 4, 0])", "output": "False", "ops": "=="}, {"input": "monotonic([1])", "output": "True", "ops": "=="}, {"input": "monotonic(['a'])", "output": "True", "ops": "=="}, {"input": "monotonic([1.2])", "output": "True", "ops": "=="}, {"input": "monotonic([0, 0])", "output": "True", "ops": "=="}, {"input": "monotonic([[0, 0, 0, 0]])", "output": "True", "ops": "=="}, {"input": "monotonic(())", "output": "False", "ops": "=="}, {"input": "monotonic(range(0, 500, 50))", "output": "False", "ops": "=="}, {"input": "monotonic(range(1, 6, 3)),", "output": "(False,)", "ops": "=="}, {"input": "monotonic([3, 2, 0, -1])", "output": "True", "ops": "=="}, {"input": "monotonic(range(1, 100, 7))", "output": "False", "ops": "=="}, {"input": "monotonic(range(1000))", "output": "False", "ops": "=="}], "90": [{"input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'white')", "output": "True", "ops": "=="}, {"input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'no')", "output": "False", "ops": "=="}, {"input": "find_substring([], 'ange')", "output": "False", "ops": "=="}, {"input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'apple')", "output": "False", "ops": "=="}, {"input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'ew')", "output": "False", "ops": "=="}, {"input": "find_substring(['red', 'black', 'white', 'green', 'orange'],'reds')", "output": "False", "ops": "=="}, {"input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'agne')", "output": "False", "ops": "=="}, {"input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'white')", "output": "True", "ops": "=="}, {"input": "find_substring([], 'apple') is None", "output": "False", "ops": "=="}, {"input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'gne')", "output": "False", "ops": "=="}, {"input": "find_substring(['red', 'black', 'white', 'green', 'orange'],'re')", "output": "True", "ops": "=="}], "623": [{"input": "prod_signs([0, 1, 2])", "output": "0", "ops": "=="}, {"input": "prod_signs([1, 0, -4, 0, 0, -1, -4])", "output": "0", "ops": "=="}, {"input": "prod_signs([-1, 0, -1, 0, 4, 0, 4])", "output": "0", "ops": "=="}, {"input": "prod_signs([30, 42, 30, 3])", "output": "105", "ops": "=="}, {"input": "prod_signs([30, 30, 4])", "output": "64", "ops": "=="}, {"input": "prod_signs([1])", "output": "1", "ops": "=="}, {"input": "prod_signs([-1, 2, 0, -3, 3, 5, -100, 10, -1, 100, -2, -3])", "output": "0", "ops": "=="}, {"input": "prod_signs([1] * 20)", "output": "20", "ops": "=="}, {"input": "prod_signs([0])", "output": "0", "ops": "=="}, {"input": "prod_signs([ 0, 3, -1])", "output": "0", "ops": "=="}], "296": [{"input": "flatten_list({\"A\": 13, \"B\": [\"a\", \"b\", \"c\", 4], \"C\": 'abc'})", "output": "['A', 'B', 'C']", "ops": "=="}, {"input": "flatten_list([0])", "output": "[0]", "ops": "=="}, {"input": "flatten_list((\"hello\", \"world\"))", "output": "['hello', 'world']", "ops": "=="}, {"input": "flatten_list([])", "output": "[]", "ops": "=="}, {"input": "flatten_list(())", "output": "[]", "ops": "=="}, {"input": "flatten_list([[1], [2], [3]])", "output": "[1, 2, 3]", "ops": "=="}, {"input": "flatten_list([0])", "output": "[0]", "ops": "=="}, {"input": "flatten_list(None)", "output": "[]", "ops": "=="}, {"input": "flatten_list({'red': 1, 'green': 2, 'blue': 3})", "output": "['red', 'green', 'blue']", "ops": "=="}, {"input": "flatten_list(zip([1] * 4, [2, 5] * 2))", "output": "[(1, 2), (1, 5), (1, 2), (1, 5)]", "ops": "=="}, {"input": "flatten_list(zip([1] * 12, range(3, 351)))", "output": "[(1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14)]", "ops": "=="}, {"input": "flatten_list([[1, 2, 3], [4, 5, 6]])", "output": "[1, 2, 3, 4, 5, 6]", "ops": "=="}, {"input": "flatten_list( ([1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]) )", "output": "[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]", "ops": "=="}, {"input": "print(flatten_list((1,[2,3],(4, 5, [6, 7 ]), (10, (11,(12,13, 14)), (16,(16,((23,25)))) ))   ))", "output": "None", "ops": "=="}], "566": [{"input": "triangle_area(1258, 702, 124)", "output": "-1", "ops": "=="}, {"input": "triangle_area(14, 16, 4)", "output": "25.75", "ops": "=="}, {"input": "triangle_area(4.5, 5, 7.3345)", "output": "11.05", "ops": "=="}, {"input": "triangle_area(20, 34, 55)", "output": "-1", "ops": "=="}, {"input": "triangle_area(42.1, 98.5, 18.0)", "output": "-1", "ops": "=="}, {"input": "triangle_area(12, 8, 14)", "output": "47.91", "ops": "=="}, {"input": "triangle_area(60, 60, 60)", "output": "1558.85", "ops": "=="}, {"input": "triangle_area(105, 4, 36)", "output": "-1", "ops": "=="}, {"input": "triangle_area(9, 24, 15)", "output": "-1", "ops": "=="}, {"input": "triangle_area(9, 2, 4)", "output": "-1", "ops": "=="}, {"input": "triangle_area(3.1, 9.2, 0.0)", "output": "-1", "ops": "=="}, {"input": "triangle_area(4.2, 6, 7)", "output": "12.55", "ops": "=="}, {"input": "triangle_area(120, 30, 5)", "output": "-1", "ops": "=="}, {"input": "triangle_area(1, 0, 0)", "output": "-1", "ops": "=="}, {"input": "triangle_area(2, 3, 8)", "output": "-1", "ops": "=="}, {"input": "triangle_area(15, 9, 6)", "output": "-1", "ops": "=="}], "36": [{"input": "sort_mixed_list([1,'red', 'green', 4, 2, 'green', 'blue', 3, 'white'])", "output": "[1, 2, 3, 4, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([19,'red', 12, 'green', 'blue', 10, 'white', 'green', 1])", "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([1,'red', 'green', 4, 2, 'green', 'blue', 3, 'white'])", "output": "[1, 2, 3, 4, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list(['a', 'e', 'f', 9, 1, 0, 0, 'b', 'Aa', 'Ff'])", "output": "[0, 0, 1, 9, 'Aa', 'Ff', 'a', 'b', 'e', 'f']", "ops": "=="}, {"input": "sort_mixed_list([19,'red', 12, 'green', 'blue', 10, 'white', 'green', 1])", "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list({'red': 2, 'green': 1, 'blue': 0, 'black': None, 'white': None, 'large' : [], 'code': [34], 'animal' : {'dog': 3, 'cat': 1, 'horse': 2}})", "output": "['animal', 'black', 'blue', 'code', 'green', 'large', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([19,'red', 12, 'green', 'blue', 10, 'white', 'green', 1])", "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([1,'red', 'green', 4, 2, 'green', 'blue', 3, 'white'])", "output": "[1, 2, 3, 4, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list(['red', 'green', 'orange', 'blue'])", "output": "['blue', 'green', 'orange', 'red']", "ops": "=="}, {"input": "sort_mixed_list([1,'red', 'green', 4, 2, 'green', 'blue', 3, 'white'])", "output": "[1, 2, 3, 4, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([19,'red', 12, 'green', 'blue', 10, 'white', 'green', 1])", "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list(['apple', 'pie', None, 'pum'])", "output": "['apple', 'pie', 'pum']", "ops": "=="}, {"input": "sort_mixed_list([1,'red', 'green', 4, 2, 'green', 'blue', 3, 'white'])", "output": "[1, 2, 3, 4, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([19,'red', 12, 'green', 'blue', 10, 'white', 'green', 1])", "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([1,'red', 'green', 4, 2, 'green', 'blue', 3, 'white'])", "output": "[1, 2, 3, 4, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([19,'red', 12, 'green', 'blue', 10, 'white', 'green', 1])", "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([1,'red', 'green', 4, 2, 'green', 'blue', 3, 'white'])", "output": "[1, 2, 3, 4, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([1,'red', 'green', 4, 2, 'green', 'blue', 3, 'white'])", "output": "[1, 2, 3, 4, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([19,'red', 12, 'green', 'blue', 10, 'white', 'green', 1])", "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([1,'red', 'green', 4, 2, 'green', 'blue', 3, 'white'])", "output": "[1, 2, 3, 4, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([19,'red', 12, 'green', 'blue', 10, 'white', 'green', 1])", "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([19,'red', 12, 'green', 'blue', 10, 'white', 'green', 1])", "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([\"hello\",'red', 1.2, 'hello', 1, 2])", "output": "[1, 2, 'hello', 'hello', 'red']", "ops": "=="}, {"input": "sort_mixed_list(['a', 'b', 'b', 'a', 'b', 'a', 'b'])", "output": "['a', 'a', 'a', 'b', 'b', 'b', 'b']", "ops": "=="}, {"input": "sort_mixed_list(['Aardvark', 'AnEye', 'APPLE'])", "output": "['APPLE', 'Aardvark', 'AnEye']", "ops": "=="}, {"input": "sort_mixed_list(['a', 'b', 'c', 1])", "output": "[1, 'a', 'b', 'c']", "ops": "=="}, {"input": "sort_mixed_list(['1', 2])", "output": "[2, '1']", "ops": "=="}, {"input": "sort_mixed_list(['1,2'])", "output": "['1,2']", "ops": "=="}, {"input": "sort_mixed_list([1,'red', 'green', 4, 2, 'green', 'blue', 3, 'white'])", "output": "[1, 2, 3, 4, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([19,'red', 12, 'green', 'blue', 10, 'white', 'green', 1])", "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}], "404": [{"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 'r')", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), '5')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 'r')", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), '5')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), (3, 4))", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 3)", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 3)", "output": "True", "ops": "=="}, {"input": "check_tuplex(('x', 3, 'r', 'e','s', 1, 'o', 'u', 'r', '5', 2, 'c', 4), -1)", "output": "False", "ops": "=="}, {"input": "check_tuplex(('a', 1), None)", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 3)", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), None)", "output": "False", "ops": "=="}, {"input": "check_tuplex((1, 2), -1)", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 'r')", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), ['a', 'b'])", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), '5')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 3)", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), '5')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 3)", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 'r')", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 'x')", "output": "False", "ops": "=="}, {"input": "check_tuplex((' ', 0), 'r')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 3)", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), '5')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 4.4)", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 'r')", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), '5')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 3)", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 7)", "output": "False", "ops": "=="}, {"input": "check_tuplex(('b', 4, 6), '4')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 'r')", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), '5')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 3)", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), (3, 2))", "output": "False", "ops": "=="}, {"input": "check_tuplex(('a', 4), 'b')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('test', '1'), 'hello')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('test', '1','more'), '2')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 'r')", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), '5')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 3)", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 3)", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 'r')", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), '5')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 3)", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 'werf')", "output": "False", "ops": "=="}, {"input": "check_tuplex('foo', '')", "output": "True", "ops": "=="}, {"input": "check_tuplex(('werf', '5', 't', 'i', 'r', 'e', 'x'),  'werf5x6etrix3rt')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 'r')", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), '5')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 3)", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), ('f','d','s','r','m', 'g'))", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e','s', 'o', 'u', 'r', 'c', 'e'), 'r')", "output": "True", "ops": "=="}], "49": [{"input": "min_length_list.foo = [0, 1]", "output": "[0, 1]", "ops": "=="}, {"input": "min_length_list({\"id\": 10, \"name\": \"myfirstname\", \"location\": \"home.dk\"})", "output": "(2, 'id')", "ops": "=="}], "649": [{"input": "cycpattern_check(\"\", 'wweeeew')", "output": "False", "ops": "=="}, {"input": "cycpattern_check('a', \"\")", "output": "True", "ops": "=="}, {"input": "cycpattern_check('A', \"\")", "output": "True", "ops": "=="}, {"input": "cycpattern_check('', '')", "output": "True", "ops": "=="}, {"input": "cycpattern_check('a', 'a')", "output": "True", "ops": "=="}, {"input": "cycpattern_check('\u2b50', '')", "output": "True", "ops": "=="}, {"input": "cycpattern_check(u'\u00f9', '')", "output": "True", "ops": "=="}, {"input": "cycpattern_check(u'\u0105\u0105\u0105a', 'aa')", "output": "False", "ops": "=="}, {"input": "cycpattern_check(u'efef', u'fee')", "output": "True", "ops": "=="}, {"input": "cycpattern_check(('test','this'),('eek','eeek'))", "output": "False", "ops": "=="}, {"input": "cycpattern_check(\" \", \"space\")", "output": "False", "ops": "=="}, {"input": "cycpattern_check([1, 2, 3, 0], (1, 2, 3, 0))", "output": "False", "ops": "=="}], "369": [{"input": "float_sort([('item1', '12.1'), ('item2', '11.10'), ('item3', '10.5')])", "output": "[('item1', '12.1'), ('item2', '11.10'), ('item3', '10.5')]", "ops": "=="}, {"input": "float_sort([('item2', '980'), ('item3', '11.2'), ('item4', '20.2')])", "output": "[('item2', '980'), ('item4', '20.2'), ('item3', '11.2')]", "ops": "=="}, {"input": "float_sort([('item1', '12.1'), ('item2', '12.5'), ('item3', '13.3'), ('item4', '11.14'), ('item5', '6.25')])", "output": "[('item3', '13.3'), ('item2', '12.5'), ('item1', '12.1'), ('item4', '11.14'), ('item5', '6.25')]", "ops": "=="}, {"input": "float_sort([('item4', \"13.14\"),('item1', '2.40'), ])", "output": "[('item4', '13.14'), ('item1', '2.40')]", "ops": "=="}, {"input": "float_sort([('item1', '12.5'), ('item2', '2.5'), ('item3', 8), ('item4', '18.9'), ('item5', '52.4'), ('item8', '54'), ('item9', '72.4'), ('item10', '74')])", "output": "[('item10', '74'), ('item9', '72.4'), ('item8', '54'), ('item5', '52.4'), ('item4', '18.9'), ('item1', '12.5'), ('item3', 8), ('item2', '2.5')]", "ops": "=="}, {"input": "float_sort([('item3', '5'), ('item1', '13'), ('item2', '11')])", "output": "[('item1', '13'), ('item2', '11'), ('item3', '5')]", "ops": "=="}, {"input": "float_sort([('item1', '9.2'), ('item2', '19.1'), ('item3', '15.5')])", "output": "[('item2', '19.1'), ('item3', '15.5'), ('item1', '9.2')]", "ops": "=="}, {"input": "float_sort([('item1', '20'), ('item2', '5'), ('item3', '2'), ('item5', '3')])", "output": "[('item1', '20'), ('item2', '5'), ('item5', '3'), ('item3', '2')]", "ops": "=="}, {"input": "float_sort([(3, '24.5')] )", "output": "[(3, '24.5')]", "ops": "=="}, {"input": "float_sort([(3, '24.5'), (1, 22.0)] )", "output": "[(3, '24.5'), (1, 22.0)]", "ops": "=="}], "586": [{"input": "is_bored('I love It!')", "output": "1", "ops": "=="}, {"input": "is_bored('I love It!')", "output": "1", "ops": "=="}, {"input": "is_bored('I know you are feeling good...')", "output": "1", "ops": "=="}, {"input": "is_bored('I think  I have a boss')", "output": "1", "ops": "=="}, {"input": "is_bored('I... am not. You must be. If you are... or I would be.') is None", "output": "False", "ops": "=="}, {"input": "is_bored('I love It!')", "output": "1", "ops": "=="}, {"input": "is_bored('I love It!')", "output": "1", "ops": "=="}, {"input": "is_bored('I love It!')", "output": "1", "ops": "=="}, {"input": "is_bored('I love It!')", "output": "1", "ops": "=="}, {"input": "is_bored('I love It!')", "output": "1", "ops": "=="}, {"input": "is_bored(\"\")", "output": "0", "ops": "=="}, {"input": "is_bored('I love It!')", "output": "1", "ops": "=="}, {"input": "is_bored(', not today')", "output": "0", "ops": "=="}, {"input": "is_bored('Totorom!')", "output": "0", "ops": "=="}, {"input": "is_bored('I love It!')", "output": "1", "ops": "=="}, {"input": "is_bored('I love It!')", "output": "1", "ops": "=="}], "195": [{"input": "remove_tuples([], 0)", "output": "[]", "ops": "=="}, {"input": "remove_tuples([], 2)", "output": "[]", "ops": "=="}, {"input": "sorted(remove_tuples([[((1, 1, 1), 1, 1),], [1,], [(10,), (1, 2)]], 1))", "output": "[[(10,), (1, 2)]]", "ops": "=="}, {"input": "sorted(remove_tuples([], []))", "output": "[]", "ops": "=="}, {"input": "remove_tuples([(4, 4), (7, 8), (8, 9, 5), (1,), (7, 5, 1, 3), (3,), (8, 9, 5), (5, 9, 8)], 8)", "output": "[(4, 4), (7, 8), (8, 9, 5), (1,), (7, 5, 1, 3), (3,), (8, 9, 5), (5, 9, 8)]", "ops": "=="}, {"input": "remove_tuples([(1, 2, 3, 5)], 3)", "output": "[(1, 2, 3, 5)]", "ops": "=="}, {"input": "remove_tuples([[4, 5, (2, 6)], [2, 4, (3, 5)], [6, 7, 3], [7, 3, 9]], 5)", "output": "[[4, 5, (2, 6)], [2, 4, (3, 5)], [6, 7, 3], [7, 3, 9]]", "ops": "=="}, {"input": "remove_tuples([(1, 3), (2, 7), (8, 7), (3, 4, 5, 3, 4, 5, 3)], 6)", "output": "[(1, 3), (2, 7), (8, 7), (3, 4, 5, 3, 4, 5, 3)]", "ops": "=="}, {"input": "remove_tuples('', [])", "output": "[]", "ops": "=="}, {"input": "remove_tuples([], 5)", "output": "[]", "ops": "=="}, {"input": "remove_tuples([(1,), (4, 5, 6), (7,)], 6)", "output": "[(1,), (4, 5, 6), (7,)]", "ops": "=="}, {"input": "remove_tuples([], None)", "output": "[]", "ops": "=="}, {"input": "remove_tuples([], 4)", "output": "[]", "ops": "=="}, {"input": "remove_tuples([], 7)", "output": "[]", "ops": "=="}], "499": [{"input": "concatenate_elements([\"It's mine, It's yours\" ])", "output": "\"  It's mine, It's yours\"", "ops": "=="}, {"input": "concatenate_elements(['Eat', 'this', 'dog', 'run', 'with', 'friends', 'and', 'whoresay', 'they', 'are', 'friends'])", "output": "'  Eat this dog run with friends and whoresay they are friends'", "ops": "=="}, {"input": "concatenate_elements(['Here', '.', 'Sir.', 'I', 'have', '.', 'Doyou.','How', 'come', 'out?!', '.','Is', 'he', 'you', '?'])", "output": "'  Here . Sir. I have . Doyou. How come out?! . Is he you ?'", "ops": "=="}, {"input": "concatenate_elements([])", "output": "' '", "ops": "=="}, {"input": "concatenate_elements(['the', 'answer', 'was', 'great'])", "output": "'  the answer was great'", "ops": "=="}, {"input": "concatenate_elements(['a', 'b', 'c', 'd', 'e'])", "output": "'  a b c d e'", "ops": "=="}, {"input": "concatenate_elements(['To', 'Preter', 'good', 'greg'])", "output": "'  To Preter good greg'", "ops": "=="}, {"input": "concatenate_elements(['Hi', 'how','are', 'you', 'today' ])", "output": "'  Hi how are you today'", "ops": "=="}, {"input": "concatenate_elements(['By', 'the', 'riddle', 'Bullet'])", "output": "'  By the riddle Bullet'", "ops": "=="}, {"input": "concatenate_elements(['a', 'be','see','see', 'and', 'come', \"then\", 'go'])", "output": "'  a be see see and come then go'", "ops": "=="}], "503": [{"input": "below_zero([1])", "output": "False", "ops": "=="}, {"input": "below_zero([1, 0])", "output": "False", "ops": "=="}, {"input": "below_zero(range(0,8))", "output": "False", "ops": "=="}, {"input": "below_zero([1])", "output": "False", "ops": "=="}, {"input": "below_zero((1, 2, 3))", "output": "False", "ops": "=="}, {"input": "below_zero([0])", "output": "False", "ops": "=="}, {"input": "below_zero([0])", "output": "False", "ops": "=="}, {"input": "below_zero([0])", "output": "False", "ops": "=="}, {"input": "below_zero([-0])", "output": "False", "ops": "=="}, {"input": "below_zero([1])", "output": "False", "ops": "=="}, {"input": "below_zero([1, 2, -2, 3, 0])", "output": "False", "ops": "=="}, {"input": "below_zero([ 0])", "output": "False", "ops": "=="}, {"input": "below_zero([1])", "output": "False", "ops": "=="}, {"input": "below_zero([1]*10000)", "output": "False", "ops": "=="}, {"input": "below_zero([0, 1, 3])", "output": "False", "ops": "=="}, {"input": "below_zero([1, -1, 2, -2, 5, -5, 4, 5])", "output": "False", "ops": "=="}], "48": [{"input": "specified_element([], 6)", "output": "[]", "ops": "=="}, {"input": "specified_element([], 0.0)", "output": "[]", "ops": "=="}, {"input": "specified_element([], 0.1)", "output": "[]", "ops": "=="}, {"input": "specified_element([\"ABCDE\"], 1)", "output": "['B']", "ops": "=="}, {"input": "specified_element([], 0)", "output": "[]", "ops": "=="}, {"input": "specified_element([], 1.5)", "output": "[]", "ops": "=="}], "96": [{"input": "frequency_lists([[20, 31, 40, 41], [15, 16, 29, 42], [13, 14, 29, 29], [13, 15, 21, 28]])", "output": "{20: 1, 31: 1, 40: 1, 41: 1, 15: 2, 16: 1, 29: 3, 42: 1, 13: 2, 14: 1, 21: 1, 28: 1}", "ops": "=="}, {"input": "frequency_lists([[100, 105, 112, 961], [100, 101, 100, 108], [961, 911, 923, 931]])", "output": "{100: 3, 105: 1, 112: 1, 961: 2, 101: 1, 108: 1, 911: 1, 923: 1, 931: 1}", "ops": "=="}, {"input": "frequency_lists([[1, 1, 1, 1, 20, 205, 1993, 1983, 1971], [1, 1, 1, 1, 102, 2, 103, 5, 104,7, 105], [1, 1, 1, 1, 922, 3, 924, 3, 935], [2, 25, 50, 963, 3, 963, 106, 963, 99, 964]])", "output": "{1: 12, 20: 1, 205: 1, 1993: 1, 1983: 1, 1971: 1, 102: 1, 2: 2, 103: 1, 5: 1, 104: 1, 7: 1, 105: 1, 922: 1, 3: 3, 924: 1, 935: 1, 25: 1, 50: 1, 963: 3, 106: 1, 99: 1, 964: 1}", "ops": "=="}, {"input": "frequency_lists([[20, 50, 18, 50, 20], [12, 11, 16, 11, 17], [16, 15, 12, 11, 18], [40, 40, 24, 30, 19]])", "output": "{20: 2, 50: 2, 18: 2, 12: 2, 11: 3, 16: 2, 17: 1, 15: 1, 40: 2, 24: 1, 30: 1, 19: 1}", "ops": "=="}, {"input": "frequency_lists([[-1, 3, 5, 2, -1], [-1, -3, 4, 3, 3]])", "output": "{-1: 3, 3: 3, 5: 1, 2: 1, -3: 1, 4: 1}", "ops": "=="}, {"input": "frequency_lists([[5, 2, 3], range(6, 12), range(4, 14)])", "output": "{5: 2, 2: 1, 3: 1, 6: 2, 7: 2, 8: 2, 9: 2, 10: 2, 11: 2, 4: 1, 12: 1, 13: 1}", "ops": "=="}, {"input": "frequency_lists(['the', 'quick','red', 'fox', 'jumps', 'and'])", "output": "{'t': 1, 'h': 1, 'e': 2, 'q': 1, 'u': 2, 'i': 1, 'c': 1, 'k': 1, 'r': 1, 'd': 2, 'f': 1, 'o': 1, 'x': 1, 'j': 1, 'm': 1, 'p': 1, 's': 1, 'a': 1, 'n': 1}", "ops": "=="}, {"input": "frequency_lists([[2, 3, 1, 2], [3], [10, 6, 7]])", "output": "{2: 2, 3: 2, 1: 1, 10: 1, 6: 1, 7: 1}", "ops": "=="}], "153": [{"input": "specified_element([], 9)", "output": "[]", "ops": "=="}, {"input": "specified_element([], 0)", "output": "[]", "ops": "=="}, {"input": "specified_element([], -10)", "output": "[]", "ops": "=="}, {"input": "specified_element([], -1)", "output": "[]", "ops": "=="}, {"input": "specified_element([], 0)", "output": "[]", "ops": "=="}], "620": [{"input": "split_words('Hello,Hello,world!')", "output": "['Hello', 'Hello', 'world!']", "ops": "=="}, {"input": "split_words([])", "output": "0", "ops": "=="}, {"input": "split_words('Hello,Hello,world!')", "output": "['Hello', 'Hello', 'world!']", "ops": "=="}, {"input": "split_words('Hello,Hello,world!')", "output": "['Hello', 'Hello', 'world!']", "ops": "=="}, {"input": "split_words('Hello,Hello,world!')", "output": "['Hello', 'Hello', 'world!']", "ops": "=="}, {"input": "split_words([])", "output": "0", "ops": "=="}, {"input": "split_words('Hello,Hello,world!')", "output": "['Hello', 'Hello', 'world!']", "ops": "=="}, {"input": "split_words('Hello,Hello,world!')", "output": "['Hello', 'Hello', 'world!']", "ops": "=="}, {"input": "split_words('Hello,Hello,world!')", "output": "['Hello', 'Hello', 'world!']", "ops": "=="}, {"input": "split_words([])", "output": "0", "ops": "=="}, {"input": "split_words('Hello,Hello,world!')", "output": "['Hello', 'Hello', 'world!']", "ops": "=="}, {"input": "split_words('Hello,Hello,world!')", "output": "['Hello', 'Hello', 'world!']", "ops": "=="}, {"input": "split_words('  A B C ')", "output": "['A', 'B', 'C']", "ops": "=="}, {"input": "split_words('Hello,Hello,world!')", "output": "['Hello', 'Hello', 'world!']", "ops": "=="}, {"input": "split_words([])", "output": "0", "ops": "=="}, {"input": "split_words('111 22222 33333')", "output": "['111', '22222', '33333']", "ops": "=="}, {"input": "split_words('aaa0aaa0aab')", "output": "1", "ops": "=="}], "93": [{"input": "'\\nIndex Minimal = %s' % index_minimum", "output": "'\\nIndex Minimal = <function index_minimum at 0x1535a7ebc040>'", "ops": "=="}], "242": [{"input": "sort_on_occurence(set([(1, 2), (2, 3)]))", "output": "[(2, 3, 1), (1, 2, 1)]", "ops": "=="}, {"input": "sort_on_occurence([(1, \"caramba\"), (2, 'carambole'), (6, 'caramelotta')])", "output": "[(1, 'caramba', 1), (2, 'carambole', 1), (6, 'caramelotta', 1)]", "ops": "=="}, {"input": "sort_on_occurence([])", "output": "[]", "ops": "=="}], "392": [{"input": "max_length_list({\"A\": 2, \"B\": [6, 4], \"C\" : [2, 2]})", "output": "(1, 'A')", "ops": "=="}, {"input": "max_length_list({'abcde': 2, 'fgh': 1})", "output": "(5, 'abcde')", "ops": "=="}], "520": [{"input": "rescale_to_unit([1, 2])", "output": "[0.0, 1.0]", "ops": "=="}, {"input": "rescale_to_unit([1, 2, 5, 3, 4])", "output": "[0.0, 0.25, 1.0, 0.5, 0.75]", "ops": "=="}], "633": [{"input": "is_equal_to_sum_even(17)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(18)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(0)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(9)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(2)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(15)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(15)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(22)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(18)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(18)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(26)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(23)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(56)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(21)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(18)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(24)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(19)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(22)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(25)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(31)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(17)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(-4)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(46)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(144)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(77)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(17)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(30)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(28)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(17)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(151)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(17)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(-1)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(18)", "output": "True", "ops": "=="}], "585": [{"input": "next_smallest(range(8))", "output": "1", "ops": "=="}, {"input": "next_smallest(range(1, 4))", "output": "2", "ops": "=="}, {"input": "next_smallest([1, 2])", "output": "2", "ops": "=="}, {"input": "next_smallest([1, 4])", "output": "4", "ops": "=="}, {"input": "next_smallest(('H', 'S', 'T'))", "output": "'S'", "ops": "=="}, {"input": "next_smallest((6, 3) or None)", "output": "6", "ops": "=="}, {"input": "next_smallest(\"\")", "output": "None", "ops": "=="}, {"input": "next_smallest(set([5, 6 ** 3]))", "output": "216", "ops": "=="}, {"input": "next_smallest(tuple([3, 3]) or None)", "output": "None", "ops": "=="}, {"input": "next_smallest([1000000000, 99999999999, 2])", "output": "1000000000", "ops": "=="}], "305": [{"input": "max_sum_increasing_subseq(range(11), 11, 0, 8)", "output": "8", "ops": "=="}], "313": [{"input": "max_sum_rectangular_grid([[3, 43, 42, 2, 1], [12, 9, 2, 1, 1]], 2)", "output": "43", "ops": "=="}, {"input": "max_sum_rectangular_grid([[15, 20, 25, 35, 61, 92], [67, 94, 109, 123, 168]], 5)", "output": "344", "ops": "=="}, {"input": "max_sum_rectangular_grid([[1, 2, 3], [1, 0, 3], [1], [1, 1]], 2)", "output": "2", "ops": "=="}], "169": [{"input": "sum_range_list(list(range(1, 21)), 1, 10)", "output": "65", "ops": "=="}, {"input": "sum_range_list('a', 5, 0)", "output": "0", "ops": "=="}, {"input": "sum_range_list([1] * 100, 107, 101)", "output": "0", "ops": "=="}, {"input": "sum_range_list([1], 0, 0)", "output": "1", "ops": "=="}], "248": [{"input": "intersection_array([], [1, 2, 3, 4])", "output": "[]", "ops": "=="}, {"input": "intersection_array(['one', 'two', 'three', 'four', 'five','six','seven'], ['two','six','seven', 'four'])", "output": "['two', 'six', 'seven', 'four']", "ops": "=="}, {"input": "intersection_array([], [])", "output": "[]", "ops": "=="}, {"input": "intersection_array(['a', 'b', 'c'], ['abc', 'zx'])", "output": "[]", "ops": "=="}, {"input": "intersection_array([\"apple\", \"bread\", \"rat\"], [b\"a\", r\"rat\", b\"apple\"])", "output": "['rat']", "ops": "=="}], "581": [{"input": "anti_shuffle(\"\")", "output": "''", "ops": "=="}, {"input": "[x for x in anti_shuffle(anti_shuffle('')+'a')+str(range(3))]", "output": "['a', 'r', 'a', 'n', 'g', 'e', '(', '0', ',', ' ', '3', ')']", "ops": "=="}, {"input": "anti_shuffle(\"\"\"How I wonder you man.........!!....!!.......!! I am the new Master of Prayer to our Honour and Fate Deed in Prague and it is my life I have bete.........!!................!!!\"\"\")", "output": "'How I denorw ouy !!!!!!....................amn I am eht enw Maerst fo Paerry ot oru Hnooru adn Faet Ddee in Paegru adn it is my efil I aehv !!!!!.........................beet'", "ops": "=="}], "474": [{"input": "sort_counter = {'John' : 35, 'Jane': 65, 'Joanna': 32.5}", "output": "{'John': 35, 'Jane': 65, 'Joanna': 32.5}", "ops": "=="}], "501": [{"input": "separate_paren_groups(('())(())))(()'))", "output": "['()', ')(()']", "ops": "=="}, {"input": "separate_paren_groups(')()()(((())()))((((())))))')", "output": "[')()()(((())())', ')((((())))']", "ops": "=="}, {"input": "separate_paren_groups(')()()()() ()')", "output": "[]", "ops": "=="}, {"input": "separate_paren_groups(r'\"\\<foo\\>\"')", "output": "[]", "ops": "=="}, {"input": "separate_paren_groups(', ((( 1)))2')", "output": "['((()))']", "ops": "=="}, {"input": "separate_paren_groups('())( )')", "output": "['()']", "ops": "=="}], "602": [{"input": "even_odd_palindrome(99)", "output": "(8, 10)", "ops": "=="}, {"input": "even_odd_palindrome(40)", "output": "(5, 7)", "ops": "=="}, {"input": "even_odd_palindrome(0)", "output": "(0, 0)", "ops": "=="}, {"input": "even_odd_palindrome(200)", "output": "(8, 20)", "ops": "=="}, {"input": "even_odd_palindrome(10)", "output": "(4, 5)", "ops": "=="}, {"input": "even_odd_palindrome(60)", "output": "(6, 8)", "ops": "=="}, {"input": "even_odd_palindrome(8)", "output": "(4, 4)", "ops": "=="}, {"input": "even_odd_palindrome(527)", "output": "(28, 33)", "ops": "=="}, {"input": "even_odd_palindrome(44)", "output": "(6, 7)", "ops": "=="}, {"input": "even_odd_palindrome(6)", "output": "(3, 3)", "ops": "=="}, {"input": "even_odd_palindrome(2)", "output": "(1, 1)", "ops": "=="}, {"input": "print(even_odd_palindrome.__doc__)", "output": "None", "ops": "=="}, {"input": "even_odd_palindrome(529)", "output": "(28, 33)", "ops": "=="}, {"input": "even_odd_palindrome(282)", "output": "(17, 20)", "ops": "=="}, {"input": "even_odd_palindrome(47)", "output": "(6, 7)", "ops": "=="}, {"input": "even_odd_palindrome(671)", "output": "(35, 40)", "ops": "=="}, {"input": "even_odd_palindrome(-1)", "output": "(0, 0)", "ops": "=="}, {"input": "even_odd_palindrome(0)", "output": "(0, 0)", "ops": "=="}, {"input": "even_odd_palindrome(23)", "output": "(5, 6)", "ops": "=="}, {"input": "even_odd_palindrome(24)", "output": "(5, 6)", "ops": "=="}, {"input": "even_odd_palindrome(23)", "output": "(5, 6)", "ops": "=="}, {"input": "even_odd_palindrome(777)", "output": "(38, 48)", "ops": "=="}, {"input": "even_odd_palindrome(10)", "output": "(4, 5)", "ops": "=="}, {"input": "even_odd_palindrome(132638)", "output": "(488, 643)", "ops": "=="}], "645": [{"input": "x_or_y(4, 20, 80)", "output": "80", "ops": "=="}, {"input": "x_or_y(-8, 12, 2)", "output": "12", "ops": "=="}, {"input": "x_or_y(2, 1, 0)", "output": "1", "ops": "=="}, {"input": "x_or_y(2, 1, 1)", "output": "1", "ops": "=="}, {"input": "x_or_y(3, -2, 0)", "output": "-2", "ops": "=="}, {"input": "x_or_y(2, 3, 0)", "output": "3", "ops": "=="}, {"input": "x_or_y(3, 4, 0)", "output": "4", "ops": "=="}, {"input": "x_or_y(9, 8, -1)", "output": "-1", "ops": "=="}, {"input": "x_or_y(23, 33, -124)", "output": "33", "ops": "=="}, {"input": "x_or_y(123, 46, 324)", "output": "324", "ops": "=="}, {"input": "x_or_y(2, 4, 4)", "output": "4", "ops": "=="}, {"input": "x_or_y(10, 9, 12)", "output": "12", "ops": "=="}, {"input": "x_or_y(3, 4, 12)", "output": "4", "ops": "=="}, {"input": "x_or_y(1255, 92, 56)", "output": "56", "ops": "=="}, {"input": "x_or_y(1, 1, 12)", "output": "12", "ops": "=="}, {"input": "x_or_y(2, 3, 2)", "output": "3", "ops": "=="}, {"input": "x_or_y(42, 7, 3414)", "output": "3414", "ops": "=="}, {"input": "x_or_y(-129, 1, -1)", "output": "1", "ops": "=="}, {"input": "x_or_y(4, 53, 5432)", "output": "5432", "ops": "=="}, {"input": "x_or_y(5, 49, 7)", "output": "49", "ops": "=="}, {"input": "x_or_y(33, 12, 9)", "output": "9", "ops": "=="}, {"input": "x_or_y(5, 3, 0)", "output": "3", "ops": "=="}, {"input": "x_or_y(42, 14, 574)", "output": "574", "ops": "=="}, {"input": "x_or_y(435, 1, 523)", "output": "523", "ops": "=="}, {"input": "x_or_y(341, 1, 42)", "output": "42", "ops": "=="}, {"input": "x_or_y(2, 1, 5)", "output": "1", "ops": "=="}, {"input": "x_or_y(5, 55, 104)", "output": "55", "ops": "=="}, {"input": "x_or_y(42, 0, 341)", "output": "341", "ops": "=="}, {"input": "x_or_y(4, 33, 34)", "output": "34", "ops": "=="}, {"input": "x_or_y(42, 0, 444512)", "output": "444512", "ops": "=="}, {"input": "x_or_y(5, 44, 72)", "output": "44", "ops": "=="}], "160": [{"input": "remove_elements({'A': 1, 'B': 2}, 'C')", "output": "['A', 'B']", "ops": "=="}, {"input": "remove_elements(['a', 'b', 'c'], {'d': ''})", "output": "['a', 'b', 'c']", "ops": "=="}, {"input": "remove_elements([0, 1, 3, 2, 4], [3, 5])", "output": "[0, 1, 2, 4]", "ops": "=="}, {"input": "remove_elements([6, 7, 8]        , [1])", "output": "[6, 7, 8]", "ops": "=="}, {"input": "remove_elements(['a', 'b', 'c'], 'b')", "output": "['a', 'c']", "ops": "=="}, {"input": "remove_elements([1, 3, 5, 7, 9], [7, 5])", "output": "[1, 3, 9]", "ops": "=="}, {"input": "remove_elements(list('bcdefgef'), 'e')", "output": "['b', 'c', 'd', 'f', 'g', 'f']", "ops": "=="}, {"input": "remove_elements([1, 8]        , [1, 6])", "output": "[8]", "ops": "=="}], "172": [{"input": "remove_splchar(   'python(_&^%$*program123 \"some long word\" /t*w&*(()_( w$**_()^%     ')", "output": "'pythonprogram123somelongwordtww'", "ops": "=="}, {"input": "remove_splchar(\" \")", "output": "''", "ops": "=="}, {"input": "remove_splchar('')", "output": "''", "ops": "=="}, {"input": "remove_splchar(  '     ^%&^()')", "output": "''", "ops": "=="}, {"input": "remove_splchar(u'    python \\'\\\\u0021\\'  \\\\u0446\\\\u0438 \\\\u043A (*()()(()* \\'')", "output": "'pythonu0021u0446u0438u043A'", "ops": "=="}, {"input": "remove_splchar(u'python \\'\\'\\\\u0020\\\\u0026\\'\\'(\\')(&*\\((***)\\'')", "output": "'pythonu0020u0026'", "ops": "=="}, {"input": "remove_splchar(\"\"\"python %^*(&)($%%$&*( programming^&%^(*_^$(*_)language()\"\"\")", "output": "'pythonprogramminglanguage'", "ops": "=="}], "262": [{"input": "merge_dict({'a': 100, 'b': 200}, {})", "output": "{'a': 100, 'b': 200}", "ops": "=="}, {"input": "merge_dict({'a': None, 'b': 10}, {'z': 30, 'p': 10})", "output": "{'a': None, 'b': 10, 'z': 30, 'p': 10}", "ops": "=="}, {"input": "merge_dict({'abc': 'xyz'}, {'abc': 'abc'})", "output": "{'abc': 'abc'}", "ops": "=="}, {"input": "merge_dict({'a': 30}, {'b': 30}, )", "output": "{'a': 30, 'b': 30}", "ops": "=="}, {"input": "merge_dict({'foo': 'bar', 'fred':2}, {'foo2':'zaburonian cat', 'water':'bunny'})", "output": "{'foo': 'bar', 'fred': 2, 'foo2': 'zaburonian cat', 'water': 'bunny'}", "ops": "=="}, {"input": "merge_dict({'a': 1}, {'b': 2})", "output": "{'a': 1, 'b': 2}", "ops": "=="}, {"input": "merge_dict(dict(a=30, b=20, c=30), dict(a=30, b=40, c=40))", "output": "{'a': 30, 'b': 40, 'c': 40}", "ops": "=="}], "461": [{"input": "combinations_list([])", "output": "[[]]", "ops": "=="}, {"input": "combinations_list([])", "output": "[[]]", "ops": "=="}, {"input": "combinations_list([])", "output": "[[]]", "ops": "=="}], "584": [{"input": "encrypt(\"\")", "output": "''", "ops": "=="}, {"input": "encrypt.__module__", "output": "'src.data.npv_dataset_creation'", "ops": "=="}, {"input": "encrypt('\u00ca\u00f8\u00e1\u00e5\u00e4\u00e7\u00f6\u00ed\u00e4')", "output": "'\u00ca\u00f8\u00e1\u00e5\u00e4\u00e7\u00f6\u00ed\u00e4'", "ops": "=="}, {"input": "encrypt(u'\u00e5r\u00fe\u0153\u00ad\u00ed\u00f6\u0179\u00fa')", "output": "'\u00e5v\u00fe\u0153\\xad\u00ed\u00f6\u0179\u00fa'", "ops": "=="}, {"input": "encrypt(chr(ord('a') + 2))", "output": "'g'", "ops": "=="}, {"input": "encrypt(chr(ord('a') + 1))", "output": "'f'", "ops": "=="}, {"input": "encrypt(['e','r','n','d','i','l','l','m','i'])", "output": "'ivrhmppqm'", "ops": "=="}, {"input": "encrypt(['a'])", "output": "'e'", "ops": "=="}, {"input": "encrypt('hello hello hi!!\\n bye good sir \u00df \u00f1')", "output": "'lipps lipps lm!!\\n fci kssh wmv \u00df \u00f1'", "ops": "=="}, {"input": "encrypt(\"i'm a fishfish! i'm fish! don't touch me, it's just a fish!\")", "output": "\"m'q e jmwljmwl! m'q jmwl! hsr'x xsygl qi, mx'w nywx e jmwl!\"", "ops": "=="}], "587": [{"input": "any_int(3.8, 6.3, 6.9876)", "output": "False", "ops": "=="}, {"input": "any_int(3, 2.1, 7.5)", "output": "False", "ops": "=="}, {"input": "any_int(3.0, 4, 6.5)", "output": "False", "ops": "=="}, {"input": "any_int(-1, 0, -4)", "output": "False", "ops": "=="}, {"input": "any_int(1.1, 4, 3)", "output": "False", "ops": "=="}, {"input": "any_int(-3, 3.999, 3)", "output": "False", "ops": "=="}, {"input": "any_int(3.5, 0, 3)", "output": "False", "ops": "=="}, {"input": "any_int(3, 4, -1)", "output": "True", "ops": "=="}, {"input": "any_int(3.7, 7, 3)", "output": "False", "ops": "=="}, {"input": "any_int(0, 4, 12)", "output": "False", "ops": "=="}, {"input": "any_int(3.75, 1, 3)", "output": "False", "ops": "=="}, {"input": "any_int(4, 5, 7)", "output": "False", "ops": "=="}, {"input": "any_int(8, 3.2, 7.0)", "output": "False", "ops": "=="}, {"input": "any_int(3, -6, 4)", "output": "False", "ops": "=="}], "73": [{"input": "is_samepatterns(['red', 'green'], ['a', 'r', 'g'])", "output": "False", "ops": "=="}, {"input": "is_samepatterns(['red'], [])", "output": "False", "ops": "=="}, {"input": "is_samepatterns(['a', 'b'], [\"a\"])", "output": "False", "ops": "=="}, {"input": "is_samepatterns(['red','red','red'], ['a', 'b', 'b'])", "output": "False", "ops": "=="}, {"input": "is_samepatterns(['red', 'green', 'greenn'], ['a'])", "output": "False", "ops": "=="}, {"input": "is_samepatterns(['red', 'green', 'greenn','red', 'green'], ['a', 'b'])", "output": "False", "ops": "=="}, {"input": "is_samepatterns(['red', 'greent', 'green'], ['a', 'b'])", "output": "False", "ops": "=="}, {"input": "is_samepatterns(['red', 'green', 'greenn','redn'], ['a', 'b', 'c'])", "output": "False", "ops": "=="}], "583": [{"input": "sort_array([1])", "output": "[1]", "ops": "=="}, {"input": "sort_array([9, 2, 1])", "output": "[9, 2, 1]", "ops": "=="}, {"input": "sort_array([1, 2, 2, 3, 4, 4])", "output": "[1, 2, 2, 3, 4, 4]", "ops": "=="}, {"input": "sort_array(\"\")", "output": "[]", "ops": "=="}, {"input": "sort_array([2, 3, 1, 15])", "output": "[1, 2, 3, 15]", "ops": "=="}, {"input": "sort_array([0])", "output": "[0]", "ops": "=="}], "279": [{"input": "sequential_search(range(20), 25)", "output": "(False, 20)", "ops": "=="}, {"input": "sequential_search(range(100), 10)", "output": "(True, 10)", "ops": "=="}, {"input": "sequential_search([1, 2], 17)", "output": "(False, 2)", "ops": "=="}, {"input": "sequential_search([], 42)", "output": "(False, 0)", "ops": "=="}, {"input": "sequential_search([11, 14, 35, 28, 55, 68], 10)", "output": "(False, 6)", "ops": "=="}, {"input": "sequential_search([], 11)", "output": "(False, 0)", "ops": "=="}, {"input": "sequential_search(range(100, 200), 10)", "output": "(False, 100)", "ops": "=="}, {"input": "sequential_search(list(range(1001)), 123)", "output": "(True, 123)", "ops": "=="}], "530": [{"input": "is_prime(7 * 13 * 23)", "output": "False", "ops": "=="}, {"input": "is_prime(13 + 31)", "output": "False", "ops": "=="}, {"input": "is_prime(59762)", "output": "False", "ops": "=="}, {"input": "lt = 5 + 3 * is_prime(6) - 1", "output": "4", "ops": "=="}, {"input": "is_prime(2 * 11)", "output": "False", "ops": "=="}, {"input": "is_prime(13546)", "output": "False", "ops": "=="}, {"input": "is_prime(500003)", "output": "False", "ops": "=="}, {"input": "is_prime(13 * 731)", "output": "False", "ops": "=="}, {"input": "is_prime(3 * 11 * 19)", "output": "False", "ops": "=="}, {"input": "is_prime(12340)", "output": "False", "ops": "=="}, {"input": "is_prime(546)", "output": "False", "ops": "=="}, {"input": "is_prime(1927072)", "output": "False", "ops": "=="}, {"input": "is_prime(-7)", "output": "False", "ops": "=="}, {"input": "is_prime(7213)", "output": "True", "ops": "=="}, {"input": "is_prime(6 * 19)", "output": "False", "ops": "=="}, {"input": "is_prime(2)", "output": "True", "ops": "=="}], "307": [{"input": "large_product([1] * 10, [100, 1, 2, 3, 6, 10], 100)", "output": "[100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]", "ops": "=="}, {"input": "large_product([1], [3, 6, 8, 9, 10, 6], 1)", "output": "[10]", "ops": "=="}, {"input": "large_product([1], [3], 1)", "output": "[3]", "ops": "=="}], "332": [{"input": "Sort([['rishi', 30], ['akhil', 5], ['ramya', 22], ['gaur', 8]])", "output": "[['akhil', 5], ['gaur', 8], ['ramya', 22], ['rishi', 30]]", "ops": "=="}, {"input": "Sort([['rohanpalpalli', 10], ['aurangwadi', 5], ['kamoha', 20], ['naradasa', 15]])", "output": "[['aurangwadi', 5], ['rohanpalpalli', 10], ['naradasa', 15], ['kamoha', 20]]", "ops": "=="}, {"input": "Sort(['Aardvark', 'Amelie', 'Blackpanther', 'Dinosaur'])", "output": "['Aardvark', 'Dinosaur', 'Blackpanther', 'Amelie']", "ops": "=="}, {"input": "Sort([[1.25, 3], [1.5, 7], ['hari', 10], ['deshpandeya', 11]])", "output": "[[1.25, 3], [1.5, 7], ['hari', 10], ['deshpandeya', 11]]", "ops": "=="}, {"input": "Sort([['anusha', 10], ['raziya', 5], ['gaur', 5], ['mahesh', 20]])", "output": "[['raziya', 5], ['gaur', 5], ['anusha', 10], ['mahesh', 20]]", "ops": "=="}, {"input": "list(Sort([['a', '10'],['a', '20'],['b', '60'],['c', '50'],['a', '70'],['gadwiz', '60'],['gaurd', '1']]))", "output": "[['gaurd', '1'], ['a', '10'], ['a', '20'], ['c', '50'], ['b', '60'], ['gadwiz', '60'], ['a', '70']]", "ops": "=="}, {"input": "Sort([['ra', 10], ['sah', 5], ['rani', 20], ['raju', 15]])", "output": "[['sah', 5], ['ra', 10], ['raju', 15], ['rani', 20]]", "ops": "=="}], "439": [{"input": "find_adverb_position(\" there is never enough waltz!\")", "output": "None", "ops": "=="}, {"input": "find_adverb_position('this song is like my dreams')", "output": "None", "ops": "=="}, {"input": "find_adverb_position('what a game!!!?? is this???????? you crazious?')", "output": "None", "ops": "=="}], "441": [{"input": "positive_count([0, 1, 2, 1, 0, 1, 1, 1, 0])", "output": "0.67", "ops": "=="}, {"input": "positive_count([0, -1, 3, 4, -5, -6, 4, -5])", "output": "0.38", "ops": "=="}, {"input": "positive_count([-90, 0, 9, 0, 10, 0, 1, 6, 3, 4, 12])", "output": "0.64", "ops": "=="}, {"input": "positive_count([5, -5, 0, 5])", "output": "0.5", "ops": "=="}, {"input": "positive_count([-3, 5, 1, -1, -2, 2])", "output": "0.5", "ops": "=="}, {"input": "positive_count([8, 9])", "output": "1.0", "ops": "=="}, {"input": "positive_count([0, 0, -1, 0, 1, -2, 3])", "output": "0.29", "ops": "=="}, {"input": "positive_count([1, -2, -0, 2])", "output": "0.5", "ops": "=="}, {"input": "positive_count([4, -3, 13, 7, 10, 11, 0, 1])", "output": "0.75", "ops": "=="}, {"input": "positive_count([-1, 1])", "output": "0.5", "ops": "=="}, {"input": "positive_count([1, 1, 2])", "output": "1.0", "ops": "=="}, {"input": "positive_count([0, -10, -24, 2, 34, -90, 0, 23, 23, -234, 2, -3, 0])", "output": "0.38", "ops": "=="}, {"input": "positive_count([2, 3, 4, 5, 0, -3, -2, 3, 4, 6, -1, 8])", "output": "0.67", "ops": "=="}, {"input": "positive_count([1, 2])", "output": "1.0", "ops": "=="}, {"input": "positive_count([2, -1, 1, -3, 5, -3, 0, 6])", "output": "0.5", "ops": "=="}, {"input": "positive_count([0, 1, 0, 0, 1, 0, 1, 1, 0])", "output": "0.44", "ops": "=="}], "199": [{"input": "position_max(range(0, 30, 3))", "output": "[9]", "ops": "=="}, {"input": "position_max(iter([2, 3, 2, 6, 5, 3, 12, 8, 10, 3, 8]))", "output": "[]", "ops": "=="}, {"input": "position_max(['a', 'c','s', 't'])", "output": "[3]", "ops": "=="}, {"input": "position_max((0, 0))", "output": "[0, 1]", "ops": "=="}, {"input": "position_max([0])!= 0", "output": "True", "ops": "=="}, {"input": "position_max(list(map (abs, [-2, -1, 3, 2, 3, 5, 4, 8, -12, -15, -2, 12])))", "output": "[9]", "ops": "=="}], "321": [{"input": "position_min([1, 4, 2])", "output": "[0]", "ops": "=="}, {"input": "position_min([10, 3, 30, 3, 6, 50, 4, 12, 50])", "output": "[1, 3]", "ops": "=="}, {"input": "position_min([\"heilworth III-\", \"marcuza\", \"peres\"])", "output": "[0]", "ops": "=="}, {"input": "position_min(['a','a', 'a', 'x','a','x'])", "output": "[0, 1, 2, 4]", "ops": "=="}, {"input": "sorted(position_min(map(str, range(10000, -1, -10))), reverse=True)", "output": "[]", "ops": "=="}], "148": [{"input": "longest_subseq_with_diff_one([0], 1)", "output": "1", "ops": "=="}, {"input": "longest_subseq_with_diff_one(range(11), 11)", "output": "11", "ops": "=="}, {"input": "longest_subseq_with_diff_one([0]*7, 3)", "output": "1", "ops": "=="}, {"input": "longest_subseq_with_diff_one(range(1000), 2)", "output": "2", "ops": "=="}], "315": [{"input": "find_last_occurrence(range(1, 10), 6)", "output": "5", "ops": "=="}, {"input": "find_last_occurrence(range(10), 5)", "output": "5", "ops": "=="}, {"input": "find_last_occurrence(sorted([1, 2, 2, 4, 4, 9]), 7)", "output": "-1", "ops": "=="}, {"input": "find_last_occurrence('this', 'this')", "output": "-1", "ops": "=="}, {"input": "find_last_occurrence('thiss', 'thi')", "output": "-1", "ops": "=="}, {"input": "find_last_occurrence(range(10, 1, -1), 2)", "output": "-1", "ops": "=="}], "132": [{"input": "sum_negativenum([0])", "output": "0", "ops": "=="}, {"input": "sum_negativenum([])", "output": "0", "ops": "=="}, {"input": "sum_negativenum([2.5, 0])", "output": "0", "ops": "=="}, {"input": "sum_negativenum([])", "output": "0", "ops": "=="}, {"input": "sum_negativenum([1, -2, 3])", "output": "-2", "ops": "=="}, {"input": "sum_negativenum([3, 4, -5])", "output": "-5", "ops": "=="}, {"input": "sum_negativenum([0, 1, 3, 3])", "output": "0", "ops": "=="}, {"input": "sum_negativenum(range(100, -100))", "output": "0", "ops": "=="}, {"input": "sum_negativenum([])", "output": "0", "ops": "=="}, {"input": "sum_negativenum([1, 1, 1, 1, 1, 1, 1, -8])", "output": "-8", "ops": "=="}, {"input": "sum_negativenum([])", "output": "0", "ops": "=="}, {"input": "sum_negativenum(range(200))", "output": "0", "ops": "=="}, {"input": "sum_negativenum([])", "output": "0", "ops": "=="}], "455": [{"input": "reverse_string_list(['jack', 'john','mary'])", "output": "['kcaj', 'nhoj', 'yram']", "ops": "=="}, {"input": "reverse_string_list([])", "output": "[]", "ops": "=="}, {"input": "reverse_string_list(['hjayward','mullally', 'luciandn', 'katti', 'adelmckote', 'abigail', 'candace'])", "output": "['drawyajh', 'yllallum', 'ndnaicul', 'ittak', 'etokcmleda', 'liagiba', 'ecadnac']", "ops": "=="}, {"input": "reverse_string_list(['jack', 'john','mary'])", "output": "['kcaj', 'nhoj', 'yram']", "ops": "=="}, {"input": "reverse_string_list([])", "output": "[]", "ops": "=="}, {"input": "reverse_string_list(['jack', 'john','mary'])", "output": "['kcaj', 'nhoj', 'yram']", "ops": "=="}, {"input": "reverse_string_list([])", "output": "[]", "ops": "=="}, {"input": "reverse_string_list(['jack', 'john','mary'])", "output": "['kcaj', 'nhoj', 'yram']", "ops": "=="}, {"input": "reverse_string_list(['jack', 'john','mary'])", "output": "['kcaj', 'nhoj', 'yram']", "ops": "=="}, {"input": "reverse_string_list([])", "output": "[]", "ops": "=="}, {"input": "reverse_string_list(['jack', 'john','mary'])", "output": "['kcaj', 'nhoj', 'yram']", "ops": "=="}, {"input": "reverse_string_list([])", "output": "[]", "ops": "=="}, {"input": "reverse_string_list(['jack', 'john','mary'])", "output": "['kcaj', 'nhoj', 'yram']", "ops": "=="}, {"input": "reverse_string_list(['jack', 'john','mary'])", "output": "['kcaj', 'nhoj', 'yram']", "ops": "=="}, {"input": "reverse_string_list([])", "output": "[]", "ops": "=="}, {"input": "reverse_string_list([])", "output": "[]", "ops": "=="}, {"input": "reverse_string_list([])", "output": "[]", "ops": "=="}, {"input": "reverse_string_list([])", "output": "[]", "ops": "=="}, {"input": "reverse_string_list(['jack', 'john','mary'])", "output": "['kcaj', 'nhoj', 'yram']", "ops": "=="}, {"input": "reverse_string_list(['jack', 'john','mary'])", "output": "['kcaj', 'nhoj', 'yram']", "ops": "=="}], "647": [{"input": "compare([], [0, 1, 2])", "output": "[]", "ops": "=="}, {"input": "compare([], [0, 1, 2, 3, 4])", "output": "[]", "ops": "=="}, {"input": "compare([], [0, 1])", "output": "[]", "ops": "=="}, {"input": "compare([1, 2, 3], [1, 1, 2])", "output": "[0, 1, 1]", "ops": "=="}, {"input": "compare([], [1])", "output": "[]", "ops": "=="}, {"input": "compare(iter([-1, 2, 3]), [3, 2, 1, 0])", "output": "[4, 0, 2]", "ops": "=="}, {"input": "compare([], [-1])", "output": "[]", "ops": "=="}, {"input": "compare([], [])", "output": "[]", "ops": "=="}, {"input": "compare([1, 2, 3, 1], [-2, -3])", "output": "[3, 5]", "ops": "=="}, {"input": "compare([1, 2], [1, 2, 3])", "output": "[0, 0]", "ops": "=="}, {"input": "compare([2, 2, 3], [1, 1, 3])", "output": "[1, 1, 0]", "ops": "=="}, {"input": "compare([1, 2], [1])", "output": "[0]", "ops": "=="}, {"input": "compare([], [])", "output": "[]", "ops": "=="}, {"input": "compare([], [None])", "output": "[]", "ops": "=="}], "214": [{"input": "decode_list(['a', 'u', 't', 'o','m', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])", "output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "ops": "=="}, {"input": "decode_list(['a', 'u', 't', 'o','m', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])", "output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "ops": "=="}, {"input": "decode_list(\"\")", "output": "[]", "ops": "=="}, {"input": "decode_list(['a', 'u', 't', 'o','m', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])", "output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "ops": "=="}, {"input": "decode_list({'A': 1, 'B': 2})", "output": "['A', 'B']", "ops": "=="}, {"input": "decode_list(['a', 'u', 't', 'o','m', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])", "output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "ops": "=="}, {"input": "decode_list(['a', 'u', 't', 'o','m', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])", "output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "ops": "=="}, {"input": "decode_list(['a', 'u', 't', 'o','m', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])", "output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "ops": "=="}, {"input": "decode_list(['a', 'u', 't', 'o','m', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])", "output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "ops": "=="}, {"input": "decode_list(['a', 'u', 't', 'o','m', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])", "output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "ops": "=="}, {"input": "decode_list(['a', 'u', 't', 'o','m', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])", "output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "ops": "=="}, {"input": "decode_list([])", "output": "[]", "ops": "=="}, {"input": "decode_list(['a', 'u', 't', 'o','m', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])", "output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "ops": "=="}, {"input": "decode_list([])", "output": "[]", "ops": "=="}, {"input": "decode_list([1])", "output": "[1]", "ops": "=="}, {"input": "decode_list([2, 2, 6])", "output": "[2, 2, 6]", "ops": "=="}], "362": [{"input": "add_K_element([], 16)", "output": "[]", "ops": "=="}, {"input": "add_K_element([], None)", "output": "[]", "ops": "=="}], "524": [{"input": "factorize(2 * 3 * 5)", "output": "[2, 3, 5]", "ops": "=="}, {"input": "factorize(20)", "output": "[2, 2, 5]", "ops": "=="}, {"input": "factorize(200)", "output": "[2, 2, 2, 5, 5]", "ops": "=="}, {"input": "factorize(2 * 3 * 19)", "output": "[2, 3, 19]", "ops": "=="}, {"input": "factorize(2 * 2 * 3 * 19)", "output": "[2, 2, 3, 19]", "ops": "=="}, {"input": "factorize(8 + 13)", "output": "[3, 7]", "ops": "=="}, {"input": "factorize(13 - 7)", "output": "[2, 3]", "ops": "=="}, {"input": "factorize(5 * 2 * 2 * 5)", "output": "[2, 2, 5, 5]", "ops": "=="}, {"input": "factorize(2 * 3)", "output": "[2, 3]", "ops": "=="}, {"input": "factorize(3**2 * 3 * 3 * 3 + 3 + 3**2)", "output": "[3, 5, 17]", "ops": "=="}, {"input": "factorize(3 * 3 **3)", "output": "[3, 3, 3, 3]", "ops": "=="}, {"input": "factorize(20 * 2 * 17 * 5 * 23)", "output": "[2, 2, 2, 5, 5, 17, 23]", "ops": "=="}, {"input": "factorize(20 * 2 * 3 * 7 * 5 * 23)", "output": "[2, 2, 2, 3, 5, 5, 7, 23]", "ops": "=="}, {"input": "factorize(3 * 3 * 3)", "output": "[3, 3, 3]", "ops": "=="}, {"input": "factorize(0.125 + 1)", "output": "[1.125]", "ops": "=="}, {"input": "factorize(1279)", "output": "[1279]", "ops": "=="}, {"input": "factorize(3 * 24 * 11)", "output": "[2, 2, 2, 3, 3, 11]", "ops": "=="}, {"input": "factorize(20 * 3)", "output": "[2, 2, 3, 5]", "ops": "=="}, {"input": "factorize(3 * 137)", "output": "[3, 137]", "ops": "=="}, {"input": "factorize(145)", "output": "[5, 29]", "ops": "=="}, {"input": "factorize(19 * 27 * 27)", "output": "[3, 3, 3, 3, 3, 3, 19]", "ops": "=="}, {"input": "factorize(211230000)", "output": "[2, 2, 2, 2, 3, 3, 5, 5, 5, 5, 2347]", "ops": "=="}, {"input": "factorize(3 * 2 * 3 * 3)", "output": "[2, 3, 3, 3]", "ops": "=="}, {"input": "factorize(4 * 5 * 9 * 2)", "output": "[2, 2, 2, 3, 3, 5]", "ops": "=="}, {"input": "factorize(4 ** 20)", "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]", "ops": "=="}, {"input": "factorize(20 - 7)", "output": "[13]", "ops": "=="}, {"input": "factorize(3 * 2 * 15 * 5)", "output": "[2, 3, 3, 5, 5]", "ops": "=="}], "74": [{"input": "find_tuples([], 42)", "output": "'[]'", "ops": "=="}, {"input": "find_tuples([], 4)", "output": "'[]'", "ops": "=="}, {"input": "find_tuples({}, 1)", "output": "'[]'", "ops": "=="}, {"input": "find_tuples([[0, 18, 1], [1, 0, 13], (3, 4, 7)], 18)", "output": "'[]'", "ops": "=="}, {"input": "find_tuples([], 0)", "output": "'[]'", "ops": "=="}], "219": [{"input": "replace_max_specialchar(u'\\u043f\\u0441\\u044f\\u043d \\u0445\\u043e', 2)", "output": "'\u043f\u0441\u044f\u043d:\u0445\u043e'", "ops": "=="}, {"input": "replace_max_specialchar(\"\", 0)", "output": "''", "ops": "=="}, {"input": "replace_max_specialchar(u'\u00abram \u29ebrereshma, ram\u00bb', 2)", "output": "'\u00abram:\u29ebrereshma: ram\u00bb'", "ops": "=="}, {"input": "replace_max_specialchar(u'\u00abram \u29efrereshma, ram\u2338\u203e\u00ee\u00ec\u2248\u1fb3', 3)", "output": "'\u00abram:\u29efrereshma::ram\u2338\u203e\u00ee\u00ec\u2248\u1fb3'", "ops": "=="}, {"input": "replace_max_specialchar(u'\u00bfqu\u00e9 decirse la?', 2)", "output": "'\u00bfqu\u00e9:decirse:la?'", "ops": "=="}, {"input": "replace_max_specialchar(u'Mr Hakalahom Saka', 1)", "output": "'Mr:Hakalahom Saka'", "ops": "=="}, {"input": "replace_max_specialchar('VP [abcde] c\u00e9dilla', 1)", "output": "'VP:[abcde] c\u00e9dilla'", "ops": "=="}, {"input": "replace_max_specialchar('A [ABCDE] \u00e9', 0)", "output": "'A:[ABCDE]:\u00e9'", "ops": "=="}, {"input": "replace_max_specialchar(',,,', 4)", "output": "':::'", "ops": "=="}], "303": [{"input": "find_Element([1], [[0, 0]], 1, 0)", "output": "1", "ops": "=="}], "549": [{"input": "remove_vowels(['aabaacaabacaaa'])", "output": "'aabaacaabacaaa'", "ops": "=="}, {"input": "remove_vowels('aaaaaaaaaaaaa')", "output": "''", "ops": "=="}, {"input": "remove_vowels(r'\\w$\\d\\\\\\*')", "output": "'\\\\w$\\\\d\\\\\\\\\\\\*'", "ops": "=="}, {"input": "remove_vowels(u'eBOobE')", "output": "'Bb'", "ops": "=="}, {"input": "remove_vowels(' Ybd ')", "output": "' Ybd '", "ops": "=="}, {"input": "remove_vowels({'name':'JHANSON', 'age':'35','sex':'male'})", "output": "'nameagesex'", "ops": "=="}, {"input": "remove_vowels(['y'])[0]", "output": "'y'", "ops": "=="}, {"input": "remove_vowels(\"\"\"abBDe!\"\"\")", "output": "'bBD!'", "ops": "=="}], "616": [{"input": "solution([])", "output": "0", "ops": "=="}, {"input": "solution([0]*20)", "output": "0", "ops": "=="}, {"input": "solution([])", "output": "0", "ops": "=="}, {"input": "solution([10, 20, 3, 8, 12])", "output": "3", "ops": "=="}, {"input": "solution([])", "output": "0", "ops": "=="}, {"input": "solution(set(range(25)))", "output": "0", "ops": "=="}, {"input": "solution(set([30, 13, 23, 32]))", "output": "0", "ops": "=="}, {"input": "solution([1, 2, 5, 9])", "output": "6", "ops": "=="}, {"input": "solution([0])", "output": "0", "ops": "=="}, {"input": "solution([0])", "output": "0", "ops": "=="}], "650": [{"input": "even_odd_count(12)", "output": "(1, 1)", "ops": "=="}, {"input": "even_odd_count(-122)", "output": "(2, 1)", "ops": "=="}, {"input": "even_odd_count(461)", "output": "(2, 1)", "ops": "=="}, {"input": "even_odd_count(-0)", "output": "(1, 0)", "ops": "=="}, {"input": "even_odd_count(5)", "output": "(0, 1)", "ops": "=="}, {"input": "even_odd_count(8)", "output": "(1, 0)", "ops": "=="}, {"input": "even_odd_count(3)", "output": "(0, 1)", "ops": "=="}, {"input": "even_odd_count(2)", "output": "(1, 0)", "ops": "=="}, {"input": "even_odd_count(100)", "output": "(2, 1)", "ops": "=="}, {"input": "even_odd_count(10)", "output": "(1, 1)", "ops": "=="}, {"input": "even_odd_count(6)", "output": "(1, 0)", "ops": "=="}, {"input": "even_odd_count(8)", "output": "(1, 0)", "ops": "=="}, {"input": "even_odd_count(45347)", "output": "(2, 3)", "ops": "=="}, {"input": "even_odd_count(3)", "output": "(0, 1)", "ops": "=="}, {"input": "even_odd_count(10)", "output": "(1, 1)", "ops": "=="}, {"input": "even_odd_count(15)", "output": "(0, 2)", "ops": "=="}, {"input": "even_odd_count(56)", "output": "(1, 1)", "ops": "=="}, {"input": "even_odd_count(456)", "output": "(2, 1)", "ops": "=="}, {"input": "even_odd_count(12293249)", "output": "(4, 4)", "ops": "=="}, {"input": "even_odd_count(466)", "output": "(3, 0)", "ops": "=="}, {"input": "even_odd_count(1)", "output": "(0, 1)", "ops": "=="}, {"input": "even_odd_count(45892)", "output": "(3, 2)", "ops": "=="}], "62": [{"input": "max_difference([(10, 18), (18, 37), (23, 15)])", "output": "19", "ops": "=="}, {"input": "max_difference(zip([2, 3, 4, 1, 4, 5, 1, 2, 6, 1, 6, 3, 8], [3, 4, 10, 13, 15, 19, 10, 30, 16, 9, 12, 21]))", "output": "28", "ops": "=="}, {"input": "max_difference(((2,2), (3, 2), (3, 1)))", "output": "2", "ops": "=="}], "109": [{"input": "extract_missing([], 1, 5)", "output": "[]", "ops": "=="}, {"input": "extract_missing([], 0, 50) == []", "output": "True", "ops": "=="}, {"input": "extract_missing([], 4, 2)", "output": "[]", "ops": "=="}, {"input": "extract_missing([], 5, 5)", "output": "[]", "ops": "=="}], "136": [{"input": "zero_count([-2, 4, 5, -1, -9, 6, 13, -3, -14])", "output": "0.0", "ops": "=="}, {"input": "zero_count([1, 2])", "output": "0.0", "ops": "=="}, {"input": "zero_count([8, 4, 15, 7, 10, 5, 8, 10, 3, 3])", "output": "0.0", "ops": "=="}, {"input": "zero_count([-1, 1])", "output": "0.0", "ops": "=="}, {"input": "zero_count([52, 62, 54, -1, 3, -1, 4, 1])", "output": "0.0", "ops": "=="}, {"input": "zero_count([0])", "output": "1.0", "ops": "=="}, {"input": "zero_count([0, 1, 2, 3, 4, -5, 6, 7, 8, 10, 0, 3])", "output": "0.17", "ops": "=="}, {"input": "zero_count([0, 0, 0, 0, 3, -5, 0, 1])", "output": "0.62", "ops": "=="}, {"input": "zero_count([4, 7, -6, 10, 13, 17, -2, 1, -3, 6, 14,  -9, 5, 15])", "output": "0.0", "ops": "=="}, {"input": "zero_count(range(100000))", "output": "0.0", "ops": "=="}], "249": [{"input": "count_X(range(99), 9)", "output": "1", "ops": "=="}, {"input": "count_X([True, True, 2, 2, True, False], 4)", "output": "0", "ops": "=="}, {"input": "count_X(frozenset({1,2,3}), 10)", "output": "0", "ops": "=="}, {"input": "_ = count_X(range(5), 3)!= count_X(iter(range(5)), 3)", "output": "False", "ops": "=="}, {"input": "count_X([], 0)", "output": "0", "ops": "=="}, {"input": "count_X([], 3)", "output": "0", "ops": "=="}, {"input": "count_X(range(21), 0)", "output": "1", "ops": "=="}, {"input": "count_X(range(0,9),0)", "output": "1", "ops": "=="}, {"input": "count_X(range(0,8), 10)", "output": "0", "ops": "=="}, {"input": "count_X(list('ABCDEFGCG'), list('GCGC') == 1)", "output": "0", "ops": "=="}, {"input": "count_X(iter('!'), 3)", "output": "0", "ops": "=="}, {"input": "count_X(range(10,12),0)", "output": "0", "ops": "=="}], "561": [{"input": "digitSum(\"\")", "output": "0", "ops": "=="}, {"input": "digitSum(\" \")", "output": "0", "ops": "=="}, {"input": "digitSum(\" It's all about money and you'Re all rites,,: $$$\")", "output": "155", "ops": "=="}], "119": [{"input": "max_product_tuple(zip((1,2,3), range(6,12,2)))", "output": "30", "ops": "=="}], "408": [{"input": "min_product_tuple([(2, 10), (1, 8), (1, 7), (1, 10)])", "output": "7", "ops": "=="}, {"input": "min_product_tuple([(10, 10), (10, 2), (2, 4)])", "output": "8", "ops": "=="}], "445": [{"input": "count_Occurrence((), ())", "output": "0", "ops": "=="}, {"input": "count_Occurrence(('aaaabeeabd', 'abebcdg'), ['a'])", "output": "0", "ops": "=="}, {"input": "count_Occurrence(('s', 'a', 'n'), ['a', 'n'])", "output": "2", "ops": "=="}, {"input": "count_Occurrence(('s', 'a', 'n', 'n','s'), [])", "output": "0", "ops": "=="}, {"input": "count_Occurrence('abccc', 'aabb')", "output": "2", "ops": "=="}, {"input": "count_Occurrence(('a b a b b a a'), ('b', 'a'))", "output": "7", "ops": "=="}, {"input": "count_Occurrence(['1', '1', 3, 3, 4, 4, 4], [3])", "output": "2", "ops": "=="}, {"input": "count_Occurrence(('', 4, 4, 5, 6, 6, 6), [4])", "output": "2", "ops": "=="}, {"input": "count_Occurrence([1, 2, 3, 4], [1, 2])", "output": "2", "ops": "=="}, {"input": "count_Occurrence(set([1,2,3,4]), set([1]))", "output": "1", "ops": "=="}, {"input": "count_Occurrence(('foo', 'a', 'bar', 'a'), ('o', 'u'))", "output": "0", "ops": "=="}, {"input": "count_Occurrence(iter('a' * 50 + 'abc'), 'a')", "output": "51", "ops": "=="}], "643": [{"input": "bf(None, 'Jupiter')", "output": "()", "ops": "=="}, {"input": "bf(None, True)", "output": "()", "ops": "=="}, {"input": "bf(['Mars', 'Mars'], 'Jupiter')", "output": "()", "ops": "=="}, {"input": "bf(4, 20)", "output": "()", "ops": "=="}, {"input": "bf(20, 100)", "output": "()", "ops": "=="}, {"input": "bf(200, 600)", "output": "()", "ops": "=="}, {"input": "bf('foo', 'bar')", "output": "()", "ops": "=="}, {"input": "bf(7, 'Sagittarius')", "output": "()", "ops": "=="}, {"input": "bf('Mars', 'Mercury')", "output": "('Venus', 'Earth')", "ops": "=="}, {"input": "bf(None, 'Earth')", "output": "()", "ops": "=="}, {"input": "bf(5, 'Jupiters')", "output": "()", "ops": "=="}, {"input": "bf(10, 'Odes')", "output": "()", "ops": "=="}], "269": [{"input": "sum_even_and_even_index(range(30), 7)", "output": "12", "ops": "=="}, {"input": "sum_even_and_even_index([1], 0)", "output": "0", "ops": "=="}, {"input": "sum_even_and_even_index([0], 1)", "output": "0", "ops": "=="}, {"input": "sum_even_and_even_index([1], 0)", "output": "0", "ops": "=="}, {"input": "sum_even_and_even_index([], 0)", "output": "0", "ops": "=="}], "356": [{"input": "find_max(zip(range(51), [2, 2, 2, 2, 0, 0]))", "output": "5", "ops": "=="}], "632": [{"input": "compare_one(False, 4)", "output": "4", "ops": "=="}, {"input": "compare_one(1.0, False)", "output": "1.0", "ops": "=="}, {"input": "compare_one(2, 2.5)", "output": "2.5", "ops": "=="}], "15": [{"input": "text_lowercase_underscore(u'Aaaa B\\bb\\c\\B\\Bcc')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lowercase_underscore('The QuickBrown Fox')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lowercase_underscore('AmTCapE sO rE')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lowercase_underscore(u'aab-Abbbc-\\ua11a')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lowercase_underscore('..--.')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lower = text_lowercase_underscore('..-..-.')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lowercase_underscore(u' \\u02da abc')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lowercase_underscore(u'\\xa1  abc   def')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lowercase_underscore(u'aa\u00e4bb_cCBBbb_dDcc-DddDEee-ee')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lowercase_underscore(u'\\u6b05\\u6dfb\\u52a0\\u57df\\u5e73')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lowercase_underscore(u'aab-Abbbc')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lowercase_underscore(u'A-abbbc')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lowercase_underscore('\\u00E8-\\u0104\\u020A\\u0330\\u0303\\u0067-\\u0907\\u1335\\u039E\\u035B-\\u05CC\\u05DC\\u07F9-\\t\\r\\a\\f')", "output": "'Not matched!'", "ops": "=="}], "186": [{"input": "longest_common_subsequence(range(4), range(5), 0, 1)", "output": "0", "ops": "=="}, {"input": "longest_common_subsequence(None, 'ROY', 0, 0)", "output": "0", "ops": "=="}], "46": [{"input": "compute_Last_Digit(1234, 1234)", "output": "1", "ops": "=="}, {"input": "compute_Last_Digit(484, 1)", "output": "1", "ops": "=="}, {"input": "compute_Last_Digit(1023, 1147)", "output": "0", "ops": "=="}, {"input": "compute_Last_Digit(9999999098, 1000000000)", "output": "1", "ops": "=="}, {"input": "compute_Last_Digit(628, 1621)", "output": "0", "ops": "=="}, {"input": "compute_Last_Digit(10021, 10003)", "output": "1", "ops": "=="}, {"input": "compute_Last_Digit(123456, 1000)", "output": "1", "ops": "=="}, {"input": "compute_Last_Digit(19190, 19199)", "output": "0", "ops": "=="}, {"input": "compute_Last_Digit(97, 1024)", "output": "0", "ops": "=="}, {"input": "compute_Last_Digit(634, 662)", "output": "0", "ops": "=="}, {"input": "compute_Last_Digit(65532, 10)", "output": "1", "ops": "=="}, {"input": "compute_Last_Digit(10000, 1000)", "output": "1", "ops": "=="}, {"input": "compute_Last_Digit(1234, 9876)", "output": "0", "ops": "=="}], "464": [{"input": "drop_empty({})", "output": "{}", "ops": "=="}, {"input": "drop_empty({})", "output": "{}", "ops": "=="}, {"input": "drop_empty(dict(a=1, b=2, c=3))", "output": "{'a': 1, 'b': 2, 'c': 3}", "ops": "=="}, {"input": "drop_empty({})", "output": "{}", "ops": "=="}, {"input": "drop_empty({})", "output": "{}", "ops": "=="}, {"input": "drop_empty(dict())", "output": "{}", "ops": "=="}, {"input": "drop_empty({})", "output": "{}", "ops": "=="}, {"input": "drop_empty({})", "output": "{}", "ops": "=="}, {"input": "drop_empty({})", "output": "{}", "ops": "=="}], "28": [{"input": "get_Odd_Occurrence(['dog', 'cat', 'cat', 'dog', 'cat', 'cat'], 5)", "output": "'cat'", "ops": "=="}, {"input": "get_Odd_Occurrence(['a', 'b', 'b', 'c'], 3)", "output": "'a'", "ops": "=="}, {"input": "get_Odd_Occurrence(list(range(50))[::-1], 0)", "output": "-1", "ops": "=="}, {"input": "get_Odd_Occurrence([3, 3, 3, 3, 2, 2, 1, 1, 3, 3, 4, 3, 2, 1, 1, 2], 5)", "output": "2", "ops": "=="}, {"input": "get_Odd_Occurrence(range(100), 50)", "output": "0", "ops": "=="}, {"input": "get_Odd_Occurrence(range(8), 7)", "output": "0", "ops": "=="}], "563": [{"input": "pluck([ 7, 9, 7, 1, 2])", "output": "[2, 4]", "ops": "=="}, {"input": "pluck([ 4, 9, 8, 8, 8, 8, 2])", "output": "[2, 6]", "ops": "=="}, {"input": "pluck([8])", "output": "[8, 0]", "ops": "=="}, {"input": "pluck([1, 2, 3, 4, 5, 6, 6])", "output": "[2, 1]", "ops": "=="}, {"input": "pluck([1, 2, 9, 10, 15, 16, 16, 14, 18, 17])", "output": "[2, 1]", "ops": "=="}, {"input": "pluck([1])", "output": "[]", "ops": "=="}, {"input": "pluck([2])", "output": "[2, 0]", "ops": "=="}, {"input": "pluck([4, 1, 2])", "output": "[2, 2]", "ops": "=="}, {"input": "pluck([4, 3, 1])", "output": "[4, 0]", "ops": "=="}, {"input": "pluck([3, 1, 4, 4, 3, 3, 1, 5, 5, 3, 4, 5, 6, 3, 4, 5])", "output": "[4, 2]", "ops": "=="}, {"input": "pluck([6, 2, 2, 9, 9, 6])", "output": "[2, 1]", "ops": "=="}, {"input": "pluck([9, 5, 4, 7])", "output": "[4, 2]", "ops": "=="}, {"input": "pluck([9, 5, 4, 7])", "output": "[4, 2]", "ops": "=="}, {"input": "pluck([2, 2, 7, 9, 3])", "output": "[2, 0]", "ops": "=="}, {"input": "pluck([7, 6, 1, 6])", "output": "[6, 1]", "ops": "=="}, {"input": "pluck([7, 6, 7, 2, 7, 1, 1, 7, 1, 7, 1])", "output": "[2, 3]", "ops": "=="}, {"input": "pluck(range(-5, 5))", "output": "[-4, 1]", "ops": "=="}, {"input": "pluck({})", "output": "[]", "ops": "=="}, {"input": "pluck([1])", "output": "[]", "ops": "=="}], "283": [{"input": "check_element(range(40), 29)", "output": "False", "ops": "=="}, {"input": "check_element([], None)", "output": "True", "ops": "=="}, {"input": "check_element([],'red')", "output": "True", "ops": "=="}, {"input": "check_element([\"Cooking\", \"Thai Noodle\", \"Spring Cream Cheese\", 'Stainless Steel', \"All\", \"The Wood\"], \"All\")", "output": "False", "ops": "=="}, {"input": "check_element({},'red')", "output": "True", "ops": "=="}], "327": [{"input": "rotate_left([1, 5, 10, 2, 6, 3, 7, 9, 4, 8], 4, -1)", "output": "[6, 3, 7, 9, 4, 8, 1, 5, 10, 2, 6, 3, 7, 9, 4]", "ops": "=="}, {"input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15, 2)", "output": "[1, 2]", "ops": "=="}, {"input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4, 1)", "output": "[5, 6, 7, 8, 9, 10, 1]", "ops": "=="}, {"input": "rotate_left([1, 5, 10, 2, 6, 3, 7, 9, 4, 8], -3, -4)", "output": "[9, 4, 8, 1, 5, 10, 2, 6, 3]", "ops": "=="}, {"input": "rotate_left(['1', '11'], -2, 8)", "output": "['1', '11', '1', '11']", "ops": "=="}, {"input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4, 1)", "output": "[5, 6, 7, 8, 9, 10, 1]", "ops": "=="}, {"input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4, 2)", "output": "[5, 6, 7, 8, 9, 10, 1, 2]", "ops": "=="}, {"input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9, 3)", "output": "[10, 1, 2, 3]", "ops": "=="}, {"input": "list(str(n) for i in rotate_left([], 0, 8))", "output": "[]", "ops": "=="}, {"input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 1000)", "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "ops": "=="}, {"input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8, 2)", "output": "[9, 10, 1, 2]", "ops": "=="}, {"input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 0)", "output": "[4, 5, 6, 7, 8, 9, 10]", "ops": "=="}, {"input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8, 9)", "output": "[9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "ops": "=="}, {"input": "rotate_left([-10, 10, 1, 0, 5, 5, 12, 3, 4], 6, 2)", "output": "[12, 3, 4, -10, 10]", "ops": "=="}, {"input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6, 5)", "output": "[7, 8, 9, 10, 1, 2, 3, 4, 5]", "ops": "=="}], "416": [{"input": "group_tuples(zip(['a', 'b', 'c'], ['d', 'e']))", "output": "[('a', 'd'), ('b', 'e')]", "ops": "=="}, {"input": "group_tuples([])", "output": "[]", "ops": "=="}, {"input": "group_tuples({'one': [{'a': ['a', 'b', 'c']}], 'two': None, 'ten': [None], 'hundred': None, 'fifteen': [{'e': ['e', 'f', 'g']}],})", "output": "[('o', 'n', 'e'), ('t', 'w', 'o', 'e', 'n'), ('h', 'u', 'n', 'd', 'r', 'e', 'd'), ('f', 'i', 'f', 't', 'e', 'e', 'n')]", "ops": "=="}, {"input": "group_tuples((\"abcde\", \"fgh\", \"khli\"))", "output": "[('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h'), ('k', 'h', 'l', 'i')]", "ops": "=="}, {"input": "group_tuples([])", "output": "[]", "ops": "=="}, {"input": "group_tuples(['a', 'b', 'c', [('a', 'x'), ('b', 'y')]])", "output": "[('a',), ('b',), ('c',), (('a', 'x'), ('b', 'y'))]", "ops": "=="}, {"input": "group_tuples(list('abcdefgfegd'))", "output": "[('a',), ('b',), ('c',), ('d',), ('e',), ('f',), ('g',)]", "ops": "=="}, {"input": "group_tuples([[1, 1], [3, 3], [5, 5]])", "output": "[(1, 1), (3, 3), (5, 5)]", "ops": "=="}, {"input": "group_tuples([])", "output": "[]", "ops": "=="}], "494": [{"input": "remove_lowercase(\"\")", "output": "''", "ops": "=="}, {"input": "remove_lowercase('test')", "output": "''", "ops": "=="}, {"input": "remove_lowercase ('test')", "output": "''", "ops": "=="}, {"input": "remove_lowercase(u\"M\\u00eeart L\\u00e9vans\")", "output": "'M\u00ee L\u00e9'", "ops": "=="}], "597": [{"input": "choose_num(546, 544)", "output": "-1", "ops": "=="}, {"input": "choose_num(111, 100)", "output": "-1", "ops": "=="}, {"input": "choose_num(1236, 1236)", "output": "1236", "ops": "=="}, {"input": "choose_num(1022, 10102229)", "output": "10102228", "ops": "=="}, {"input": "choose_num(10, 510)", "output": "510", "ops": "=="}, {"input": "choose_num(4353, 1500004353)", "output": "1500004352", "ops": "=="}, {"input": "choose_num(91, 493)", "output": "492", "ops": "=="}, {"input": "choose_num(1, 5)", "output": "4", "ops": "=="}, {"input": "choose_num(41, 54)", "output": "54", "ops": "=="}, {"input": "choose_num(612, 0)", "output": "-1", "ops": "=="}, {"input": "choose_num(933, 3)", "output": "-1", "ops": "=="}, {"input": "choose_num(83, 3)", "output": "-1", "ops": "=="}, {"input": "choose_num(564, 72657)", "output": "72656", "ops": "=="}, {"input": "choose_num(52348392109234, 10)", "output": "-1", "ops": "=="}, {"input": "choose_num(0, 27)", "output": "26", "ops": "=="}, {"input": "choose_num(1, 45)", "output": "44", "ops": "=="}, {"input": "choose_num(2, 346)", "output": "346", "ops": "=="}, {"input": "choose_num(5050, 100005100)", "output": "100005100", "ops": "=="}, {"input": "choose_num(310032, 323024582)", "output": "323024582", "ops": "=="}, {"input": "choose_num(24343, 454)", "output": "-1", "ops": "=="}, {"input": "choose_num(10646, 810)", "output": "-1", "ops": "=="}, {"input": "choose_num(87234, 210)", "output": "-1", "ops": "=="}, {"input": "choose_num(63838, 60603)", "output": "-1", "ops": "=="}, {"input": "choose_num(3, 1)", "output": "-1", "ops": "=="}, {"input": "choose_num(22, 15)", "output": "-1", "ops": "=="}, {"input": "choose_num(6547, 91)", "output": "-1", "ops": "=="}, {"input": "choose_num(12, 152912)", "output": "152912", "ops": "=="}, {"input": "choose_num(25, 24)", "output": "-1", "ops": "=="}], "422": [{"input": "get_maxgold([[20, 20], [10, 10, 10, 20]], 2, 1)", "output": "20", "ops": "=="}], "606": [{"input": "histogram('  a')", "output": "{'a': 1}", "ops": "=="}, {"input": "histogram('nan')", "output": "{'nan': 1}", "ops": "=="}], "131": [{"input": "tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))", "output": "'exercises'", "ops": "=="}, {"input": "tup_string(('p', 'r', 'o', 'g', 'r', 'a','m'))", "output": "'program'", "ops": "=="}, {"input": "tup_string((\"('', 'a', '', '','', 'l','', ')\",))", "output": "\"('', 'a', '', '','', 'l','', ')\"", "ops": "=="}, {"input": "tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))", "output": "'exercises'", "ops": "=="}, {"input": "tup_string(('p', 'r', 'o', 'g', 'r', 'a','m'))", "output": "'program'", "ops": "=="}, {"input": "tup_string(('i','s'))", "output": "'is'", "ops": "=="}, {"input": "tup_string('')", "output": "''", "ops": "=="}, {"input": "tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))", "output": "'exercises'", "ops": "=="}, {"input": "tup_string(('p', 'r', 'o', 'g', 'r', 'a','m'))", "output": "'program'", "ops": "=="}, {"input": "tup_string(('p', '--','s', 't', 'h', 'e', '--', 'f', 'g', 'e', 'a', '--'))", "output": "'p--sthe--fgea--'", "ops": "=="}, {"input": "tup_string(('p', 'a', 'p', 'p', 'o'))", "output": "'pappo'", "ops": "=="}, {"input": "tup_string('po')", "output": "'po'", "ops": "=="}, {"input": "tup_string('-po')", "output": "'-po'", "ops": "=="}, {"input": "tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))", "output": "'exercises'", "ops": "=="}, {"input": "tup_string(('p', 'r', 'o', 'g', 'r', 'a','m'))", "output": "'program'", "ops": "=="}, {"input": "tup_string(('m', 'o', 'i','s', 't', 'a', 'n'))", "output": "'moistan'", "ops": "=="}, {"input": "tup_string(('t', 'h', 'e', 'r', 'y', 'b', 'a', 'r'))", "output": "'therybar'", "ops": "=="}, {"input": "tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))", "output": "'exercises'", "ops": "=="}, {"input": "tup_string(('p', 'r', 'o', 'g', 'r', 'a','m'))", "output": "'program'", "ops": "=="}, {"input": "tup_string(('m', 'g', 'g', 'r', 'a', 'n'))", "output": "'mggran'", "ops": "=="}, {"input": "tup_string(('e', 'p', 'r', 'g','s'))", "output": "'eprgs'", "ops": "=="}, {"input": "tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))", "output": "'exercises'", "ops": "=="}, {"input": "my_tup = [e for t in (tup_string('aerers'), ) for e in t]", "output": "['a', 'e', 'r', 'e', 'r', 's']", "ops": "=="}, {"input": "tup_string(('p', 'r', 'o', 'g', 'r', 'a','m'))", "output": "'program'", "ops": "=="}, {"input": "tup_string(('c', 'l', 'a', 'n', 'd', 'o', 'r', 'r', 'c', 't', 'i', 'l', 't', 'e'))", "output": "'clandorrctilte'", "ops": "=="}, {"input": "tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))", "output": "'exercises'", "ops": "=="}, {"input": "tup_string(('p', 'r', 'o', 'g', 'r', 'a','m'))", "output": "'program'", "ops": "=="}, {"input": "tup_string(('p', 'f', 'o','m', 'a', 'b', 'c', 'a', 'b'))", "output": "'pfomabcab'", "ops": "=="}, {"input": "tup_string(('p', 'g', 'c','m', 'a', 'b', 'c', 'r', 'v', 'i','s', 't', 'i', 'g', 't', 'f'))", "output": "'pgcmabcrvistigtf'", "ops": "=="}, {"input": "tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))", "output": "'exercises'", "ops": "=="}, {"input": "tup_string(('r', 'e', 'g', 'p', 'e','m'))", "output": "'regpem'", "ops": "=="}, {"input": "tup_string(('p', 'r', 'o', 'g', 'r', 'a','m'))", "output": "'program'", "ops": "=="}, {"input": "tup_string(('l', 'f', 'i', 'h', 'e'))", "output": "'lfihe'", "ops": "=="}, {"input": "tup_string(('e', 't', 'e','m', 'p', '3', 'h', 'o', 'n', 'h', 'r', 'o', 'i', 'z', 'c', 'e', 'r', 'i', 'e'))", "output": "'etemp3honhroizcerie'", "ops": "=="}, {"input": "tup_string(('o', 'g', 'r', 'k'))", "output": "'ogrk'", "ops": "=="}, {"input": "tup_string(('f', 'e', 'e', 'l'))", "output": "'feel'", "ops": "=="}, {"input": "tup_string(('l', 'h', 'z', 'i','m', 'b', 'r', 'p', 'f', 'p'))", "output": "'lhzimbrpfp'", "ops": "=="}, {"input": "tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))", "output": "'exercises'", "ops": "=="}, {"input": "tup_string(('p', 'r', 'o', 'g', 'r', 'a','m'))", "output": "'program'", "ops": "=="}, {"input": "tup_string(('A', '+', 'R', 'O', 'b', 'c', 'O', '-', 'R'))", "output": "'A+RObcO-R'", "ops": "=="}, {"input": "tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))", "output": "'exercises'", "ops": "=="}, {"input": "tup_string(('p', 'r', 'e', 'c', 't', 'i', 'n'))", "output": "'prectin'", "ops": "=="}, {"input": "tup_string(('d', 'l', 'e', 'a', 'i', 'n', 'c', 'h'))", "output": "'dleainch'", "ops": "=="}, {"input": "tup_string(('p', 'k', 'j', 'h','m', 'p', '-', 'c'))", "output": "'pkjhmp-c'", "ops": "=="}, {"input": "tup_string(('p', 'r', 'o', 'g', 'r', 'a','m'))", "output": "'program'", "ops": "=="}], "177": [{"input": "string_literals(['code'], 'programming language')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['code', 'python'], 'language python programming language')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['javascript'], 'programming and web development')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals([], '')", "output": "None", "ops": "=="}, {"input": "string_literals(['script'], 'programming language')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['ruby'], 'programming ruby')", "output": "'Matched!'", "ops": "=="}, {"input": "string_literals(['programing','system'], 'programming language')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['script'], 'programming language')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['java'], 'programming language')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['code'], 'python')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['language', 'java'], 'programm, language python')", "output": "'Matched!'", "ops": "=="}, {"input": "string_literals(['programm', 'langauge'], 'programming language')", "output": "'Matched!'", "ops": "=="}, {"input": "string_literals(['python', 'programming', 'languge'], 'programming language language')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['language c'], 'c programming')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['xcode'], 'programming language')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['python-class'], 'language for computing')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['python-core'], 'language for calculated')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['prograing'], 'programming language')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['language', 'python'], 'programmingpy thon')", "output": "'Not Matched!'", "ops": "=="}], "228": [{"input": "re_arrange_array(100, -200)", "output": "100", "ops": "=="}, {"input": "re_arrange_array(10, -2)", "output": "10", "ops": "=="}, {"input": "re_arrange_array([1, 1, 1], 2)", "output": "[1, 1, 1]", "ops": "=="}, {"input": "re_arrange_array([-45, -68], -39)", "output": "[-45, -68]", "ops": "=="}, {"input": "re_arrange_array([2.5, 1, 1], 3)", "output": "[2.5, 1, 1]", "ops": "=="}, {"input": "re_arrange_array([1, 1, 1, 1], 2)", "output": "[1, 1, 1, 1]", "ops": "=="}, {"input": "re_arrange_array([], 0)", "output": "[]", "ops": "=="}, {"input": "re_arrange_array([1, 4], 0)", "output": "[1, 4]", "ops": "=="}, {"input": "re_arrange_array([1.5, 2.5, 1, 1.5], 3)", "output": "[1.5, 2.5, 1, 1.5]", "ops": "=="}, {"input": "re_arrange_array([1], 1)", "output": "[1]", "ops": "=="}, {"input": "re_arrange_array([-1, 10, 20, 11, -21], 3)", "output": "[-1, 10, 20, 11, -21]", "ops": "=="}], "304": [{"input": "start_withp(['Python JavaScript'])", "output": "None", "ops": "=="}, {"input": "start_withp(['Hello Pqrst Pqr Programming'])", "output": "None", "ops": "=="}, {"input": "start_withp(['QRST QRSV'])", "output": "None", "ops": "=="}, {"input": "start_withp(\"helloooooog!\")", "output": "None", "ops": "=="}, {"input": "start_withp(['a_b_c', 'D'])", "output": "None", "ops": "=="}, {"input": "start_withp([])", "output": "None", "ops": "=="}, {"input": "start_withp(['abbc', 'abddc', 'abab'])", "output": "None", "ops": "=="}, {"input": "start_withp('Hello world from M\u00fcnster!')", "output": "None", "ops": "=="}, {"input": "start_withp(['Programming Lang'])", "output": "None", "ops": "=="}, {"input": "start_withp('a random string of length')", "output": "None", "ops": "=="}, {"input": "start_withp(['Hello World',' Hello1', 'Hello2'])", "output": "None", "ops": "=="}, {"input": "start_withp(['', ''])", "output": "None", "ops": "=="}, {"input": "start_withp(['Pqrst QR abc', 'Pqrqrqrz as'])", "output": "None", "ops": "=="}, {"input": "start_withp([' asd ', 'dsad'])", "output": "None", "ops": "=="}], "546": [{"input": "is_palindrome(list())", "output": "True", "ops": "=="}, {"input": "is_palindrome(\"\")", "output": "True", "ops": "=="}, {"input": "is_palindrome(\"kayak bo\")", "output": "False", "ops": "=="}, {"input": "is_palindrome(\" wyz a\")", "output": "False", "ops": "=="}, {"input": "is_palindrome('wxzyx')", "output": "False", "ops": "=="}], "591": [{"input": "count_up_to(103)", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]", "ops": "=="}, {"input": "count_up_to(111)", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109]", "ops": "=="}, {"input": "count_up_to(19)", "output": "[2, 3, 5, 7, 11, 13, 17]", "ops": "=="}, {"input": "count_up_to(255)", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251]", "ops": "=="}, {"input": "count_up_to(180)", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179]", "ops": "=="}, {"input": "count_up_to(45)", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]", "ops": "=="}, {"input": "count_up_to(51)", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]", "ops": "=="}, {"input": "count_up_to(91)", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]", "ops": "=="}, {"input": "count_up_to(102)", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]", "ops": "=="}, {"input": "count_up_to(51)", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]", "ops": "=="}, {"input": "count_up_to(100)", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]", "ops": "=="}], "635": [{"input": "fix_spaces(' Space    ')", "output": "'_Space-'", "ops": "=="}, {"input": "fix_spaces(r'   exa  \\n   mple')", "output": "'-exa__\\\\n-mple'", "ops": "=="}, {"input": "fix_spaces(('Exa   ple','Eddle Dinks  (S)'))", "output": "'Exa   pleEddle Dinks  (S)'", "ops": "=="}, {"input": "fix_spaces('Freddie (Herring)\\r\\nHippos')", "output": "'Freddie_(Herring)\\r\\nHippos'", "ops": "=="}, {"input": "fix_spaces('')", "output": "''", "ops": "=="}, {"input": "fix_spaces('   Bla bla bla Bla 1 2 3  Bla')", "output": "'-Bla_bla_bla_Bla_1_2_3__Bla'", "ops": "=="}, {"input": "fix_spaces(('Exa\\tmple'))", "output": "'Exa\\tmple'", "ops": "=="}, {"input": "fix_spaces('E       xample')", "output": "'E-xample'", "ops": "=="}, {"input": "fix_spaces(r' \\m{ \\b  \\f ')", "output": "'_\\\\m{_\\\\b__\\\\f_'", "ops": "=="}], "24": [{"input": "find_Product([], 0)", "output": "1", "ops": "=="}], "573": [{"input": "hex_key(range(20))", "output": "0", "ops": "=="}, {"input": "hex_key(list(''.join(map(str,range(10)))))", "output": "4", "ops": "=="}, {"input": "hex_key(\"Hello\")", "output": "0", "ops": "=="}, {"input": "hex_key([\"John\",\"Smith\", 123])", "output": "0", "ops": "=="}, {"input": "hex_key(())", "output": "0", "ops": "=="}, {"input": "hex_key('1')", "output": "0", "ops": "=="}, {"input": "hex_key('')", "output": "0", "ops": "=="}, {"input": "hex_key(range(50))", "output": "0", "ops": "=="}, {"input": "hex_key('a')", "output": "0", "ops": "=="}, {"input": "hex_key({})", "output": "0", "ops": "=="}, {"input": "hex_key(set())", "output": "0", "ops": "=="}, {"input": "hex_key(set(''))", "output": "0", "ops": "=="}, {"input": "hex_key(\"\")", "output": "0", "ops": "=="}], "139": [{"input": "extract_singly([(6, 2, 9, 81)])", "output": "[6, 2, 9, 81]", "ops": "=="}, {"input": "extract_singly([(0, ), (0, 8), (0, 2, 4), (0, 3), (1, )])", "output": "[0, 8, 2, 4, 3, 1]", "ops": "=="}, {"input": "extract_singly([(1, 1, 2, 3), (5, 2, 4)])", "output": "[1, 2, 3, 5, 4]", "ops": "=="}, {"input": "extract_singly([])", "output": "[]", "ops": "=="}, {"input": "extract_singly([(10, 22, 23, 1), (2, 22), (1, 20, 23)])", "output": "[10, 22, 23, 1, 2, 20]", "ops": "=="}, {"input": "extract_singly([(10, 10), (22, 23, 21)])", "output": "[10, 22, 23, 21]", "ops": "=="}, {"input": "extract_singly([])", "output": "[]", "ops": "=="}, {"input": "extract_singly([])", "output": "[]", "ops": "=="}, {"input": "extract_singly([(1, 2, 3), (3, 4, 4)])", "output": "[1, 2, 3, 4]", "ops": "=="}], "285": [{"input": "max_sub_array_sum_repeated([4], 17, -120)", "output": "-2147483648", "ops": "=="}, {"input": "max_sub_array_sum_repeated([-1], 0, 0)", "output": "-2147483648", "ops": "=="}, {"input": "max_sub_array_sum_repeated([], 0, 1)", "output": "-2147483648", "ops": "=="}, {"input": "max_sub_array_sum_repeated([1], 0, 1)", "output": "-2147483648", "ops": "=="}, {"input": "max_sub_array_sum_repeated([-1, -2, -3, 4, 2], 3, 3)", "output": "-1", "ops": "=="}, {"input": "max_sub_array_sum_repeated([-2, 0, -3], 3, 2)", "output": "0", "ops": "=="}, {"input": "max_sub_array_sum_repeated([10, 20, 0, -30], 3, 3)", "output": "90", "ops": "=="}], "260": [{"input": "division_elements((4, 3, 19, 2), (6, 2, 4, 9))", "output": "(0, 1, 4, 0)", "ops": "=="}, {"input": "division_elements([13, 3, 26, 17],[1, 11, 5, 15])", "output": "(13, 0, 5, 1)", "ops": "=="}, {"input": "len(division_elements([3, 8, 22, 4, 2, 29, 2, 8, 20, 4, 15], [2, 6, 24, 14]))", "output": "4", "ops": "=="}, {"input": "division_elements((30, 18, 34, 24), (4, 8, 18, 19))", "output": "(7, 2, 1, 1)", "ops": "=="}, {"input": "division_elements((15, 17, 35, 21), (8, 5, 4, 9))", "output": "(1, 3, 8, 2)", "ops": "=="}, {"input": "division_elements((4, 2, 17, 13), (1, 4, 3, 3))", "output": "(4, 0, 5, 4)", "ops": "=="}, {"input": "division_elements((2, 7, 9, 3, 2), (7, 8, 6))", "output": "(0, 0, 1)", "ops": "=="}, {"input": "division_elements((46, 60, 68, 70), (6, 12, 16, 9))", "output": "(7, 5, 4, 7)", "ops": "=="}, {"input": "division_elements((69, 100, 112, 92), (5, 15, 18, 14))", "output": "(13, 6, 6, 6)", "ops": "=="}, {"input": "division_elements((7, 3, 9, 15), (5, 5, 5, 5))", "output": "(1, 0, 1, 3)", "ops": "=="}, {"input": "division_elements((62, 90, 62, 366, 18), (5, 7, 7, 8, 10, 13))", "output": "(12, 12, 8, 45, 1)", "ops": "=="}, {"input": "division_elements((24, 16, 38, 20), (9, 3, 14, 11))", "output": "(2, 5, 2, 1)", "ops": "=="}, {"input": "division_elements((43, 5, 22, 11), (12, 5, 11, 5))", "output": "(3, 1, 2, 2)", "ops": "=="}, {"input": "division_elements((40, 58, 25, 6), (5, 12, 3, 18))", "output": "(8, 4, 8, 0)", "ops": "=="}, {"input": "division_elements((18, 20, 36, 38), (5, 5, 7, 9))", "output": "(3, 4, 5, 4)", "ops": "=="}, {"input": "division_elements((18, 14, 20, 25), (1, 1, 4, 4))", "output": "(18, 14, 5, 6)", "ops": "=="}], "554": [{"input": "common([1, 4], [2350])", "output": "[]", "ops": "=="}, {"input": "common([], [1, 2, 3])", "output": "[]", "ops": "=="}, {"input": "common([-1, 3, 2, 8], [5, 4, 3])", "output": "[3]", "ops": "=="}, {"input": "common([1, 2, 6], [-1, 3, 7, 2])", "output": "[2]", "ops": "=="}, {"input": "common([],[])", "output": "[]", "ops": "=="}, {"input": "common([], [1, 3, 4, 5, 7, 34, 23, 2, 6, 8])", "output": "[]", "ops": "=="}, {"input": "common([1], [4])", "output": "[]", "ops": "=="}, {"input": "common([], [42, 0, 42])", "output": "[]", "ops": "=="}, {"input": "common([], [])", "output": "[]", "ops": "=="}, {"input": "common([], [4, 3])", "output": "[]", "ops": "=="}, {"input": "common([], [4, 2])", "output": "[]", "ops": "=="}], "1": [{"input": "similar_elements((1, 2, 2, 3, 4), (20, 22, 20, 22, 24, 20, 24, 22))", "output": "()", "ops": "=="}, {"input": "similar_elements((1, 2, 2, 3, 4), (13, 23, 12, 13, 23, 10, 14, 11))", "output": "()", "ops": "=="}, {"input": "similar_elements((11, 13, 14, 15), (17, 19, 18, 20))", "output": "()", "ops": "=="}, {"input": "similar_elements((21, 22, 22, 21), (2, 1, 1, 6))", "output": "()", "ops": "=="}, {"input": "similar_elements((3, 4, 16, 9, 1, 2, 3), (8, 4, 3, 2, 6, 7, 2))", "output": "(2, 3, 4)", "ops": "=="}, {"input": "similar_elements((1, 12, 10, 11, 18), (4, 18, 12, 11))", "output": "(18, 11, 12)", "ops": "=="}, {"input": "similar_elements((11, 12, 14, 13), (1, 14, 13))", "output": "(13, 14)", "ops": "=="}, {"input": "similar_elements((1, 1), (1, 3, 8))", "output": "(1,)", "ops": "=="}, {"input": "similar_elements((1, 2, 1), (1, 5, 6))", "output": "(1,)", "ops": "=="}], "11": [{"input": "sort_matrix([[3, 4, 5], [5, 8, 8], [3, 4, 1]])", "output": "[[3, 4, 1], [3, 4, 5], [5, 8, 8]]", "ops": "=="}], "375": [{"input": "remove_replica(())", "output": "()", "ops": "=="}, {"input": "remove_replica((4, 2, 1))", "output": "(4, 2, 1)", "ops": "=="}, {"input": "remove_replica([])", "output": "()", "ops": "=="}, {"input": "remove_replica([])", "output": "()", "ops": "=="}, {"input": "remove_replica(('', 1, 4, 5, 2, 3, 9, 9, '', '', ''))", "output": "('', 1, 4, 5, 2, 3, 9, 'MSP', 'MSP', 'MSP', 'MSP')", "ops": "=="}, {"input": "remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 9))", "output": "(1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 9)", "ops": "=="}, {"input": "remove_replica((2, 3, 4, 4, 5, 6, 6, 9, 9, 7))", "output": "(2, 3, 4, 'MSP', 5, 6, 'MSP', 9, 'MSP', 7)", "ops": "=="}, {"input": "remove_replica((3, 3, 5, 4, 6, 6, 8, 9, 8, 8))", "output": "(3, 'MSP', 5, 4, 6, 'MSP', 8, 9, 'MSP', 'MSP')", "ops": "=="}, {"input": "remove_replica((1, 1, 4, 4, 4, 5, 5, 5, 5, 3))", "output": "(1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 'MSP', 'MSP', 3)", "ops": "=="}, {"input": "remove_replica(('', '', '', None, 1, 4, 5, 4, 3, 3, 4))", "output": "('', 'MSP', 'MSP', None, 1, 4, 5, 'MSP', 3, 'MSP', 'MSP')", "ops": "=="}, {"input": "remove_replica((3, 4))", "output": "(3, 4)", "ops": "=="}, {"input": "remove_replica(range(4, 1, -1))", "output": "(4, 3, 2)", "ops": "=="}, {"input": "remove_replica(list())", "output": "()", "ops": "=="}, {"input": "remove_replica([])", "output": "()", "ops": "=="}], "430": [{"input": "common_element(['a', '1', 'c'], ['a', 'b', 'c'])", "output": "True", "ops": "=="}, {"input": "common_element(list(range(3)), 'z')", "output": "None", "ops": "=="}, {"input": "common_element(('a', 'b', 'c'), ('d', 'b', 'e'))", "output": "True", "ops": "=="}, {"input": "common_element({'a': 1},  {'a': 0, 'b': 1, 'c': 0, 'c': 1})", "output": "True", "ops": "=="}, {"input": "common_element(range(9), [1, 0, 1, 2, 3, 4, 5, 9, 8, 6, 7, 8, -1])", "output": "True", "ops": "=="}, {"input": "common_element([], [\"c\"])", "output": "None", "ops": "=="}, {"input": "common_element({'a': 1, 'b':2, 'c': 2}, ['c', 'b', 'z'])", "output": "True", "ops": "=="}, {"input": "common_element({'one': 'these', 'two': 'value','six': 'characters'}, {0: 'a', 3: 'r'})", "output": "None", "ops": "=="}, {"input": "common_element(['a', 'b', 'c'], ['a', 'b'])", "output": "True", "ops": "=="}, {"input": "common_element(range(0, 10000), [])", "output": "None", "ops": "=="}], "155": [{"input": "tuple_int_str(())", "output": "()", "ops": "=="}, {"input": "tuple_int_str([])", "output": "()", "ops": "=="}, {"input": "tuple_int_str([])", "output": "()", "ops": "=="}], "239": [{"input": "replace_list(['one', '1', '2', '3', '4'], [True, True, False, True, True])", "output": "['one', '1', '2', '3', True, True, False, True, True]", "ops": "=="}, {"input": "replace_list(['apples', 'oranges', 'grapes'], [])", "output": "['apples', 'oranges']", "ops": "=="}, {"input": "replace_list(['red'], [])", "output": "[]", "ops": "=="}, {"input": "replace_list(['a', 'z', None], [10, 10])", "output": "['a', 'z', 10, 10]", "ops": "=="}, {"input": "replace_list([], [])", "output": "[]", "ops": "=="}, {"input": "replace_list(['A', 'blue', 'A', 'blue'], ['red', 'yellow'])", "output": "['A', 'blue', 'A', 'red', 'yellow']", "ops": "=="}, {"input": "replace_list(['A', 'B', 'Ab', 'A', 'BabA'], \"Aab\")", "output": "['A', 'B', 'Ab', 'A', 'A', 'a', 'b']", "ops": "=="}, {"input": "replace_list(['green'], [1])", "output": "[1]", "ops": "=="}, {"input": "replace_list(['a', 'b', 'c', 'd'], ['a2', 'b3', 'b4'])", "output": "['a', 'b', 'c', 'a2', 'b3', 'b4']", "ops": "=="}, {"input": "replace_list([(2, 1), (3, 5)], [(4, 4)])", "output": "[(2, 1), (4, 4)]", "ops": "=="}, {"input": "replace_list(['abc', 'bca', 'cab'], [\"cab\", 'db'])", "output": "['abc', 'bca', 'cab', 'db']", "ops": "=="}], "399": [{"input": "extract_freq([])", "output": "0", "ops": "=="}, {"input": "extract_freq([])", "output": "0", "ops": "=="}, {"input": "extract_freq(list(\"absraabbraccfrftdvh\"))", "output": "10", "ops": "=="}, {"input": "extract_freq([])", "output": "0", "ops": "=="}, {"input": "extract_freq([])", "output": "0", "ops": "=="}, {"input": "extract_freq(['a', 'b', 'c'])", "output": "3", "ops": "=="}, {"input": "extract_freq([])", "output": "0", "ops": "=="}, {"input": "extract_freq([])", "output": "0", "ops": "=="}, {"input": "extract_freq(zip(range(5), range(8, 12)))", "output": "4", "ops": "=="}, {"input": "extract_freq(zip(range(5), range(8, 12), range(0, 1)))", "output": "1", "ops": "=="}], "344": [{"input": "diff_consecutivenums([1, 2, 3, 4])", "output": "[1, 1, 1]", "ops": "=="}, {"input": "diff_consecutivenums([0, 3, 4, 0, 4, 3, 1, 2, 3, 5, 5])", "output": "[3, 1, -4, 4, -1, -2, 1, 1, 2, 0]", "ops": "=="}, {"input": "diff_consecutivenums([0, 1, 2])", "output": "[1, 1]", "ops": "=="}, {"input": "diff_consecutivenums([0, 1, 1, 1, 1, 2])", "output": "[1, 0, 0, 0, 1]", "ops": "=="}, {"input": "diff_consecutivenums([0, 9, 8, 9, 8, 4, 5, 4, 5, 7, 0])", "output": "[9, -1, 1, -1, -4, 1, -1, 1, 2, -7]", "ops": "=="}, {"input": "diff_consecutivenums([6, 4, 5, 4])", "output": "[-2, 1, -1]", "ops": "=="}, {"input": "diff_consecutivenums([1, 2, 3, 4, 5, 6, 6, 7, 8, 9, -1])", "output": "[1, 1, 1, 1, 1, 0, 1, 1, 1, -10]", "ops": "=="}, {"input": "diff_consecutivenums([1, 2, 3, 4, 5, 6, 1, 7, 8, 9, -1])", "output": "[1, 1, 1, 1, 1, -5, 6, 1, 1, -10]", "ops": "=="}, {"input": "diff_consecutivenums([-12356784348938287162100674182744366702904,1000000000000000002875789478203125])", "output": "[12356785348938287162100677058533844906029]", "ops": "=="}, {"input": "diff_consecutivenums([0, 1, 4, 3, 6, 7])", "output": "[1, 3, -1, 3, 1]", "ops": "=="}, {"input": "diff_consecutivenums([0, 1, 2])", "output": "[1, 1]", "ops": "=="}, {"input": "diff_consecutivenums([0.5, 1, 2, 3, 4, 5, 6, 0.2, 1.3])", "output": "[0.5, 1, 1, 1, 1, 1, -5.8, 1.1]", "ops": "=="}, {"input": "diff_consecutivenums([0, 1, 2, 2, 3, 0, 1, 1])", "output": "[1, 1, 0, 1, -3, 1, 0]", "ops": "=="}, {"input": "diff_consecutivenums([])", "output": "[]", "ops": "=="}, {"input": "diff_consecutivenums([0, 0, 0])", "output": "[0, 0]", "ops": "=="}], "418": [{"input": "round_and_sum([])", "output": "0", "ops": "=="}, {"input": "round_and_sum([2.4, -4.0])", "output": "-4", "ops": "=="}, {"input": "round_and_sum([1e16, 1.11])", "output": "20000000000000002", "ops": "=="}, {"input": "round_and_sum([-1e15, -1.14])", "output": "-2000000000000002", "ops": "=="}, {"input": "round_and_sum([-100.0, -2.3, 23.4])", "output": "-237", "ops": "=="}, {"input": "round_and_sum([])", "output": "0", "ops": "=="}, {"input": "round_and_sum([0])", "output": "0", "ops": "=="}, {"input": "round_and_sum([])", "output": "0", "ops": "=="}, {"input": "round_and_sum([0] * 10)", "output": "0", "ops": "=="}, {"input": "round_and_sum(range(0, 21, 5))", "output": "250", "ops": "=="}], "536": [{"input": "sort_even([])", "output": "[]", "ops": "=="}, {"input": "sort_even([5, 7, -5, 3, -6])", "output": "[-6, 7, -5, 3, 5]", "ops": "=="}, {"input": "sort_even([])", "output": "[]", "ops": "=="}, {"input": "sort_even([])", "output": "[]", "ops": "=="}], "559": [{"input": "vowels_count(['Ahem', 'Bye', 'Ache', 'Seien', 'eh', 'eiH', 'EINS', 'iYei'])", "output": "0", "ops": "=="}, {"input": "vowels_count(['a', 'c', 'e'])", "output": "2", "ops": "=="}, {"input": "vowels_count(('', 'a', 'ab'))", "output": "2", "ops": "=="}, {"input": "vowels_count('ABB')", "output": "1", "ops": "=="}, {"input": "vowels_count(' ')", "output": "0", "ops": "=="}, {"input": "vowels_count(['kBYE', 'BACEDA'])", "output": "0", "ops": "=="}], "64": [{"input": "recursive_list_sum([])", "output": "0", "ops": "=="}, {"input": "recursive_list_sum(())", "output": "0", "ops": "=="}, {"input": "recursive_list_sum([])", "output": "0", "ops": "=="}, {"input": "recursive_list_sum([])", "output": "0", "ops": "=="}, {"input": "recursive_list_sum([4, 5, 10, 13])", "output": "32", "ops": "=="}, {"input": "recursive_list_sum([1] * 10)", "output": "10", "ops": "=="}], "120": [{"input": "check_triplet([1,7,6,4,10,9, 1], 7, 8, 3)", "output": "False", "ops": "=="}, {"input": "check_triplet([9], 3, 3, 3)", "output": "False", "ops": "=="}], "630": [{"input": "can_arrange(range(9))", "output": "-1", "ops": "=="}, {"input": "can_arrange([0])", "output": "-1", "ops": "=="}, {"input": "can_arrange(range(5))", "output": "-1", "ops": "=="}, {"input": "can_arrange(range(2))", "output": "-1", "ops": "=="}, {"input": "can_arrange(range(1))", "output": "-1", "ops": "=="}, {"input": "can_arrange(list())", "output": "-1", "ops": "=="}, {"input": "can_arrange(range(0))", "output": "-1", "ops": "=="}, {"input": "can_arrange(range(8))", "output": "-1", "ops": "=="}], "40": [{"input": "filter_evennumbers([])", "output": "[]", "ops": "=="}, {"input": "filter_evennumbers([])", "output": "[]", "ops": "=="}, {"input": "filter_evennumbers([0, 8, 3, 50, 9, 6, 781, 5, 5])", "output": "[0, 8, 50, 6]", "ops": "=="}, {"input": "filter_evennumbers([])", "output": "[]", "ops": "=="}, {"input": "filter_evennumbers([0])", "output": "[0]", "ops": "=="}, {"input": "filter_evennumbers([12])", "output": "[12]", "ops": "=="}, {"input": "filter_evennumbers([0, 5])", "output": "[0]", "ops": "=="}, {"input": "filter_evennumbers([-21, 12, 0, -1])", "output": "[12, 0]", "ops": "=="}, {"input": "filter_evennumbers([0, 1, -100, -1, 50, -1000, -1234.1234, -34567.1234, -345670.12358, 34567])", "output": "[0, -100, 50, -1000]", "ops": "=="}, {"input": "filter_evennumbers(list(range(10)))", "output": "[0, 2, 4, 6, 8]", "ops": "=="}, {"input": "filter_evennumbers(range(100, 0, -2))", "output": "[100, 98, 96, 94, 92, 90, 88, 86, 84, 82, 80, 78, 76, 74, 72, 70, 68, 66, 64, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2]", "ops": "=="}, {"input": "filter_evennumbers([0])", "output": "[0]", "ops": "=="}, {"input": "filter_evennumbers([-1])", "output": "[]", "ops": "=="}, {"input": "filter_evennumbers([0, 1, 5, 6])", "output": "[0, 6]", "ops": "=="}], "300": [{"input": "dict_depth({})", "output": "1", "ops": "=="}, {"input": "dict_depth(False)", "output": "0", "ops": "=="}, {"input": "dict_depth(tuple(x[0] for x in [(5, 6, 8)]))", "output": "0", "ops": "=="}, {"input": "dict_depth(map(abs, range(6)))", "output": "0", "ops": "=="}, {"input": "dict_depth([1])", "output": "0", "ops": "=="}, {"input": "dict_depth(set([1, 2, 3]))", "output": "0", "ops": "=="}, {"input": "dict_depth([])", "output": "0", "ops": "=="}, {"input": "dict_depth(set((1,2,3)))", "output": "0", "ops": "=="}, {"input": "dict_depth('this is string')", "output": "0", "ops": "=="}, {"input": "dict_depth([])", "output": "0", "ops": "=="}], "339": [{"input": "sum_three_smallest_nums([])", "output": "0", "ops": "=="}, {"input": "sum_three_smallest_nums([2, 2, 2, 1, 1])", "output": "4", "ops": "=="}, {"input": "sum_three_smallest_nums([31, 2, 11, 4, 5])", "output": "11", "ops": "=="}, {"input": "sum_three_smallest_nums([0] * 100)", "output": "0", "ops": "=="}, {"input": "sum_three_smallest_nums([0, 1, 3, 2, 1, 4, 4, 5, 6])", "output": "4", "ops": "=="}, {"input": "sum_three_smallest_nums([20, 0, 50, 60, 0, 0, 0])", "output": "130", "ops": "=="}, {"input": "sum_three_smallest_nums([100, -100, 100, -100, 50, 63, -10, -1, 93, -1])", "output": "206", "ops": "=="}, {"input": "sum_three_smallest_nums([10, 8, 0, 10, 7, 1])", "output": "16", "ops": "=="}, {"input": "sum_three_smallest_nums([0, 1, 3, 4, 5, 60])", "output": "8", "ops": "=="}, {"input": "sum_three_smallest_nums([0, 1, 2])", "output": "3", "ops": "=="}, {"input": "sum_three_smallest_nums([])", "output": "0", "ops": "=="}, {"input": "sum_three_smallest_nums([1, 2, 3, 2, 3, 4, 3, 5, 2, 4, 1, 2, 0, 1])", "output": "3", "ops": "=="}, {"input": "sum_three_smallest_nums([])", "output": "0", "ops": "=="}, {"input": "sum_three_smallest_nums([1, 1, 1, 1])", "output": "3", "ops": "=="}, {"input": "sum_three_smallest_nums([])", "output": "0", "ops": "=="}], "383": [{"input": "frequency_Of_Smallest(7, [3, 3, 6, 7, 4, 9, 8, 3])", "output": "2", "ops": "=="}, {"input": "frequency_Of_Smallest(7, [3, 3, 6, 7, 4, 9, 5])", "output": "2", "ops": "=="}, {"input": "frequency_Of_Smallest(7, [3, 2, 10, 12, 15, 18, 21, 8])", "output": "1", "ops": "=="}, {"input": "frequency_Of_Smallest(7, [3, 2, 3, 5, 5, 4, 5, 6, 5])", "output": "1", "ops": "=="}, {"input": "frequency_Of_Smallest(7, [2, 3, 4, 5, 3, 3, 4, 7, 7, 3, 4])", "output": "1", "ops": "=="}, {"input": "frequency_Of_Smallest(7, [3, 3, 2, 5, 6, 7, 9])", "output": "1", "ops": "=="}, {"input": "frequency_Of_Smallest(7, [2, 3, 2, 6, 3, 2, 9, 6, 7, 7, 9])", "output": "3", "ops": "=="}, {"input": "frequency_Of_Smallest(3, [0, 3, 4, 2, 5, 8])", "output": "1", "ops": "=="}, {"input": "frequency_Of_Smallest(7, [11, 15, 21, 28, 37, 55, 66, 67, 88, 96])", "output": "1", "ops": "=="}, {"input": "frequency_Of_Smallest(5, [2, 3, 4, 1, 5, 1, 2])", "output": "1", "ops": "=="}, {"input": "frequency_Of_Smallest(7, [3, 3, 9, 8, 3, 6, 9])", "output": "3", "ops": "=="}, {"input": "frequency_Of_Smallest(5, [1, 2, 4, 3, 5, 2, 3, 4])", "output": "1", "ops": "=="}], "567": [{"input": "will_it_fly([8, 9], 4)", "output": "False", "ops": "=="}, {"input": "will_it_fly([5, 4, 4, 2, 5], 1)", "output": "False", "ops": "=="}, {"input": "will_it_fly([1], 8)", "output": "True", "ops": "=="}, {"input": "will_it_fly([6], 1)", "output": "False", "ops": "=="}, {"input": "will_it_fly([], 6)", "output": "True", "ops": "=="}, {"input": "will_it_fly([], 11)", "output": "True", "ops": "=="}, {"input": "will_it_fly([3, 2, 1], 9)", "output": "False", "ops": "=="}, {"input": "will_it_fly([1, 2, 3, 4], 5)", "output": "False", "ops": "=="}, {"input": "will_it_fly([56, 59, 58, 57, 58, 57, 60, 59, 58, 50], 8)", "output": "False", "ops": "=="}, {"input": "will_it_fly(range(1,10), 0)", "output": "False", "ops": "=="}], "604": [{"input": "move_one_ball([1])", "output": "True", "ops": "=="}, {"input": "move_one_ball([4])", "output": "True", "ops": "=="}, {"input": "move_one_ball([1, 2, 3, 4, 5, 6])", "output": "True", "ops": "=="}, {"input": "move_one_ball(list(range(7)))", "output": "True", "ops": "=="}, {"input": "move_one_ball([0])", "output": "True", "ops": "=="}, {"input": "move_one_ball([1])", "output": "True", "ops": "=="}, {"input": "move_one_ball([1])", "output": "True", "ops": "=="}, {"input": "move_one_ball([0])", "output": "True", "ops": "=="}, {"input": "move_one_ball([3, 2, 1])", "output": "False", "ops": "=="}, {"input": "move_one_ball(list(range(10)))", "output": "True", "ops": "=="}, {"input": "move_one_ball([2, 1, 3, 5, 10])", "output": "False", "ops": "=="}], "261": [{"input": "split_two_parts([2, 'f', 'T', None, 'z', 'C', 'B', 10, None], 5)", "output": "([2, 'f', 'T', None, 'z'], ['C', 'B', 10, None])", "ops": "=="}, {"input": "split_two_parts(['P', 'i', 'T', 'C', 'S'], 6)", "output": "(['P', 'i', 'T', 'C', 'S'], [])", "ops": "=="}, {"input": "split_two_parts([], 1)", "output": "([], [])", "ops": "=="}, {"input": "split_two_parts([0, 1, 1, 3, 5, 3, 2], 5)", "output": "([0, 1, 1, 3, 5], [3, 2])", "ops": "=="}, {"input": "split_two_parts([1, 0, 3], 5)", "output": "([1, 0, 3], [])", "ops": "=="}, {"input": "split_two_parts([0, 0], 5)", "output": "([0, 0], [])", "ops": "=="}, {"input": "split_two_parts(list('pqtt'), 3)", "output": "(['p', 'q', 't'], ['t'])", "ops": "=="}, {"input": "split_two_parts(list(range(5)), 0)", "output": "([], [0, 1, 2, 3, 4])", "ops": "=="}], "599": [{"input": "unique_digits([420, 1, 346, 10])", "output": "[1]", "ops": "=="}, {"input": "unique_digits([1033, 50420])", "output": "[]", "ops": "=="}, {"input": "unique_digits([0, 93])", "output": "[93]", "ops": "=="}, {"input": "unique_digits([12, 10, 3])", "output": "[3]", "ops": "=="}, {"input": "unique_digits([0, 10, 3, 4, 2, 9, 4, 12, 32, 0])", "output": "[3, 9]", "ops": "=="}, {"input": "unique_digits([2, 32, 213])", "output": "[]", "ops": "=="}, {"input": "unique_digits('10101')", "output": "['1', '1', '1']", "ops": "=="}, {"input": "unique_digits([1, 1, 2, 1, 1, 3, 2, 0])", "output": "[1, 1, 1, 1, 3]", "ops": "=="}, {"input": "unique_digits([235, 122, 105])", "output": "[]", "ops": "=="}, {"input": "unique_digits([2341, 12, 2432])", "output": "[]", "ops": "=="}, {"input": "unique_digits([210, 213])", "output": "[]", "ops": "=="}, {"input": "unique_digits([299, 12])", "output": "[]", "ops": "=="}, {"input": "unique_digits([103, 1215, 2345, 8994])", "output": "[]", "ops": "=="}], "188": [{"input": "first_Missing_Positive([1], -8)", "output": "1", "ops": "=="}], "425": [{"input": "filter_oddnumbers([0, 6, 14, 18])", "output": "[]", "ops": "=="}, {"input": "filter_oddnumbers([2])", "output": "[]", "ops": "=="}, {"input": "filter_oddnumbers([-1])", "output": "[-1]", "ops": "=="}, {"input": "filter_oddnumbers([0])", "output": "[]", "ops": "=="}, {"input": "filter_oddnumbers([])", "output": "[]", "ops": "=="}, {"input": "filter_oddnumbers(range(30))", "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]", "ops": "=="}, {"input": "filter_oddnumbers([0, 2, 1, 3, 9])", "output": "[1, 3, 9]", "ops": "=="}, {"input": "filter_oddnumbers([2, 3, 8, 12, 21, 909])", "output": "[3, 21, 909]", "ops": "=="}, {"input": "filter_oddnumbers([])", "output": "[]", "ops": "=="}, {"input": "filter_oddnumbers([30, 50, 63, 67, 50, 83, 79, 68])", "output": "[63, 67, 83, 79]", "ops": "=="}], "458": [{"input": "remove_uppercase('eTe')", "output": "'ee'", "ops": "=="}, {"input": "remove_uppercase('the1^oV3lMeJ^&uW')", "output": "'the1^o3le^&u'", "ops": "=="}, {"input": "remove_uppercase(\"\")", "output": "''", "ops": "=="}, {"input": "remove_uppercase('tHISYBsseXdAsEtaGzItDonM')", "output": "'tssedstazton'", "ops": "=="}, {"input": "remove_uppercase(u\"\u00da\")", "output": "'\u00da'", "ops": "=="}], "505": [{"input": "parse_nested_parens('(())(())(())(()())(()')", "output": "[2]", "ops": "=="}, {"input": "parse_nested_parens(\"(()(()))\")", "output": "[3]", "ops": "=="}, {"input": "parse_nested_parens(u'() () ()\\u2019() ()\\u2019, () (),. \\u2013 ')", "output": "[1, 1, 1, 1, 1, 1, 0]", "ops": "=="}, {"input": "parse_nested_parens(')((((((()))))))(()())(())()')", "output": "[6]", "ops": "=="}, {"input": "parse_nested_parens(')((()(()(()((())(()(()()(()(()(()((())(()(()()(((())((())))')", "output": "[17]", "ops": "=="}], "196": [{"input": "find_exponentio(range(0, 4), range(0,7, 2))", "output": "(1, 1, 16, 729)", "ops": "=="}, {"input": "find_exponentio(tuple(), tuple())", "output": "()", "ops": "=="}, {"input": "find_exponentio((), ())", "output": "()", "ops": "=="}, {"input": "find_exponentio(range(1, 13, 2), range(2, 9, 2))", "output": "(1, 81, 15625, 5764801)", "ops": "=="}, {"input": "find_exponentio(range(15, 25), range(6, 11))", "output": "(11390625, 268435456, 6975757441, 198359290368, 6131066257801)", "ops": "=="}], "250": [{"input": "insert_element(['happy','sad'], 'laugh')", "output": "['laugh', 'happy', 'laugh', 'sad']", "ops": "=="}, {"input": "insert_element(['red', 'green', 'gold and yellow color'], 'blue')", "output": "['blue', 'red', 'blue', 'green', 'blue', 'gold and yellow color']", "ops": "=="}, {"input": "insert_element(['happy','sad'], 'laugh')", "output": "['laugh', 'happy', 'laugh', 'sad']", "ops": "=="}, {"input": "insert_element(['green'], 'bright')", "output": "['bright', 'green']", "ops": "=="}, {"input": "insert_element(['programming'], 'universe')", "output": "['universe', 'programming']", "ops": "=="}, {"input": "insert_element(['happy','sad'], 'laugh')", "output": "['laugh', 'happy', 'laugh', 'sad']", "ops": "=="}, {"input": "insert_element([], None)", "output": "[]", "ops": "=="}, {"input": "insert_element(['happy','sad'], 'laugh')", "output": "['laugh', 'happy', 'laugh', 'sad']", "ops": "=="}, {"input": "insert_element(['bang', 'bang1'],'mooh')", "output": "['mooh', 'bang', 'mooh', 'bang1']", "ops": "=="}, {"input": "insert_element(['happy','sad'], 'laugh')", "output": "['laugh', 'happy', 'laugh', 'sad']", "ops": "=="}, {"input": "insert_element(['happy', 'programmer'], 'learning')", "output": "['learning', 'happy', 'learning', 'programmer']", "ops": "=="}, {"input": "insert_element(['blood', 'Ado'], 72)", "output": "[72, 'blood', 72, 'Ado']", "ops": "=="}, {"input": "insert_element(['blood', 'Ado'], 75)", "output": "[75, 'blood', 75, 'Ado']", "ops": "=="}, {"input": "insert_element(['happy','sad'], 'laugh')", "output": "['laugh', 'happy', 'laugh', 'sad']", "ops": "=="}, {"input": "insert_element(['fearsome', 'good'], ['joy', 'feet'])", "output": "[['joy', 'feet'], 'fearsome', ['joy', 'feet'], 'good']", "ops": "=="}, {"input": "insert_element(['happy','sad'], 'laugh')", "output": "['laugh', 'happy', 'laugh', 'sad']", "ops": "=="}, {"input": "insert_element([], 'unhappy')", "output": "[]", "ops": "=="}, {"input": "insert_element(['happy','sad'], 'laugh')", "output": "['laugh', 'happy', 'laugh', 'sad']", "ops": "=="}, {"input": "insert_element(['a', 'b', 'c'], 'programming')", "output": "['programming', 'a', 'programming', 'b', 'programming', 'c']", "ops": "=="}, {"input": "insert_element(['happy','sad'], 'laugh')", "output": "['laugh', 'happy', 'laugh', 'sad']", "ops": "=="}, {"input": "insert_element(['cheese', 'crackers'], 'program')", "output": "['program', 'cheese', 'program', 'crackers']", "ops": "=="}, {"input": "insert_element(['happy','sad'], 'laugh')", "output": "['laugh', 'happy', 'laugh', 'sad']", "ops": "=="}, {"input": "insert_element([\"he's up\",'so what his say was the color he came out looking for'], 'laugh')", "output": "['laugh', \"he's up\", 'laugh', 'so what his say was the color he came out looking for']", "ops": "=="}], "381": [{"input": "find_rotation_count([0, 1, 0])", "output": "0", "ops": "=="}, {"input": "find_rotation_count([-90, 12, 13])", "output": "0", "ops": "=="}, {"input": "find_rotation_count([1, 0, 1, 2])", "output": "0", "ops": "=="}, {"input": "find_rotation_count([2, 5, 6, 8, 10, 9])", "output": "0", "ops": "=="}, {"input": "find_rotation_count([2,7,4,5,9])", "output": "0", "ops": "=="}, {"input": "find_rotation_count([3,2,1,3,6])", "output": "0", "ops": "=="}, {"input": "find_rotation_count([5,1,1,1,1])", "output": "2", "ops": "=="}, {"input": "find_rotation_count([3])", "output": "0", "ops": "=="}, {"input": "find_rotation_count([[2, 5], [6,8]]*8)", "output": "0", "ops": "=="}, {"input": "find_rotation_count([6.0544856799181744, 2.90125928651858174, -7.3420997924962422, 1.8857113450142487, 1.14747970194050666])", "output": "2", "ops": "=="}, {"input": "find_rotation_count([6.03, 2.07, 0.845, 0.79, 0.93, 9.848, 6.578])", "output": "0", "ops": "=="}, {"input": "find_rotation_count([])", "output": "-1", "ops": "=="}, {"input": "find_rotation_count([2, 4, 5, 8, 9])", "output": "0", "ops": "=="}, {"input": "find_rotation_count([])", "output": "-1", "ops": "=="}, {"input": "find_rotation_count([2, 5, 6, 8, 9, 10, 1])", "output": "6", "ops": "=="}, {"input": "find_rotation_count([1, 2, 5, 6, 9, 8])", "output": "0", "ops": "=="}, {"input": "find_rotation_count([0, 1, 3, 2, 6, 7, 5, 4])", "output": "0", "ops": "=="}, {"input": "find_rotation_count([])", "output": "-1", "ops": "=="}], "192": [{"input": "remove_tuple((\"aaa\", \"bbb\", \"ddd\", \"aab\", \"ccc\", \"ff\"))", "output": "('bbb', 'aab', 'ccc', 'ff', 'aaa', 'ddd')", "ops": "=="}, {"input": "remove_tuple(['a', 3, 'c', 1, 2, 2, 2, 81])", "output": "(1, 2, 3, 81, 'c', 'a')", "ops": "=="}, {"input": "remove_tuple((1, 2, 4, 1, 2, 4, 2, 1, 1))", "output": "(1, 2, 4)", "ops": "=="}, {"input": "remove_tuple(()) is not None", "output": "True", "ops": "=="}, {"input": "remove_tuple([])", "output": "()", "ops": "=="}, {"input": "remove_tuple(())", "output": "()", "ops": "=="}, {"input": "remove_tuple((1, 3, 3, 4, 2, 4, 4, 2))", "output": "(1, 2, 3, 4)", "ops": "=="}, {"input": "remove_tuple(set([(2, 3, 4, 4), (3, 4, 5, 2), (3, 4, 5, 1), (1, 4, 5, 2)]))", "output": "((3, 4, 5, 1), (3, 4, 5, 2), (1, 4, 5, 2), (2, 3, 4, 4))", "ops": "=="}], "306": [{"input": "colon_tuplex(('HOW', 5, ['WH'], True), 2, 50)", "output": "('HOW', 5, ['WH', 50], True)", "ops": "=="}, {"input": "colon_tuplex(('HOW', 5, [('LOL', 1, 'NI')], True), 2, 50)", "output": "('HOW', 5, [('LOL', 1, 'NI'), 50], True)", "ops": "=="}, {"input": "colon_tuplex(('HELLO', 5, [], False), 2, 50)", "output": "('HELLO', 5, [50], False)", "ops": "=="}, {"input": "colon_tuplex(('HELLO', 5, [], True), 2, 2500)", "output": "('HELLO', 5, [2500], True)", "ops": "=="}, {"input": "colon_tuplex(('HELLO', 4, [], False), 2, 400)", "output": "('HELLO', 4, [400], False)", "ops": "=="}, {"input": "colon_tuplex(('HELLO', 4, [], False), 2, 50)", "output": "('HELLO', 4, [50], False)", "ops": "=="}], "592": [{"input": "multiply(9, 5)", "output": "45", "ops": "=="}, {"input": "multiply(1, 2)", "output": "2", "ops": "=="}, {"input": "multiply(0, 2)", "output": "0", "ops": "=="}, {"input": "multiply(-9, 12)", "output": "2", "ops": "=="}, {"input": "multiply(10, 20)", "output": "0", "ops": "=="}, {"input": "multiply(3, 2)", "output": "6", "ops": "=="}, {"input": "multiply(-28, 1)", "output": "2", "ops": "=="}, {"input": "multiply(17, -15)", "output": "35", "ops": "=="}, {"input": "multiply(17, 0)", "output": "0", "ops": "=="}, {"input": "multiply(1, 7)", "output": "7", "ops": "=="}, {"input": "multiply(290, 0)", "output": "0", "ops": "=="}, {"input": "multiply(15, 8)", "output": "40", "ops": "=="}, {"input": "multiply(21, 2)", "output": "2", "ops": "=="}, {"input": "multiply(1, 1)", "output": "1", "ops": "=="}, {"input": "multiply(-71, -29)", "output": "9", "ops": "=="}, {"input": "multiply(3, -1)", "output": "27", "ops": "=="}, {"input": "multiply(1388461507, -1274125)", "output": "35", "ops": "=="}, {"input": "multiply(2744191, 6206)", "output": "6", "ops": "=="}, {"input": "multiply(9082527866, 4194)", "output": "24", "ops": "=="}, {"input": "multiply(27071, -1)", "output": "9", "ops": "=="}, {"input": "multiply(-1, 29)", "output": "81", "ops": "=="}, {"input": "multiply(-5, 3)", "output": "15", "ops": "=="}, {"input": "multiply(181, 135)", "output": "5", "ops": "=="}, {"input": "multiply(76, 562968368)", "output": "48", "ops": "=="}, {"input": "multiply(-15, 5)", "output": "25", "ops": "=="}, {"input": "multiply(-1, 0)", "output": "0", "ops": "=="}, {"input": "multiply(-1, 4)", "output": "36", "ops": "=="}], "272": [{"input": "substract_elements((1, 2), (10, 18))", "output": "(-9, -16)", "ops": "=="}, {"input": "substract_elements((3, 17, 3), (24, 47, 12))", "output": "(-21, -30, -9)", "ops": "=="}, {"input": "substract_elements((1, 2, 3), (22, 5, 15))", "output": "(-21, -3, -12)", "ops": "=="}, {"input": "substract_elements((1, 3, 4), (21, 15, 23))", "output": "(-20, -12, -19)", "ops": "=="}, {"input": "substract_elements((0, 0), (1, 1))", "output": "(-1, -1)", "ops": "=="}, {"input": "substract_elements((3, 121, 2, 3), (-1, 2, 3, -4))", "output": "(4, 119, -1, 7)", "ops": "=="}, {"input": "substract_elements((1, 9, 3), (23, 10, 4))", "output": "(-22, -1, -1)", "ops": "=="}, {"input": "substract_elements((4, 15, 24), (6, 17, 27))", "output": "(-2, -2, -3)", "ops": "=="}, {"input": "substract_elements((1, 4, 7), (5, 4, 20))", "output": "(-4, 0, -13)", "ops": "=="}, {"input": "substract_elements((0, 6, 2), (5, 4, 10))", "output": "(-5, 2, -8)", "ops": "=="}, {"input": "substract_elements((0, 1, 8), (8, 10, 2))", "output": "(-8, -9, 6)", "ops": "=="}, {"input": "substract_elements((1, 3, 4), (3, 9, 24))", "output": "(-2, -6, -20)", "ops": "=="}, {"input": "substract_elements((5, 3, 4), (7, 8, 19)) == 12", "output": "False", "ops": "=="}], "277": [{"input": "count_first_elements((10, 5, 7, 10, (2, 3), (4, 7)))", "output": "4", "ops": "=="}, {"input": "count_first_elements(((4, 6), (1, 1), (2, 2), (3, 3, 4)))", "output": "0", "ops": "=="}, {"input": "count_first_elements(('c', 'b', 'a', 'b'))", "output": "3", "ops": "=="}, {"input": "count_first_elements((9, 8, (4, 5), 6, (None, 2, 3), 10))", "output": "2", "ops": "=="}, {"input": "count_first_elements((7, (3, 4), 8, (9, 10), 6))", "output": "1", "ops": "=="}, {"input": "count_first_elements((10,))", "output": "0", "ops": "=="}, {"input": "count_first_elements((1, 2, 30, 45, 10))", "output": "4", "ops": "=="}], "289": [{"input": "max_length([[1,2,3]])", "output": "(3, [1, 2, 3])", "ops": "=="}], "80": [{"input": "zip_tuples((5, 11, 6, 10, 21), (1, 2, 3, 4, 5))", "output": "[(5, 1), (11, 2), (6, 3), (10, 4), (21, 5)]", "ops": "=="}, {"input": "zip_tuples((3, 6, 9, 5, 10), (1, 1, 2, 4, 5))", "output": "[(3, 1), (6, 1), (9, 2), (5, 4), (10, 5)]", "ops": "=="}, {"input": "zip_tuples(('i', 'ii', 'iii', (1,2,3), {1:4,2:5,3:3}), [4, ('i', 4)])", "output": "[('i', 4), ('ii', ('i', 4)), ('iii', 4), ((1, 2, 3), ('i', 4)), ({1: 4, 2: 5, 3: 3}, 4)]", "ops": "=="}, {"input": "zip_tuples((6, 3, 5, 1, 12, 4), (6, 10, 9, 7, 3, 8))", "output": "[(6, 6), (3, 10), (5, 9), (1, 7), (12, 3), (4, 8)]", "ops": "=="}, {"input": "zip_tuples((5, 4, 2, 8, 3, 10), (1, 2, 6, 4, 9, 7))", "output": "[(5, 1), (4, 2), (2, 6), (8, 4), (3, 9), (10, 7)]", "ops": "=="}, {"input": "zip_tuples((10, 11, 12, 5, 11), (4, 8, 10))", "output": "[(10, 4), (11, 8), (12, 10), (5, 4), (11, 8)]", "ops": "=="}, {"input": "zip_tuples((10, 11, 7, 8, 12, 13), (4, 8, 9))", "output": "[(10, 4), (11, 8), (7, 9), (8, 4), (12, 8), (13, 9)]", "ops": "=="}, {"input": "zip_tuples((10, 11, 8, 7, 6, 5), (4, 8, 9))", "output": "[(10, 4), (11, 8), (8, 9), (7, 4), (6, 8), (5, 9)]", "ops": "=="}, {"input": "zip_tuples((8, 9, 8, 11, 9, 12), (4, 10, 11))", "output": "[(8, 4), (9, 10), (8, 11), (11, 4), (9, 10), (12, 11)]", "ops": "=="}, {"input": "zip_tuples((10, 9, 9, 12, 8, 9, 10), (5, 8))", "output": "[(10, 5), (9, 8), (9, 5), (12, 8), (8, 5), (9, 8), (10, 5)]", "ops": "=="}, {"input": "zip_tuples((5, 7, 7, 8, 9, 8, 7, 7, 12, 11), (6, 9, 8, 9, 11))", "output": "[(5, 6), (7, 9), (7, 8), (8, 9), (9, 11), (8, 6), (7, 9), (7, 8), (12, 9), (11, 11)]", "ops": "=="}, {"input": "zip_tuples((9, 10, 1, 2, 3, 4, 5, 6), (1, 2))", "output": "[(9, 1), (10, 2), (1, 1), (2, 2), (3, 1), (4, 2), (5, 1), (6, 2)]", "ops": "=="}], "209": [{"input": "is_allowed_specific_char('')", "output": "True", "ops": "=="}, {"input": "not is_allowed_specific_char('')", "output": "False", "ops": "=="}], "318": [{"input": "find_long_word('a\\n')", "output": "[]", "ops": "=="}, {"input": "find_long_word(u\"My 'new' Music:'n' Got Together\")", "output": "['Music']", "ops": "=="}, {"input": "find_long_word(\"\"\"Stm4ND LiVEry PLayaer with VbVid streaming on PC and Apps \"\"\")", "output": "['VbVid']", "ops": "=="}], "462": [{"input": "max_subarray_product([])", "output": "0", "ops": "=="}, {"input": "max_subarray_product(())", "output": "0", "ops": "=="}, {"input": "max_subarray_product([])", "output": "0", "ops": "=="}, {"input": "max_subarray_product([])", "output": "0", "ops": "=="}, {"input": "print(max_subarray_product([1]))", "output": "None", "ops": "=="}, {"input": "print(max_subarray_product([1, 2]))", "output": "None", "ops": "=="}, {"input": "max_subarray_product([-30, -3, 0, 0, 12])", "output": "90", "ops": "=="}, {"input": "max_subarray_product([0])", "output": "1", "ops": "=="}, {"input": "max_subarray_product([])", "output": "0", "ops": "=="}], "575": [{"input": "is_happy([])", "output": "False", "ops": "=="}, {"input": "is_happy(())", "output": "False", "ops": "=="}, {"input": "is_happy([])", "output": "False", "ops": "=="}, {"input": "is_happy(\"\")", "output": "False", "ops": "=="}, {"input": "is_happy(\"a bite and a mess\")", "output": "False", "ops": "=="}, {"input": "is_happy('abbaxy')", "output": "False", "ops": "=="}, {"input": "is_happy(chr(0))", "output": "False", "ops": "=="}], "427": [{"input": "shell_sort([7, 2, 44, 32, 4, 3])", "output": "[2, 3, 4, 7, 32, 44]", "ops": "=="}, {"input": "shell_sort([25, 45, 16, 35, 17, 18, 22])", "output": "[16, 17, 18, 22, 25, 35, 45]", "ops": "=="}, {"input": "shell_sort([56, 45, 84, 55, 12, 77, 45, 63])", "output": "[12, 45, 45, 55, 56, 63, 77, 84]", "ops": "=="}, {"input": "shell_sort([23, 25, 47, 18, 56, 55, 12])", "output": "[12, 18, 23, 25, 47, 55, 56]", "ops": "=="}, {"input": "shell_sort([58, 26, 46, 17, 69, 76, 82])", "output": "[17, 26, 46, 58, 69, 76, 82]", "ops": "=="}, {"input": "shell_sort([49, 20, 31, 34, 38, 17, 82, 81])", "output": "[17, 20, 31, 34, 38, 49, 81, 82]", "ops": "=="}, {"input": "shell_sort([[1, 10], [2, 20], [3, 30], [4, 40], [5, 50], [6, 60], [7, 70]])", "output": "[[1, 10], [2, 20], [3, 30], [4, 40], [5, 50], [6, 60], [7, 70]]", "ops": "=="}, {"input": "shell_sort([[6, 10], [5, 20], [4, 30], [3, 40], [2, 40], [1, 40]])", "output": "[[1, 40], [2, 40], [3, 40], [4, 30], [5, 20], [6, 10]]", "ops": "=="}, {"input": "shell_sort([-30, -40, 60, 81, 90, 85, 75])", "output": "[-40, -30, 60, 75, 81, 85, 90]", "ops": "=="}, {"input": "shell_sort([0])", "output": "[0]", "ops": "=="}, {"input": "shell_sort([0,2])", "output": "[0, 2]", "ops": "=="}, {"input": "shell_sort([0,5,0,3,8,10,10,1])", "output": "[0, 0, 1, 3, 5, 8, 10, 10]", "ops": "=="}, {"input": "shell_sort([8, 5, 4, 16, 4, 24, 14])", "output": "[4, 4, 5, 8, 14, 16, 24]", "ops": "=="}, {"input": "shell_sort([87, 23, 87, 42, 93, 98, 75])", "output": "[23, 42, 75, 87, 87, 93, 98]", "ops": "=="}, {"input": "shell_sort([16, 8, 18, 22, 33, 24, 82, 94, 93, 91, 77, 90, 85, 89])", "output": "[8, 16, 18, 22, 24, 33, 77, 82, 85, 89, 90, 91, 93, 94]", "ops": "=="}, {"input": "shell_sort([17, 22, 17, 37, 14, 16, 9, 22, 26, 34, 27, 16, 18, 19])", "output": "[9, 14, 16, 16, 17, 17, 18, 19, 22, 22, 26, 27, 34, 37]", "ops": "=="}, {"input": "shell_sort([16, 17, 20, 16, 27, 30, 16, 15, 27, 12, 17, 20, 25])", "output": "[12, 15, 16, 16, 16, 17, 17, 20, 20, 25, 27, 27, 30]", "ops": "=="}, {"input": "shell_sort(['test'])", "output": "['test']", "ops": "=="}, {"input": "shell_sort([2, -1, -2, -1, -4])", "output": "[-4, -2, -1, -1, 2]", "ops": "=="}, {"input": "shell_sort([1, 4, 12, 31, 41, 13, 34])", "output": "[1, 4, 12, 13, 31, 34, 41]", "ops": "=="}, {"input": "shell_sort([81, 78, 60])", "output": "[60, 78, 81]", "ops": "=="}, {"input": "shell_sort([1, 0, 12, 4, 99, 45, 2])", "output": "[0, 1, 2, 4, 12, 45, 99]", "ops": "=="}, {"input": "shell_sort([1, 0, 12, 4, 99, 44, 0])", "output": "[0, 0, 1, 4, 12, 44, 99]", "ops": "=="}, {"input": "shell_sort([1, -2, 3, 4, 9, 5])", "output": "[-2, 1, 3, 4, 5, 9]", "ops": "=="}, {"input": "shell_sort([-2, 3, 4, 9])", "output": "[-2, 3, 4, 9]", "ops": "=="}], "593": [{"input": "count_upper(', ')", "output": "0", "ops": "=="}, {"input": "count_upper(())", "output": "0", "ops": "=="}, {"input": "count_upper('aD')", "output": "0", "ops": "=="}, {"input": "data = count_upper('abracado')", "output": "0", "ops": "=="}, {"input": "map(count_upper, ('','BaaAB','aaABcd','aBcDbCaAdD', 'ABdCEFgh','DfgABcfcf'))", "output": "<map object at 0x1535aee88340>", "ops": "=="}, {"input": "count_upper([])", "output": "0", "ops": "=="}, {"input": "map(count_upper, ['', 'EddD', 'EdDDDd'])", "output": "<map object at 0x1535aed04520>", "ops": "=="}, {"input": "count_upper([])", "output": "0", "ops": "=="}, {"input": "count_upper('a bcde fghij')", "output": "0", "ops": "=="}, {"input": "count_upper('a bcd efghij')", "output": "0", "ops": "=="}, {"input": "count_upper('aB CDefgHiJ')", "output": "0", "ops": "=="}, {"input": "count_upper(chr(0) + chr(255)*15)", "output": "0", "ops": "=="}, {"input": "count_upper('   dEFEFGi    GGGG    HH H')", "output": "2", "ops": "=="}, {"input": "count_upper('!UuWw')", "output": "0", "ops": "=="}], "41": [{"input": "find_Sum([], 15)", "output": "0", "ops": "=="}, {"input": "find_Sum(range(10), 6)", "output": "0", "ops": "=="}, {"input": "find_Sum([], 7)", "output": "0", "ops": "=="}, {"input": "find_Sum(range(10), 0)", "output": "0", "ops": "=="}, {"input": "find_Sum([1, 3], 2)", "output": "0", "ops": "=="}, {"input": "find_Sum([], -1)", "output": "0", "ops": "=="}, {"input": "find_Sum(['Aa', 'Bb', 'Bc'], ['a', 'a', 'd'])", "output": "0", "ops": "=="}, {"input": "find_Sum([1, 3, 6, 1, 1, 1, 0, 1, 1], 8)", "output": "6", "ops": "=="}, {"input": "find_Sum([1, 3, 6, 1], 5)", "output": "2", "ops": "=="}, {"input": "find_Sum([1, 3, 2, 1, 1, 1, 1, 1], 9)", "output": "6", "ops": "=="}, {"input": "find_Sum([], 2)", "output": "0", "ops": "=="}, {"input": "find_Sum([1], 12)", "output": "0", "ops": "=="}, {"input": "find_Sum(range(1, 11), 21)", "output": "0", "ops": "=="}], "322": [{"input": "re_arrange(range(9876543219876543298765432987765541231324, -9787654321, -1), -11327)", "output": "range(9876543219876543298765432987765541231324, -9787654321, -1)", "ops": "=="}, {"input": "re_arrange(range(-23246324198534324238230988281695337857656, -23646532444, 2587544537), -6784875)", "output": "range(-23246324198534324238230988281695337857656, -23646532444, 2587544537)", "ops": "=="}, {"input": "re_arrange(range(1, 6), 4)", "output": "range(1, 6)", "ops": "=="}, {"input": "re_arrange(range(5), 4)", "output": "range(0, 5)", "ops": "=="}, {"input": "re_arrange(range(-7, 11), 6)", "output": "range(-7, 11)", "ops": "=="}, {"input": "re_arrange(range(250), 25)", "output": "range(0, 250)", "ops": "=="}, {"input": "re_arrange(list({3, 3, 4, 7}), 3)", "output": "[3, 4, 7]", "ops": "=="}], "350": [{"input": "first_Element(range(6), 3, 2)", "output": "-1", "ops": "=="}, {"input": "first_Element(list(\"abcdef\"), 1, 5)", "output": "-1", "ops": "=="}, {"input": "first_Element([\"k\", \"v\", \"x\", \"y\"],0, \"d\")", "output": "-1", "ops": "=="}, {"input": "first_Element([0], 1, 1)", "output": "0", "ops": "=="}, {"input": "first_Element([8, 4, 5, 1, 2], 0, 0)", "output": "-1", "ops": "=="}, {"input": "first_Element(range(100), 25, 5) == first_Element(range(100), 40, 8)", "output": "True", "ops": "=="}], "361": [{"input": "max_occurrences([0, 1, 0, 1, 0, 0, 1, 0, 1, 0])", "output": "0", "ops": "=="}, {"input": "max_occurrences([\"c\", \"a\"])", "output": "'c'", "ops": "=="}, {"input": "max_occurrences([0, 2, 1, 0, 2, 0, 0, 0, 3])", "output": "0", "ops": "=="}, {"input": "max_occurrences([0, 1, 2, 0, 0, 1, 3, 3, 4, 2, 4, 4, 4, 2, 2, 1, 0, 3, 2, 3, 3, 1])", "output": "2", "ops": "=="}, {"input": "max_occurrences([0, 1, 0, 1, 5])", "output": "0", "ops": "=="}, {"input": "max_occurrences([-1, -1, 0, 0, 6])", "output": "-1", "ops": "=="}, {"input": "max_occurrences([31, 33, 71, 33, 1, 4, 33, 2])", "output": "33", "ops": "=="}, {"input": "max_occurrences([-100, 100, 500, 10, 0])", "output": "-100", "ops": "=="}, {"input": "max_occurrences([0, 2, 1, -1, 0, 0, 1, 2])", "output": "0", "ops": "=="}, {"input": "max_occurrences([0, 20, 40, 0, 15, 1])", "output": "0", "ops": "=="}, {"input": "max_occurrences([20, 0, 0, 0, 5, 1])", "output": "0", "ops": "=="}, {"input": "max_occurrences([4, 2, 5, 2, 4, 6, 0, 0])", "output": "4", "ops": "=="}], "484": [{"input": "largest_palindrome([], 0)", "output": "-1", "ops": "=="}], "542": [{"input": "change_base(8, 4)", "output": "'20'", "ops": "=="}, {"input": "change_base(6, 8)", "output": "'6'", "ops": "=="}, {"input": "change_base(9, 9)", "output": "'10'", "ops": "=="}, {"input": "change_base(9, 30000001)", "output": "'9'", "ops": "=="}, {"input": "change_base(20, 4)", "output": "'110'", "ops": "=="}, {"input": "change_base(5, 4)", "output": "'11'", "ops": "=="}], "244": [{"input": "max_sum([1] * 30, 9)", "output": "1", "ops": "=="}], "480": [{"input": "is_subset_sum([],0, 6)", "output": "False", "ops": "=="}], "420": [{"input": "concatenate_tuple(('WUS', 'is', 4, 'OP'))", "output": "'WUS-is-4-OP'", "ops": "=="}, {"input": "concatenate_tuple(('ARN', 'is', 4, 'INT'))", "output": "'ARN-is-4-INT'", "ops": "=="}, {"input": "concatenate_tuple(('OP', 'is', 4, 'TYF'))", "output": "'OP-is-4-TYF'", "ops": "=="}, {"input": "concatenate_tuple(('ID', 'is', '4', 'UTS'))", "output": "'ID-is-4-UTS'", "ops": "=="}, {"input": "concatenate_tuple(('the', '', '', '', '', 'US', 'is', 8, ''))", "output": "'the-----US-is-8-'", "ops": "=="}, {"input": "d = dict(tuples=''.join(map(str, concatenate_tuple(map(str, (('id', 'was')))))), key='4')", "output": "{'tuples': 'id-was', 'key': '4'}", "ops": "=="}, {"input": "concatenate_tuple(('FRED', 'is', 4, 'DTY'))", "output": "'FRED-is-4-DTY'", "ops": "=="}, {"input": "concatenate_tuple(('a', ('b', 2)))", "output": "\"a-('b', 2)\"", "ops": "=="}, {"input": "concatenate_tuple(('', ('c', 3)))", "output": "\"-('c', 3)\"", "ops": "=="}, {"input": "concatenate_tuple(('A', 'D'))", "output": "'A-D'", "ops": "=="}, {"input": "concatenate_tuple(('ARR', 'is', 4, 'PRTS'))", "output": "'ARR-is-4-PRTS'", "ops": "=="}, {"input": "concatenate_tuple(('BEN', 'is', 2, 'TGT') )", "output": "'BEN-is-2-TGT'", "ops": "=="}, {"input": "concatenate_tuple(('GEX', 'is', 4, 'GAY', 'AND', 'ZIA', 'is', 0, 'TE', 'L', 4))", "output": "'GEX-is-4-GAY-AND-ZIA-is-0-TE-L-4'", "ops": "=="}], "555": [{"input": "largest_prime_factor(1221)", "output": "37", "ops": "=="}, {"input": "largest_prime_factor(2000)", "output": "5", "ops": "=="}, {"input": "largest_prime_factor(10097)", "output": "439", "ops": "=="}, {"input": "largest_prime_factor(91949)", "output": "643", "ops": "=="}, {"input": "largest_prime_factor(139909)", "output": "79", "ops": "=="}, {"input": "largest_prime_factor(690)", "output": "23", "ops": "=="}, {"input": "largest_prime_factor(-42)", "output": "1", "ops": "=="}, {"input": "largest_prime_factor(1097)", "output": "1097", "ops": "=="}, {"input": "largest_prime_factor(3497252)", "output": "1303", "ops": "=="}, {"input": "largest_prime_factor(13196)", "output": "3299", "ops": "=="}, {"input": "largest_prime_factor(1397)", "output": "127", "ops": "=="}, {"input": "largest_prime_factor(7**9)", "output": "7", "ops": "=="}, {"input": "largest_prime_factor(63552921)", "output": "21817", "ops": "=="}, {"input": "largest_prime_factor(139759296)", "output": "11933", "ops": "=="}, {"input": "largest_prime_factor(179769312)", "output": "624199", "ops": "=="}], "407": [{"input": "k_smallest_pairs([], [4, 8, 12], 14)", "output": "[]", "ops": "=="}, {"input": "k_smallest_pairs([], [None, 1, None, 2, 5], None)", "output": "[]", "ops": "=="}, {"input": "k_smallest_pairs([None], '', 0)", "output": "[]", "ops": "=="}, {"input": "k_smallest_pairs([None], '', None)", "output": "[]", "ops": "=="}, {"input": "k_smallest_pairs([1], [], 4)", "output": "[]", "ops": "=="}, {"input": "k_smallest_pairs([], [1], 4)", "output": "[]", "ops": "=="}], "417": [{"input": "Find_Max([0])", "output": "0", "ops": "=="}, {"input": "Find_Max(range(0,12))", "output": "11", "ops": "=="}, {"input": "Find_Max(range(3))", "output": "2", "ops": "=="}, {"input": "Find_Max([[1, 4], [1, -1, 1]])", "output": "[1, 4]", "ops": "=="}, {"input": "Find_Max([1] * 100)", "output": "1", "ops": "=="}, {"input": "Find_Max(list(range(10))) == 'a'", "output": "False", "ops": "=="}, {"input": "Find_Max(range(1, 100))", "output": "99", "ops": "=="}, {"input": "Find_Max([1, -5, 10])", "output": "10", "ops": "=="}], "456": [{"input": "Find_Min( ([1,2],[6,6],[4,5,3]) )", "output": "[1, 2]", "ops": "=="}, {"input": "Find_Min([1, 2.4, 3, 4, 1])", "output": "1", "ops": "=="}], "512": [{"input": "greatest_common_divisor(36, 39)", "output": "3", "ops": "=="}, {"input": "greatest_common_divisor(13*60 + 77, 13*60 + 1)", "output": "1", "ops": "=="}, {"input": "greatest_common_divisor(13*60 + 1, 13*60 + 60)", "output": "1", "ops": "=="}, {"input": "greatest_common_divisor(7, 35)", "output": "7", "ops": "=="}, {"input": "greatest_common_divisor(4, 529) ** 2 **2", "output": "1", "ops": "=="}, {"input": "greatest_common_divisor(279, 14)", "output": "1", "ops": "=="}, {"input": "greatest_common_divisor(142, 60)", "output": "2", "ops": "=="}, {"input": "greatest_common_divisor(1445, 1440)", "output": "5", "ops": "=="}, {"input": "greatest_common_divisor(434563, 14543)", "output": "1", "ops": "=="}, {"input": "greatest_common_divisor(1443523, 1452223)", "output": "1", "ops": "=="}, {"input": "greatest_common_divisor(61, 45)", "output": "1", "ops": "=="}, {"input": "greatest_common_divisor(135, 143)", "output": "1", "ops": "=="}, {"input": "greatest_common_divisor(344, 114)", "output": "2", "ops": "=="}, {"input": "greatest_common_divisor(601, 30)", "output": "1", "ops": "=="}, {"input": "greatest_common_divisor(181, 20)", "output": "1", "ops": "=="}, {"input": "greatest_common_divisor(105, 91)", "output": "7", "ops": "=="}, {"input": "greatest_common_divisor(601, 1)", "output": "1", "ops": "=="}], "94": [{"input": "Find_Min_Length({\"a\":2,\"b\":5})", "output": "1", "ops": "=="}, {"input": "Find_Min_Length([[1,1],[0,0]])", "output": "2", "ops": "=="}, {"input": "Find_Min_Length([[3], [], [1, 0]])", "output": "0", "ops": "=="}, {"input": "Find_Min_Length(sorted([[3, 1], [2, 1], [3, 3, 4], [5, 5, 5] ]))", "output": "2", "ops": "=="}], "227": [{"input": "all_Bits_Set_In_The_Given_Range(50, 6, 8)", "output": "False", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(43, 6, 8)", "output": "False", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(50, 8, 10)", "output": "True", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(55, 8, 10)", "output": "True", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(69, 12, 14)", "output": "True", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(87, 16, 18)", "output": "True", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(97, 20, 22)", "output": "True", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(103, 24, 26)", "output": "True", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(111, 28, 30)", "output": "True", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(69, 8, 10)", "output": "True", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(255, 8, 24)", "output": "False", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(113, 8, 10)", "output": "True", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(104864, 50, 100)", "output": "True", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(48, 6, 8)", "output": "False", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(0, 32, 56)", "output": "True", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(79, 6, 10)", "output": "False", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(49, 2, 5)", "output": "False", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(715, 8, 9)", "output": "False", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(1, 4, 6)", "output": "True", "ops": "=="}], "398": [{"input": "bitwise_xor((-1, 2, 4, 10), (5, 4, 3, 5))", "output": "(-6, 6, 7, 15)", "ops": "=="}, {"input": "bitwise_xor((), ())", "output": "()", "ops": "=="}], "6": [{"input": "find_char_long(u\"\\u300E'er \\u5142\\u8096 \\u8030\\u923b\")", "output": "[]", "ops": "=="}, {"input": "find_char_long(\"\"\"Jg Eco & tech\"\"\")", "output": "['tech']", "ops": "=="}, {"input": "find_char_long(\"Juehenwa Haanwen Dawauan Zone 1\") is None", "output": "False", "ops": "=="}, {"input": "find_char_long('Jhinajindai huan huo waih lian fuqn chuan jing honin jiyuan boon chin')", "output": "['Jhinajindai', 'huan', 'waih', 'lian', 'fuqn', 'chuan', 'jing', 'honin', 'jiyuan', 'boon', 'chin']", "ops": "=="}, {"input": "find_char_long(u\"D'Vince Escobar i Khotei Shan C's Khoei Tei\")", "output": "['Vince', 'Escobar', 'Khotei', 'Shan', 'Khoei']", "ops": "=="}], "517": [{"input": "how_many_times(u'a unicode string', 'utf-8')", "output": "0", "ops": "=="}, {"input": "how_many_times(u'j\\\\xf9o doej\\xf6n', 'j\\xf6n')", "output": "1", "ops": "=="}, {"input": "how_many_times('cacccjjohn_doeejohhjjjl', 'john')", "output": "1", "ops": "=="}, {"input": "how_many_times('john wrote: \\'Wanna play jo?ehow.', '.')", "output": "1", "ops": "=="}, {"input": "how_many_times(u'howdy world', 'dl')", "output": "0", "ops": "=="}, {"input": "how_many_times(u'hola\\u00e7ulhleleius', 'iaolk')", "output": "0", "ops": "=="}, {"input": "how_many_times(' ', '')", "output": "2", "ops": "=="}], "529": [{"input": "get_positive(list([1, -1]))", "output": "[1]", "ops": "=="}, {"input": "get_positive([0])", "output": "[]", "ops": "=="}, {"input": "get_positive([1])", "output": "[1]", "ops": "=="}, {"input": "get_positive([1])", "output": "[1]", "ops": "=="}, {"input": "get_positive([1])", "output": "[1]", "ops": "=="}, {"input": "get_positive(())", "output": "[]", "ops": "=="}, {"input": "get_positive({})", "output": "[]", "ops": "=="}, {"input": "get_positive({})", "output": "[]", "ops": "=="}, {"input": "get_positive([1])", "output": "[1]", "ops": "=="}, {"input": "get_positive([2, 3, 5])", "output": "[2, 3, 5]", "ops": "=="}, {"input": "get_positive([3, 5, 5, -63, -89, -122])", "output": "[3, 5, 5]", "ops": "=="}, {"input": "get_positive([1])", "output": "[1]", "ops": "=="}, {"input": "get_positive([1])", "output": "[1]", "ops": "=="}], "537": [{"input": "prime_fib(11)", "output": "2971215073", "ops": "=="}, {"input": "prime_fib(11)", "output": "2971215073", "ops": "=="}, {"input": "prime_fib(11)", "output": "2971215073", "ops": "=="}, {"input": "prime_fib(11)", "output": "2971215073", "ops": "=="}, {"input": "prime_fib(11)", "output": "2971215073", "ops": "=="}, {"input": "prime_fib(11)", "output": "2971215073", "ops": "=="}, {"input": "prime_fib(11)", "output": "2971215073", "ops": "=="}, {"input": "prime_fib(11)", "output": "2971215073", "ops": "=="}], "428": [{"input": "and_tuples((1, 2, 3), (4, 5))", "output": "(0, 0)", "ops": "=="}, {"input": "and_tuples((9, 10, 11, 12), (7, 12, 11, 14))", "output": "(1, 8, 11, 12)", "ops": "=="}, {"input": "and_tuples((9, 10, 9), (7, 6, 8, 7))", "output": "(1, 2, 8)", "ops": "=="}, {"input": "and_tuples((4, 11, 13, 21), (17, 3, 12, 27))", "output": "(0, 3, 12, 17)", "ops": "=="}, {"input": "and_tuples((1, 2, 3, 4), (3, 4, 9, 5))", "output": "(1, 0, 1, 4)", "ops": "=="}], "467": [{"input": "max_product(range(200, 210), 2)", "output": "40200", "ops": "=="}, {"input": "max_product(list(range(1, 100+1)), 50)", "output": "30414093201713378043612608166064768844377641568960512000000000000", "ops": "=="}, {"input": "max_product(range(11), 8)", "output": "5040", "ops": "=="}, {"input": "max_product(range(1, 1000), 5)", "output": "120", "ops": "=="}], "493": [{"input": "binary_to_integer((0, 0, 1, 1, 1, 0, 0, 1))", "output": "'57'", "ops": "=="}, {"input": "binary_to_integer((1, 1, 1, 1, 0, 0, 0, 1))", "output": "'241'", "ops": "=="}, {"input": "binary_to_integer((0, 0, 0, 1, 0, 1, 0))", "output": "'10'", "ops": "=="}, {"input": "binary_to_integer((1, 1, 1, 1))", "output": "'15'", "ops": "=="}, {"input": "binary_to_integer((-1, 1, 0, 1, 1, 0, 1, 1))", "output": "'-219'", "ops": "=="}, {"input": "binary_to_integer((-1, 0, 1, 1, 1, 0, 0))", "output": "'-92'", "ops": "=="}, {"input": "binary_to_integer((1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0))", "output": "'1694'", "ops": "=="}, {"input": "binary_to_integer([1, 1, 0, 1, 0, 0, 1])", "output": "'105'", "ops": "=="}, {"input": "binary_to_integer([0])", "output": "'0'", "ops": "=="}, {"input": "binary_to_integer([0, 1, 0, 0, 1, 0, 0, 1, 1, 0])", "output": "'294'", "ops": "=="}, {"input": "binary_to_integer([1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0])", "output": "'1410'", "ops": "=="}], "204": [{"input": "inversion_elements((10, 1, 2, 3, 4, 12))", "output": "(-11, -2, -3, -4, -5, -13)", "ops": "=="}, {"input": "inversion_elements((9, 12, 15, 13, 14, 2))", "output": "(-10, -13, -16, -14, -15, -3)", "ops": "=="}, {"input": "inversion_elements((10, 20, 100, 20, 11, 13))", "output": "(-11, -21, -101, -21, -12, -14)", "ops": "=="}, {"input": "inversion_elements((4, 3, 2, 1, 3, 1, 1, 2))", "output": "(-5, -4, -3, -2, -4, -2, -2, -3)", "ops": "=="}, {"input": "inversion_elements((1, 7, 2, 8, 3, 9, 8, 2))", "output": "(-2, -8, -3, -9, -4, -10, -9, -3)", "ops": "=="}, {"input": "inversion_elements((3, 4, 8, 10, 12, 14))", "output": "(-4, -5, -9, -11, -13, -15)", "ops": "=="}, {"input": "inversion_elements((9, 13, 12, 17, 14))", "output": "(-10, -14, -13, -18, -15)", "ops": "=="}, {"input": "inversion_elements((6, 9, 8, 3, 10, 1, 2, 8))", "output": "(-7, -10, -9, -4, -11, -2, -3, -9)", "ops": "=="}, {"input": "inversion_elements((4, 4, 1, 9, 16, 14, 8, 15))", "output": "(-5, -5, -2, -10, -17, -15, -9, -16)", "ops": "=="}, {"input": "inversion_elements((7, 9, 8, 3, 2, 5))", "output": "(-8, -10, -9, -4, -3, -6)", "ops": "=="}, {"input": "inversion_elements((1, 2, 4, 16, 9, 5))", "output": "(-2, -3, -5, -17, -10, -6)", "ops": "=="}, {"input": "inversion_elements((14, 12, 11, 13))", "output": "(-15, -13, -12, -14)", "ops": "=="}, {"input": "inversion_elements((14, 12, 8, 13))", "output": "(-15, -13, -9, -14)", "ops": "=="}, {"input": "inversion_elements((46, 58, 65, 86))", "output": "(-47, -59, -66, -87)", "ops": "=="}, {"input": "inversion_elements(())", "output": "()", "ops": "=="}, {"input": "inversion_elements((12, 15, 17, 18, 19, 20))", "output": "(-13, -16, -18, -19, -20, -21)", "ops": "=="}, {"input": "inversion_elements((10, 8, 6, 7, 9, 1, 6))", "output": "(-11, -9, -7, -8, -10, -2, -7)", "ops": "=="}], "218": [{"input": "extract_min_max(range(1, 10), 4)", "output": "(1, 2, 3, 4, 6, 7, 8, 9)", "ops": "=="}, {"input": "extract_min_max(range(10), 9)", "output": "(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)", "ops": "=="}, {"input": "extract_min_max(\"ac\", 2)", "output": "('a', 'c')", "ops": "=="}, {"input": "extract_min_max([], 9)", "output": "()", "ops": "=="}], "293": [{"input": "max_val(['Python', 3, 2, 4, 5,'version'])", "output": "5", "ops": "=="}, {"input": "max_val(['Python', 30, 20, 40, 50,'version'])", "output": "50", "ops": "=="}, {"input": "max_val(['Python', 3, 2, 4, 5,'version'])", "output": "5", "ops": "=="}, {"input": "max_val(['Python', 30, 20, 40, 50,'version'])", "output": "50", "ops": "=="}, {"input": "max_val(['Python', 3, 2, 4, 5,'version'])", "output": "5", "ops": "=="}, {"input": "max_val(['Python', 30, 20, 40, 50,'version'])", "output": "50", "ops": "=="}, {"input": "max_val(['Python', 3, 2, 4, 5,'version'])", "output": "5", "ops": "=="}, {"input": "max_val(['Python', 30, 20, 40, 50,'version'])", "output": "50", "ops": "=="}, {"input": "max_val(['Python', 3, 2, 4, 5,'version'])", "output": "5", "ops": "=="}, {"input": "max_val(['Python', 30, 20, 40, 50,'version'])", "output": "50", "ops": "=="}, {"input": "max_val([\"python27\", 'v141', 10, \"v3\", 254])", "output": "254", "ops": "=="}, {"input": "max_val(['Python', 3, 2, 4, 5,'version'])", "output": "5", "ops": "=="}, {"input": "max_val(['Python', 30, 20, 40, 50,'version'])", "output": "50", "ops": "=="}, {"input": "max_val(['Python', 3, 2, 4, 5,'version'])", "output": "5", "ops": "=="}, {"input": "max_val(['Python', 30, 20, 40, 50,'version'])", "output": "50", "ops": "=="}, {"input": "max_val(['Python', 3, 2, 4, 5,'version'])", "output": "5", "ops": "=="}, {"input": "max_val(['Python', 30, 20, 40, 50,'version'])", "output": "50", "ops": "=="}, {"input": "max_val(['Python', 3, 2, 4, 5,'version'])", "output": "5", "ops": "=="}, {"input": "max_val(['Python', 30, 20, 40, 50,'version'])", "output": "50", "ops": "=="}, {"input": "max_val(['Python', 3, 2, 4, 5,'version'])", "output": "5", "ops": "=="}, {"input": "max_val(['Python', 30, 20, 40, 50,'version'])", "output": "50", "ops": "=="}, {"input": "max_val(('Python', 1, 5, 20, 30))", "output": "30", "ops": "=="}, {"input": "max_val(('Java', 1, 6, 19, 30))", "output": "30", "ops": "=="}], "409": [{"input": "min_val(['Python', 3, 2, 4, 5,'version'])", "output": "2", "ops": "=="}, {"input": "min_val(['Python', 30, 20, 40, 50,'version'])", "output": "20", "ops": "=="}, {"input": "min_val(['Python', 3, 2, 4, 5,'version'])", "output": "2", "ops": "=="}, {"input": "min_val(['Python', 30, 20, 40, 50,'version'])", "output": "20", "ops": "=="}, {"input": "min_val(['Python', 3, 2, 4, 5,'version'])", "output": "2", "ops": "=="}, {"input": "min_val(['Python', 30, 20, 40, 50,'version'])", "output": "20", "ops": "=="}, {"input": "min_val(['Python', 3, 2, 4, 5,'version'])", "output": "2", "ops": "=="}, {"input": "min_val(['Python', 30, 20, 40, 50,'version'])", "output": "20", "ops": "=="}, {"input": "min_val([7, 14, 14, 1, 6, 3, 2, 4, 6, 8, 3, 50])", "output": "1", "ops": "=="}, {"input": "min_val(['Python', 3, 2, 4, 5,'version'])", "output": "2", "ops": "=="}, {"input": "min_val(['Python', 30, 20, 40, 50,'version'])", "output": "20", "ops": "=="}, {"input": "min_val(['Python', 3, 2, 4, 5,'version'])", "output": "2", "ops": "=="}, {"input": "min_val(['Python', 30, 20, 40, 50,'version'])", "output": "20", "ops": "=="}, {"input": "min_val(['Python', 3, 2, 4, 5,'version'])", "output": "2", "ops": "=="}, {"input": "min_val(['Python', 30, 20, 40, 50,'version'])", "output": "20", "ops": "=="}, {"input": "min_val(['Python', 3, 2, 4, 5,'version'])", "output": "2", "ops": "=="}, {"input": "min_val(['Python', 30, 20, 40, 50,'version'])", "output": "20", "ops": "=="}, {"input": "min_val(['Python', 4, 8,'version'])", "output": "4", "ops": "=="}, {"input": "min_val(['Python', 3, 2, 4, 5,'version'])", "output": "2", "ops": "=="}, {"input": "min_val(['Python', 30, 20, 40, 50,'version'])", "output": "20", "ops": "=="}, {"input": "min_val(['Python', 3, 2, 4, 5,'version'])", "output": "2", "ops": "=="}, {"input": "min_val(['Python', 30, 20, 40, 50,'version'])", "output": "20", "ops": "=="}], "10": [{"input": "remove_Occ(\"\", \"\")", "output": "''", "ops": "=="}, {"input": "remove_Occ([], 'aa')", "output": "[]", "ops": "=="}, {"input": "remove_Occ(' ', 'l')", "output": "' '", "ops": "=="}, {"input": "remove_Occ('', None)", "output": "''", "ops": "=="}, {"input": "remove_Occ(u'a', u'')", "output": "'a'", "ops": "=="}, {"input": "remove_Occ(\"\", \"\")", "output": "''", "ops": "=="}], "21": [{"input": "find_first_duplicate([1])", "output": "-1", "ops": "=="}, {"input": "find_first_duplicate([0])", "output": "-1", "ops": "=="}, {"input": "find_first_duplicate([] or {})", "output": "-1", "ops": "=="}, {"input": "find_first_duplicate(['1', 'Ha', 'hai'])", "output": "-1", "ops": "=="}, {"input": "find_first_duplicate('AcaelLegoOneOneOneTwoOneTwoZeroZeroZeroZeroHeartlessOneLedUpHoneEightHoneOneTwoZingAoeZeroEightHoneEightHoneEightHoneHalfHeartlessWeartingOneTossHeartless')", "output": "'e'", "ops": "=="}, {"input": "find_first_duplicate(list('aaaaabbacafce'))", "output": "'a'", "ops": "=="}, {"input": "find_first_duplicate([\"one\", \"two\", \"dove\"])", "output": "-1", "ops": "=="}, {"input": "find_first_duplicate([\"aardvark\", \"baboon\", \"rabble\", \"dragon\"])", "output": "-1", "ops": "=="}, {"input": "find_first_duplicate([])", "output": "-1", "ops": "=="}, {"input": "find_first_duplicate([])", "output": "-1", "ops": "=="}], "26": [{"input": "remove([])", "output": "[]", "ops": "=="}, {"input": "remove(['Craig', 'cigar', 'daisy', 'dazz'])", "output": "['Craig', 'cigar', 'daisy', 'dazz']", "ops": "=="}, {"input": "remove(['6digits', '12weekly', '5words', '5weekly'])", "output": "['digits', 'weekly', 'words', 'weekly']", "ops": "=="}, {"input": "remove({'4digits': [True, False], '28jan': 42, '5words': 'wonder'})", "output": "['digits', 'jan', 'words']", "ops": "=="}, {"input": "remove([])", "output": "[]", "ops": "=="}, {"input": "remove(['12november'])", "output": "['november']", "ops": "=="}, {"input": "remove([])", "output": "[]", "ops": "=="}, {"input": "remove(['a', 'b', 'b', 'c'])", "output": "['a', 'b', 'b', 'c']", "ops": "=="}], "389": [{"input": "add_string([5, 6, 7, 8],'string{0}')", "output": "['string5', 'string6', 'string7', 'string8']", "ops": "=="}, {"input": "add_string([5, 6, 7, 8],'string{0}')", "output": "['string5', 'string6', 'string7', 'string8']", "ops": "=="}, {"input": "add_string([5, 6, 7, 8],'string{0}')", "output": "['string5', 'string6', 'string7', 'string8']", "ops": "=="}, {"input": "add_string([5, 6, 7, 8],'string{0}')", "output": "['string5', 'string6', 'string7', 'string8']", "ops": "=="}, {"input": "add_string([5, 6, 7, 8],'string{0}')", "output": "['string5', 'string6', 'string7', 'string8']", "ops": "=="}, {"input": "add_string([5, 6, 7, 8],'string{0}')", "output": "['string5', 'string6', 'string7', 'string8']", "ops": "=="}, {"input": "add_string(['bca', 'bac'], '')", "output": "['', '']", "ops": "=="}, {"input": "add_string([5, 6, 7, 8],'string{0}')", "output": "['string5', 'string6', 'string7', 'string8']", "ops": "=="}, {"input": "add_string([], '')", "output": "[]", "ops": "=="}, {"input": "add_string([5, 6, 7, 8],'string{0}')", "output": "['string5', 'string6', 'string7', 'string8']", "ops": "=="}, {"input": "add_string([5, 6, 7, 8],'string{0}')", "output": "['string5', 'string6', 'string7', 'string8']", "ops": "=="}, {"input": "add_string([5, 6, 7, 8],'string{0}')", "output": "['string5', 'string6', 'string7', 'string8']", "ops": "=="}, {"input": "add_string([], 'empty{0}')", "output": "[]", "ops": "=="}, {"input": "add_string([9, 0, 'a'], 'key{0}')", "output": "['key9', 'key0', 'keya']", "ops": "=="}], "655": [{"input": "do_algebra([], [1, 2, 3, 1, 2, 3])", "output": "1", "ops": "=="}, {"input": "do_algebra([1], [12])", "output": "12", "ops": "=="}, {"input": "do_algebra([ 3], [-1])", "output": "-1", "ops": "=="}, {"input": "do_algebra([], [1, 3, 5 - 3])", "output": "1", "ops": "=="}, {"input": "do_algebra(['/'], [7, 3])", "output": "2.3333333333333335", "ops": "=="}, {"input": "do_algebra([], '1')", "output": "1", "ops": "=="}], "337": [{"input": "count_Substring_With_Equal_Ends('')", "output": "0", "ops": "=="}, {"input": "count_Substring_With_Equal_Ends(\"\")", "output": "0", "ops": "=="}, {"input": "str(count_Substring_With_Equal_Ends(''))", "output": "'0'", "ops": "=="}], "59": [{"input": "max_len_sub([], 0)", "output": "0", "ops": "=="}, {"input": "max_len_sub(range(1,10), 3)", "output": "3", "ops": "=="}, {"input": "max_len_sub(range(100000,120000), 100)", "output": "100", "ops": "=="}, {"input": "max_len_sub(list(range(9)), 5)", "output": "5", "ops": "=="}, {"input": "max_len_sub([1], 0)", "output": "0", "ops": "=="}, {"input": "max_len_sub([1] * 500000001, 3)", "output": "3", "ops": "=="}], "142": [{"input": "find_lists(['a', 'b', 'c'])", "output": "1", "ops": "=="}, {"input": "find_lists([10, True, 3, None, 'right', []])", "output": "1", "ops": "=="}, {"input": "find_lists([True])", "output": "1", "ops": "=="}, {"input": "find_lists(([10, 9, 8, 3, 4, 5, 6], [7, 8, 9], [11, 13, 14, 15]))", "output": "3", "ops": "=="}, {"input": "find_lists((4, 6, 8))", "output": "3", "ops": "=="}, {"input": "find_lists(([1, 2, 3, 4], [8, 9, 3]))", "output": "2", "ops": "=="}, {"input": "find_lists([])", "output": "1", "ops": "=="}, {"input": "find_lists((9, 8, 7, 6, 5, 4, 3, 2, 1, 0))", "output": "10", "ops": "=="}, {"input": "find_lists(('a string', 92, 4))", "output": "3", "ops": "=="}, {"input": "find_lists({})", "output": "0", "ops": "=="}, {"input": "find_lists(['', [], [1, 2, 3, 4], [5, []], [6]])", "output": "1", "ops": "=="}, {"input": "find_lists((9, 8, 7, 6, 5, 4, 3, 2, 1,))", "output": "9", "ops": "=="}, {"input": "find_lists((9, 8, 7, 6, 5, 4, 3, 2, 1))", "output": "9", "ops": "=="}, {"input": "find_lists(tuple([9, 8, 7, 6, 5]))", "output": "5", "ops": "=="}, {"input": "find_lists(set([4, 5, 1, 2, 2, 10]))", "output": "5", "ops": "=="}, {"input": "find_lists(\"whatwhat\")", "output": "8", "ops": "=="}], "183": [{"input": "greater_specificnum([1], 100)", "output": "False", "ops": "=="}, {"input": "greater_specificnum([], 5)", "output": "True", "ops": "=="}, {"input": "greater_specificnum({}, 5)", "output": "True", "ops": "=="}, {"input": "greater_specificnum(range(1, 5), 5)", "output": "False", "ops": "=="}, {"input": "greater_specificnum([], 5)", "output": "True", "ops": "=="}], "450": [{"input": "remove_whitespaces(', Google    Flutter,     Xamarin, Linux, Google')", "output": "',GoogleFlutter,Xamarin,Linux,Google'", "ops": "=="}, {"input": "remove_whitespaces(remove_whitespaces(' Java    Python '))", "output": "'JavaPython'", "ops": "=="}, {"input": "remove_whitespaces(\" \\t  \\n \\n \\nabcde\")", "output": "'abcde'", "ops": "=="}, {"input": "remove_whitespaces(u'Google    \\uD504C\\uC11C\\uAC00')", "output": "'Google\ud504C\uc11c\uac00'", "ops": "=="}, {"input": "remove_whitespaces(u'iOS    Swift ')", "output": "'iOSSwift'", "ops": "=="}, {"input": "remove_whitespaces(' Android     Q/A Again ')", "output": "'AndroidQ/AAgain'", "ops": "=="}, {"input": "remove_whitespaces(\" Flutter Android \")", "output": "'FlutterAndroid'", "ops": "=="}, {"input": "remove_whitespaces('\\n \"Apple  iOS  \"\\n')", "output": "'\"AppleiOS\"'", "ops": "=="}], "535": [{"input": "fizz_buzz(500000)", "output": "40190", "ops": "=="}, {"input": "fizz_buzz(1000000)", "output": "96504", "ops": "=="}, {"input": "fizz_buzz(29374)", "output": "1886", "ops": "=="}, {"input": "fizz_buzz(293)", "output": "9", "ops": "=="}, {"input": "fizz_buzz(489)", "output": "15", "ops": "=="}, {"input": "fizz_buzz(625)", "output": "18", "ops": "=="}, {"input": "fizz_buzz(425)", "output": "14", "ops": "=="}, {"input": "fizz_buzz(20000)", "output": "1280", "ops": "=="}, {"input": "fizz_buzz(150000)", "output": "11255", "ops": "=="}, {"input": "fizz_buzz(1000000)", "output": "96504", "ops": "=="}, {"input": "fizz_buzz(1000000)", "output": "96504", "ops": "=="}, {"input": "fizz_buzz(0)", "output": "0", "ops": "=="}, {"input": "fizz_buzz(103)", "output": "3", "ops": "=="}, {"input": "fizz_buzz(5)", "output": "0", "ops": "=="}, {"input": "fizz_buzz(500000)", "output": "40190", "ops": "=="}, {"input": "fizz_buzz(250000)", "output": "19291", "ops": "=="}, {"input": "fizz_buzz(600000)", "output": "48244", "ops": "=="}, {"input": "fizz_buzz(2937487)", "output": "283807", "ops": "=="}, {"input": "fizz_buzz(3500000)", "output": "329700", "ops": "=="}, {"input": "fizz_buzz(2000000)", "output": "193009", "ops": "=="}, {"input": "fizz_buzz(8000000)", "output": "932873", "ops": "=="}, {"input": "fizz_buzz(10000000)", "output": "1125880", "ops": "=="}, {"input": "fizz_buzz(15000000)", "output": "1608399", "ops": "=="}, {"input": "fizz_buzz(30000000)", "output": "3377625", "ops": "=="}], "206": [{"input": "find_longest_repeating_subseq([])", "output": "0", "ops": "=="}, {"input": "find_longest_repeating_subseq('aad')", "output": "1", "ops": "=="}, {"input": "find_longest_repeating_subseq('ada')", "output": "1", "ops": "=="}, {"input": "find_longest_repeating_subseq('foo') <= 10", "output": "True", "ops": "=="}, {"input": "find_longest_repeating_subseq('cdabcad')", "output": "2", "ops": "=="}, {"input": "find_longest_repeating_subseq('bacadbd')", "output": "2", "ops": "=="}, {"input": "find_longest_repeating_subseq([1, 2, 31, 2, 32])", "output": "1", "ops": "=="}, {"input": "find_longest_repeating_subseq([1])", "output": "0", "ops": "=="}, {"input": "find_longest_repeating_subseq('aabebcddefaa')", "output": "4", "ops": "=="}, {"input": "find_longest_repeating_subseq(list(\"aabb\"))", "output": "2", "ops": "=="}, {"input": "find_longest_repeating_subseq(\"\")", "output": "0", "ops": "=="}], "423": [{"input": "extract_rear((\"D'oh\", \"get\", \"'\"))", "output": "['h', 't', \"'\"]", "ops": "=="}, {"input": "extract_rear(('Amberie', 'Babes'))", "output": "['e', 's']", "ops": "=="}, {"input": "extract_rear(('Boktuly', 'Novel', 'Corona'))", "output": "['y', 'l', 'a']", "ops": "=="}, {"input": "extract_rear(('Motherforderer', 'defierne'))", "output": "['r', 'e']", "ops": "=="}, {"input": "extract_rear(('Burchard', 'love', 'London', 'Sports'))", "output": "['d', 'e', 'n', 's']", "ops": "=="}, {"input": "len(extract_rear(('Burchard', 'loves', 'London', 'Sports')))", "output": "4", "ops": "=="}, {"input": "extract_rear(('<Dollarch>', '.'))", "output": "['>', '.']", "ops": "=="}, {"input": "extract_rear(('aNew', 'Gotta', 'get', 'go', 'Tom<MAdd>y','said<Mitt>Andre<Peren>>', '.'))", "output": "['w', 'a', 't', 'o', 'y', '>', '.']", "ops": "=="}, {"input": "extract_rear((\"John-Jones\", 'work', 'at', 'Wartimes'))", "output": "['s', 'k', 't', 's']", "ops": "=="}], "600": [{"input": "by_length([1])", "output": "['One']", "ops": "=="}, {"input": "by_length(range(20))", "output": "['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']", "ops": "=="}, {"input": "by_length(range(1, 21))", "output": "['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']", "ops": "=="}, {"input": "by_length(range(10, 50))", "output": "[]", "ops": "=="}, {"input": "by_length([1])", "output": "['One']", "ops": "=="}, {"input": "by_length(range(100))", "output": "['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']", "ops": "=="}, {"input": "by_length(list(range(7, 16, 5)))", "output": "['Seven']", "ops": "=="}, {"input": "by_length([1, 2, 3, 2, 1])", "output": "['Three', 'Two', 'Two', 'One', 'One']", "ops": "=="}, {"input": "by_length([1, 2, 3, 2, 1, 3])", "output": "['Three', 'Three', 'Two', 'Two', 'One', 'One']", "ops": "=="}, {"input": "by_length([1, 2, 3, 1, 3, 5, 2])", "output": "['Five', 'Three', 'Three', 'Two', 'Two', 'One', 'One']", "ops": "=="}, {"input": "by_length([5, 6, 2, 2, 3, 5, 2, 1])", "output": "['Six', 'Five', 'Five', 'Three', 'Two', 'Two', 'Two', 'One']", "ops": "=="}], "37": [{"input": "div_even_odd(range(4))", "output": "0.0", "ops": "=="}, {"input": "div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14])", "output": "2.0", "ops": "=="}, {"input": "div_even_odd([1, 3, 4, 6, 8, 2])", "output": "4.0", "ops": "=="}, {"input": "div_even_odd([-3])", "output": "0.3333333333333333", "ops": "=="}, {"input": "div_even_odd([3, 1, 2])", "output": "0.6666666666666666", "ops": "=="}, {"input": "div_even_odd([1, 5, 8, 1, 5, 7, 9])", "output": "8.0", "ops": "=="}, {"input": "div_even_odd([1, 6])", "output": "6.0", "ops": "=="}, {"input": "div_even_odd([2, 4])", "output": "-2.0", "ops": "=="}, {"input": "div_even_odd([10, 20, 1, 5, 9, 5, 12, 13])", "output": "10.0", "ops": "=="}, {"input": "div_even_odd([50, 30, 100, 60, 100])", "output": "-50.0", "ops": "=="}, {"input": "div_even_odd([20, 30, 70, 70, 300, 4, 3])", "output": "6.666666666666667", "ops": "=="}, {"input": "div_even_odd([1, 8, 9,  3, 6, 7, 9, 1, 2])", "output": "8.0", "ops": "=="}, {"input": "div_even_odd([1, 2, 8, 9])", "output": "2.0", "ops": "=="}, {"input": "div_even_odd([1, 10, 3, 5])", "output": "10.0", "ops": "=="}, {"input": "div_even_odd([1, 2, 3, 4, 5, 6, 7])", "output": "2.0", "ops": "=="}, {"input": "div_even_odd([1, 3, 5])", "output": "-1.0", "ops": "=="}], "171": [{"input": "count_occurance('awordthatisthadworstpaidhisheigh')", "output": "0", "ops": "=="}, {"input": "count_occurance(\"makeitstuprint\")", "output": "0", "ops": "=="}, {"input": "count_occurance('printstdlenin')", "output": "1", "ops": "=="}, {"input": "count_occurance([])", "output": "0", "ops": "=="}, {"input": "count_occurance(\" stddosdowsdowpssl\")", "output": "1", "ops": "=="}, {"input": "count_occurance('nationalnational')", "output": "0", "ops": "=="}, {"input": "count_occurance(\"helo\")", "output": "0", "ops": "=="}, {"input": "count_occurance(\"\")", "output": "0", "ops": "=="}, {"input": "count_occurance(\"\")", "output": "0", "ops": "=="}], "394": [{"input": "first_non_repeating_character(['a','abc,', 'd'])", "output": "'a'", "ops": "=="}, {"input": "first_non_repeating_character( '')", "output": "None", "ops": "=="}, {"input": "first_non_repeating_character(b'abcabc')", "output": "None", "ops": "=="}, {"input": "first_non_repeating_character(b'abc')", "output": "97", "ops": "=="}, {"input": "first_non_repeating_character(b'ababc')", "output": "99", "ops": "=="}], "127": [{"input": "long_words(5,'sorting list')", "output": "['sorting']", "ops": "=="}, {"input": "long_words(5, 'time in.')", "output": "[]", "ops": "=="}, {"input": "long_words(5,'sorting list')", "output": "['sorting']", "ops": "=="}, {"input": "long_words(3,'replacing items')", "output": "['replacing', 'items']", "ops": "=="}, {"input": "long_words(5,'sorting list')", "output": "['sorting']", "ops": "=="}, {"input": "long_words(10, 'writing python code')", "output": "[]", "ops": "=="}, {"input": "long_words(5,'sorting list')", "output": "['sorting']", "ops": "=="}, {"input": "long_words(13,'program in c is easy')", "output": "[]", "ops": "=="}, {"input": "long_words(13,'c sharp is not gooooooold')", "output": "[]", "ops": "=="}, {"input": "long_words(17,\"using java+jquery to make mobile interface are useful\")", "output": "[]", "ops": "=="}, {"input": "long_words(5,'sorting list')", "output": "['sorting']", "ops": "=="}, {"input": "long_words(2, 'testing equality with coherence')", "output": "['testing', 'equality', 'with', 'coherence']", "ops": "=="}, {"input": "long_words(5,'sorting list')", "output": "['sorting']", "ops": "=="}, {"input": "long_words(3, 'programming in csharp')", "output": "['programming', 'csharp']", "ops": "=="}, {"input": "long_words(7, 'in computingn sorryrying')", "output": "['computingn', 'sorryrying']", "ops": "=="}, {"input": "long_words(5,'sorting list')", "output": "['sorting']", "ops": "=="}, {"input": "long_words(2, u'\\N{BLACK SPADE SUIT}')", "output": "[]", "ops": "=="}, {"input": "long_words(8, 'aardvarks')", "output": "['aardvarks']", "ops": "=="}, {"input": "long_words(5,'sorting list')", "output": "['sorting']", "ops": "=="}, {"input": "long_words(3, 'is this great?')", "output": "['this', 'great?']", "ops": "=="}, {"input": "long_words(5,'sorting list')", "output": "['sorting']", "ops": "=="}, {"input": "long_words(10, \"this is funny!\")", "output": "[]", "ops": "=="}, {"input": "long_words(5,'sorting list')", "output": "['sorting']", "ops": "=="}, {"input": "long_words(3, 'is sorting homemade?')", "output": "['sorting', 'homemade?']", "ops": "=="}], "229": [{"input": "replace_blank('!', u'')", "output": "'!'", "ops": "=="}, {"input": "replace_blank(chr(39), chr(42))", "output": "\"'\"", "ops": "=="}, {"input": "replace_blank = re.compile(r'(\\b|\\B\\.)')", "output": "re.compile('(\\\\b|\\\\B\\\\.)')", "ops": "=="}], "402": [{"input": "is_valid_URL(None)", "output": "False", "ops": "=="}, {"input": "is_valid_URL(\"'\")", "output": "False", "ops": "=="}, {"input": "is_valid_URL(None)", "output": "False", "ops": "=="}, {"input": "is_valid_URL(42 * 'a')", "output": "False", "ops": "=="}, {"input": "is_valid_URL(\"\"\"\\\\http://\"\"\")", "output": "False", "ops": "=="}, {"input": "is_valid_URL(None)", "output": "False", "ops": "=="}], "491": [{"input": "binary_search([], None)", "output": "False", "ops": "=="}, {"input": "binary_search([], 3)", "output": "False", "ops": "=="}, {"input": "binary_search(range(12, 38, 5), 35)", "output": "False", "ops": "=="}, {"input": "binary_search(list(range(1, 7)), 7)", "output": "False", "ops": "=="}, {"input": "binary_search(range(10000), 300)", "output": "True", "ops": "=="}], "287": [{"input": "modular_inverse(range(1, 4, 2), 1, 1)", "output": "0", "ops": "=="}, {"input": "modular_inverse([1]*300, 0, 123)", "output": "0", "ops": "=="}, {"input": "modular_inverse(range(0, 729, 4), 6, 1984)", "output": "0", "ops": "=="}, {"input": "modular_inverse(range(1, 136, 44), 4, 57693715)", "output": "1", "ops": "=="}, {"input": "modular_inverse(range(0, 729, 5), 6, 17096187)", "output": "0", "ops": "=="}, {"input": "modular_inverse([2, 8, 5, 0, 7, 9, 65, 4, 1, 4, 7, 3, 4, 9, 6, 9, 0, 6, 4, 4, 2, 4, 9, 10, 3, 0, 5, 9, 10, 16, 9, 5, 1, 0, 6], 7, 1)", "output": "0", "ops": "=="}], "488": [{"input": "frequency_Of_Largest(12, [10, 22, 12, 15, 16, 14, 108, 119, 105, 141, 173, 165, 180, 150, 163, 168, 103, 158, 130, 146, 163, 166, 175, 133, 116, 98, 120, 70, 89, 64, 61, 87, 153, 135, 96, 133, 111, 87, 66, 156, 81, 79, 159, 125, 174, 152, 110, 102, 101, 119, 81, 121, 95, 100, 120, 81, 104, 71, 178, 145, 60])", "output": "1", "ops": "=="}, {"input": "frequency_Of_Largest(3, [1, 2, 3, 2, 1, 2, 3, 1, 2, 3, 1, 1, 2, 3, 1, 2, 3, 1, 1, 1, 1, 2, 3, 1])", "output": "1", "ops": "=="}, {"input": "frequency_Of_Largest(7, range(1000))", "output": "1", "ops": "=="}], "557": [{"input": "derivative([])", "output": "[]", "ops": "=="}, {"input": "derivative([])", "output": "[]", "ops": "=="}, {"input": "derivative([0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 3, 4, 5, 6, 6, 2, 1, 1, 2, 4, 3, 6, 5, 4, 3, 3, 5, 3])", "output": "[0, 0, 0, 4, 5, 6, 14, 16, 27, 40, 33, 48, 65, 84, 90, 32, 17, 18, 38, 80, 63, 132, 115, 96, 75, 78, 135, 84]", "ops": "=="}, {"input": "derivative(())", "output": "[]", "ops": "=="}, {"input": "derivative([0])", "output": "[]", "ops": "=="}, {"input": "derivative([])", "output": "[]", "ops": "=="}], "323": [{"input": "sum_of_alternates((8, 8))", "output": "(8, 8)", "ops": "=="}, {"input": "sum_of_alternates((21, 3, 4, 15, 17))", "output": "(18, 42)", "ops": "=="}, {"input": "sum_of_alternates((1, 3, 7))", "output": "(3, 8)", "ops": "=="}, {"input": "sum_of_alternates((3, 4, 7))", "output": "(4, 10)", "ops": "=="}, {"input": "sum_of_alternates((0, 3, 4, 3, 2, 7, 4, 1))", "output": "(14, 10)", "ops": "=="}, {"input": "sum_of_alternates((1, 2, 3, 4, 3, 4, 8))", "output": "(10, 15)", "ops": "=="}, {"input": "sum_of_alternates((0,1, 3, 4, 4, 1, 3, 0, 5))", "output": "(6, 15)", "ops": "=="}, {"input": "sum_of_alternates((10, 9, 8, 7, 6, 6, 5))", "output": "(22, 29)", "ops": "=="}, {"input": "sum_of_alternates((5, 5, 8, 8))", "output": "(13, 13)", "ops": "=="}, {"input": "sum_of_alternates((-1, 6, 1))", "output": "(6, 0)", "ops": "=="}, {"input": "sum_of_alternates((1, 1, 1, 7, 6))", "output": "(8, 8)", "ops": "=="}, {"input": "sum_of_alternates((3, 6, 1, 2, 6, 7, 12))", "output": "(15, 22)", "ops": "=="}], "545": [{"input": "median(range(101))", "output": "50", "ops": "=="}, {"input": "median(\"13579\")", "output": "'5'", "ops": "=="}, {"input": "median(range(100))", "output": "49.5", "ops": "=="}, {"input": "median([x for x in range(1, 101)])", "output": "50.5", "ops": "=="}], "53": [{"input": "counting_sort([1, 4, 10, 2, 3, 2, 10, 8, 4, 6, 9, 0, 1, 7, 3, 7, 1, 9, 3, 1, 3, 5, 6, 2, 4, 13, 0, 1])", "output": "[0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 13]", "ops": "=="}, {"input": "counting_sort([9, 8, 7, 6, 5, 4, 3, 2])", "output": "[2, 3, 4, 5, 6, 7, 8, 9]", "ops": "=="}, {"input": "counting_sort([91, 39, 14, 32, 16, 23, 1])", "output": "[1, 14, 16, 23, 32, 39, 91]", "ops": "=="}, {"input": "counting_sort([14, 9, 8, 7, 2, 6, 5])", "output": "[2, 5, 6, 7, 8, 9, 14]", "ops": "=="}, {"input": "counting_sort([3, 2, 4, 1])", "output": "[1, 2, 3, 4]", "ops": "=="}, {"input": "counting_sort([20, 9, 24, 3, 11, 4])", "output": "[3, 4, 9, 11, 20, 24]", "ops": "=="}, {"input": "counting_sort([1, 0, 5, 4, 2, 3])", "output": "[0, 1, 2, 3, 4, 5]", "ops": "=="}, {"input": "print(counting_sort([1, 2]))", "output": "None", "ops": "=="}, {"input": "counting_sort([24, 13, 10, 25, 29, 34, 42])", "output": "[10, 13, 24, 25, 29, 34, 42]", "ops": "=="}, {"input": "counting_sort([99, 65, 40, 12, 34, 56])", "output": "[12, 34, 40, 56, 65, 99]", "ops": "=="}, {"input": "counting_sort([100, 0, 2000, 4001, 7002])", "output": "[0, 100, 2000, 4001, 7002]", "ops": "=="}, {"input": "counting_sort([])", "output": "[]", "ops": "=="}], "470": [{"input": "find_remainder([1, 2, 1], 0, 8)", "output": "1", "ops": "=="}, {"input": "find_remainder([1, 2, 1], 3, 4)", "output": "2", "ops": "=="}, {"input": "find_remainder([1.1, 2.5, 1, 0.5, 0.1], 2, 1.1)", "output": "0.0", "ops": "=="}, {"input": "find_remainder([1,12, 1,1], 1, 12)", "output": "1", "ops": "=="}, {"input": "find_remainder([1, 3, 2], 1, 2)", "output": "1", "ops": "=="}], "100": [{"input": "kth_element(range(1, 13), 5, 2)", "output": "2", "ops": "=="}, {"input": "kth_element(range(11), 6, 6)", "output": "5", "ops": "=="}], "182": [{"input": "count_pairs(['a', 'z'], 0, 2)", "output": "0", "ops": "=="}, {"input": "count_pairs([], 0, 6)", "output": "0", "ops": "=="}, {"input": "count_pairs([3, 5, 1, 4], 0, 2)", "output": "0", "ops": "=="}, {"input": "count_pairs([1, 5], 0, 1)", "output": "0", "ops": "=="}, {"input": "count_pairs([[1], 2], 0, [1])", "output": "0", "ops": "=="}, {"input": "count_pairs([0, 1, 3, 4, 0, 2, 1, 5], 1, 3)", "output": "0", "ops": "=="}, {"input": "count_pairs(['a', 'c', 'b', 'd'], 1, 2)", "output": "0", "ops": "=="}, {"input": "count_pairs([], 1, 1)", "output": "0", "ops": "=="}, {"input": "count_pairs([1, 0, 2, 3, 4, 5], 6, 4)", "output": "2", "ops": "=="}], "413": [{"input": "overlapping([1], [4])", "output": "0", "ops": "=="}, {"input": "overlapping([], [])", "output": "0", "ops": "=="}, {"input": "overlapping([1], [1, 2, 3])", "output": "1", "ops": "=="}, {"input": "overlapping([1], [1])", "output": "1", "ops": "=="}], "486": [{"input": "sort_tuple(sorted([(2, 4), (3, 3), (1, 1)]))", "output": "[(1, 1), (3, 3), (2, 4)]", "ops": "=="}, {"input": "sort_tuple(['/'])", "output": "['/']", "ops": "=="}, {"input": "sort_tuple([x for x in 'ab'])", "output": "['a', 'b']", "ops": "=="}, {"input": "sort_tuple([])", "output": "[]", "ops": "=="}, {"input": "sort_tuple([])", "output": "[]", "ops": "=="}, {"input": "sort_tuple([])", "output": "[]", "ops": "=="}], "560": [{"input": "circular_shift(7, 5)", "output": "'7'", "ops": "=="}, {"input": "circular_shift(97, 4)", "output": "'79'", "ops": "=="}, {"input": "circular_shift(11, 5)", "output": "'11'", "ops": "=="}, {"input": "circular_shift(14, 2)", "output": "'14'", "ops": "=="}, {"input": "circular_shift(98, 122)", "output": "'89'", "ops": "=="}, {"input": "circular_shift(1000, 992)", "output": "'0001'", "ops": "=="}, {"input": "circular_shift(1312, 104)", "output": "'2131'", "ops": "=="}, {"input": "circular_shift(100, 1001)", "output": "'001'", "ops": "=="}, {"input": "circular_shift(5111, 51000)", "output": "'1115'", "ops": "=="}, {"input": "circular_shift(97, 100000)", "output": "'79'", "ops": "=="}, {"input": "circular_shift(-51, -1)", "output": "'-51'", "ops": "=="}, {"input": "circular_shift(15, 2)", "output": "'15'", "ops": "=="}, {"input": "circular_shift(197, 17)", "output": "'791'", "ops": "=="}, {"input": "circular_shift(100, 100)", "output": "'001'", "ops": "=="}, {"input": "circular_shift(110, 122)", "output": "'011'", "ops": "=="}], "656": [{"input": "solve(())", "output": "''", "ops": "=="}, {"input": "solve('cDZ+-2fd78|-267')", "output": "'Cdz+-2FD78|-267'", "ops": "=="}], "117": [{"input": "string_to_list(u'\u0438\u0449\u0435\u043c \u0434\u043e\u043a\u043b\u0430\u0434 ')", "output": "['\u0438\u0449\u0435\u043c', '\u0434\u043e\u043a\u043b\u0430\u0434', '']", "ops": "=="}, {"input": "string_to_list('')", "output": "['']", "ops": "=="}, {"input": "string_to_list(u'write a program')", "output": "['write', 'a', 'program']", "ops": "=="}, {"input": "string_to_list_test = []", "output": "[]", "ops": "=="}], "238": [{"input": "get_total_number_of_sequences(100, 400)", "output": "0", "ops": "=="}, {"input": "get_total_number_of_sequences(5, 3)", "output": "2", "ops": "=="}, {"input": "get_total_number_of_sequences(64, 2)", "output": "1024", "ops": "=="}, {"input": "get_total_number_of_sequences(1024, 10)", "output": "2320518948", "ops": "=="}, {"input": "get_total_number_of_sequences(6, 12)", "output": "0", "ops": "=="}, {"input": "get_total_number_of_sequences(0, 16)", "output": "0", "ops": "=="}, {"input": "get_total_number_of_sequences(195, 14)", "output": "0", "ops": "=="}, {"input": "get_total_number_of_sequences(255, 5)", "output": "8735312", "ops": "=="}, {"input": "get_total_number_of_sequences(256, 3)", "output": "349504", "ops": "=="}, {"input": "get_total_number_of_sequences(1, 0)", "output": "0", "ops": "=="}, {"input": "get_total_number_of_sequences(13, 13)", "output": "0", "ops": "=="}, {"input": "get_total_number_of_sequences(25, 4)", "output": "236", "ops": "=="}, {"input": "get_total_number_of_sequences(26, 11)", "output": "0", "ops": "=="}, {"input": "get_total_number_of_sequences(2100, 31)", "output": "0", "ops": "=="}], "438": [{"input": "multiple_to_single(range(20, 36))", "output": "20212223242526272829303132333435", "ops": "=="}, {"input": "multiple_to_single([0] * 5)", "output": "0", "ops": "=="}, {"input": "multiple_to_single([0] * 2)", "output": "0", "ops": "=="}, {"input": "multiple_to_single([1, 2])", "output": "12", "ops": "=="}, {"input": "multiple_to_single([10, 20, 10, 15])", "output": "10201015", "ops": "=="}, {"input": "multiple_to_single(\"15\")", "output": "15", "ops": "=="}, {"input": "multiple_to_single([0])", "output": "0", "ops": "=="}], "482": [{"input": "first_Factorial_Divisible_Number(20)", "output": "5", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(12)", "output": "4", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(2)", "output": "1", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(8)", "output": "4", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(4)", "output": "3", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(20)", "output": "5", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(7)", "output": "6", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(23)", "output": "22", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(8)", "output": "4", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(12)", "output": "4", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(6)", "output": "3", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(150)", "output": "10", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(100)", "output": "10", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(1000)", "output": "15", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(1000000)", "output": "25", "ops": "=="}], "19": [{"input": "is_woodall(4294967297)", "output": "False", "ops": "=="}, {"input": "is_woodall(16)", "output": "False", "ops": "=="}, {"input": "is_woodall(1135)", "output": "False", "ops": "=="}, {"input": "is_woodall(14956)", "output": "False", "ops": "=="}, {"input": "is_woodall(160)", "output": "False", "ops": "=="}, {"input": "is_woodall(320617942)", "output": "False", "ops": "=="}, {"input": "is_woodall(64612)", "output": "False", "ops": "=="}, {"input": "is_woodall(105)", "output": "False", "ops": "=="}, {"input": "is_woodall(150)", "output": "False", "ops": "=="}, {"input": "is_woodall(15)", "output": "False", "ops": "=="}, {"input": "is_woodall(160)", "output": "False", "ops": "=="}, {"input": "is_woodall(322237145526877)", "output": "False", "ops": "=="}, {"input": "is_woodall(255)", "output": "False", "ops": "=="}, {"input": "is_woodall(499)", "output": "False", "ops": "=="}, {"input": "is_woodall(1549386923)", "output": "False", "ops": "=="}, {"input": "is_woodall(15493869545923)", "output": "False", "ops": "=="}], "43": [{"input": "text_match_string(', lang')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_string(\"   'code'\")", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_string(\"\")", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_string('haskell')", "output": "'Found a match!'", "ops": "=="}, {"input": "text_match_string('haskelll')", "output": "'Found a match!'", "ops": "=="}, {"input": "text_match_string('')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_string('test')", "output": "'Found a match!'", "ops": "=="}, {"input": "text_match_string(' \"foo\".')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_string(\" $100 \")", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_string(\"$10% \")", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_string('foo:20bar') == None", "output": "False", "ops": "=="}], "397": [{"input": "sum_of_digits([\"123a\"])", "output": "6", "ops": "=="}, {"input": "sum_of_digits(['a', '23'])", "output": "5", "ops": "=="}, {"input": "sum_of_digits({\"b\": [23, 4]})", "output": "0", "ops": "=="}, {"input": "sum_of_digits(['a'])", "output": "0", "ops": "=="}, {"input": "sum_of_digits([[100, 20, 3, 8, 'bbb']])", "output": "14", "ops": "=="}, {"input": "sum_of_digits({})", "output": "0", "ops": "=="}, {"input": "sum_of_digits({'foo': 'foobaz'})", "output": "0", "ops": "=="}, {"input": "sum_of_digits({1: 2, 'foo': ['bar', 'biz']})", "output": "1", "ops": "=="}, {"input": "sum_of_digits([10, -3, 2, -1, 3, 11, -3, 5, 6])", "output": "26", "ops": "=="}, {"input": "sum_of_digits([])", "output": "0", "ops": "=="}, {"input": "sum_of_digits([-1010, 100, 1020])", "output": "6", "ops": "=="}, {"input": "sum_of_digits([-20, -40, 0, 40, -45, 100, 1, 5, 25])", "output": "33", "ops": "=="}, {"input": "sum_of_digits([-10, 20, 4, -5])", "output": "12", "ops": "=="}], "468": [{"input": "max_profit([4, 2, 3, 4, 2], 4)", "output": "2", "ops": "=="}, {"input": "max_profit([82,73,1,34,63,55,48,47,57], 6)", "output": "72", "ops": "=="}, {"input": "max_profit([5, 5, 3, 3, 9, 1, 2], 1)", "output": "6", "ops": "=="}, {"input": "max_profit([2, 4, 7, 10, 14, 3, 14], 3)", "output": "23", "ops": "=="}, {"input": "max_profit([3, 4, 7, 9, 10, 8], 10)", "output": "7", "ops": "=="}, {"input": "max_profit([1, 4, 7, 1], 3)", "output": "6", "ops": "=="}, {"input": "max_profit([1, 1, 4, 2, 1, 1], 6)", "output": "3", "ops": "=="}, {"input": "max_profit([1], 1)", "output": "0", "ops": "=="}], "539": [{"input": "car_race_collision(20)", "output": "400", "ops": "=="}, {"input": "car_race_collision(16)", "output": "256", "ops": "=="}, {"input": "car_race_collision(50)", "output": "2500", "ops": "=="}, {"input": "car_race_collision(16)", "output": "256", "ops": "=="}, {"input": "car_race_collision(30)", "output": "900", "ops": "=="}, {"input": "car_race_collision(16)", "output": "256", "ops": "=="}, {"input": "car_race_collision(36)", "output": "1296", "ops": "=="}, {"input": "car_race_collision(1128)", "output": "1272384", "ops": "=="}, {"input": "car_race_collision(11)", "output": "121", "ops": "=="}, {"input": "car_race_collision(12)", "output": "144", "ops": "=="}, {"input": "car_race_collision(11)", "output": "121", "ops": "=="}, {"input": "car_race_collision(11)", "output": "121", "ops": "=="}, {"input": "car_race_collision(12)", "output": "144", "ops": "=="}, {"input": "car_race_collision(1000)", "output": "1000000", "ops": "=="}], "588": [{"input": "encode(\"oe=encoding stuff? I don't want to talk about\")", "output": "\"QG=GNCQDKNG STWFF? k DQN'T WCNT TQ TCLK CBQWT\"", "ops": "=="}, {"input": "encode(\"\")", "output": "''", "ops": "=="}], "18": [{"input": "test_duplicate([])", "output": "False", "ops": "=="}, {"input": "test_duplicate([1] * 1000)", "output": "True", "ops": "=="}, {"input": "test_duplicate([])", "output": "False", "ops": "=="}, {"input": "test_duplicate([1])", "output": "False", "ops": "=="}, {"input": "test_duplicate(())", "output": "False", "ops": "=="}, {"input": "test_duplicate([])", "output": "False", "ops": "=="}, {"input": "test_duplicate(dict(a=1, b=7, c='red', p=1.5))", "output": "False", "ops": "=="}, {"input": "test_duplicate(set(['1', '10', 1, 2, 3, 4, '1', 1.0]))", "output": "False", "ops": "=="}, {"input": "test_duplicate(['aaaabaaa', 'bbdbbbdd'])", "output": "False", "ops": "=="}, {"input": "test_duplicate({})", "output": "False", "ops": "=="}, {"input": "test_duplicate([1, 2, 3])", "output": "False", "ops": "=="}, {"input": "test_duplicate(range(500, 1, 50))", "output": "False", "ops": "=="}, {"input": "test_duplicate([])", "output": "False", "ops": "=="}], "68": [{"input": "is_sublist([], [1])", "output": "False", "ops": "=="}, {"input": "is_sublist([2,], [2])", "output": "True", "ops": "=="}, {"input": "is_sublist([], [0])", "output": "False", "ops": "=="}, {"input": "is_sublist([], [3, 2])", "output": "False", "ops": "=="}, {"input": "is_sublist([1, 2], [3])", "output": "False", "ops": "=="}, {"input": "is_sublist([9, 9, 9, 9, 9], [3, 5])", "output": "False", "ops": "=="}, {"input": "is_sublist([], [1, 6])", "output": "False", "ops": "=="}, {"input": "is_sublist([8, 0], [3, 7, None])", "output": "False", "ops": "=="}, {"input": "is_sublist([], [])", "output": "True", "ops": "=="}, {"input": "is_sublist([9,8], [9,9])", "output": "False", "ops": "=="}, {"input": "is_sublist((), [])", "output": "True", "ops": "=="}, {"input": "is_sublist(['a'], 'a')", "output": "True", "ops": "=="}, {"input": "is_sublist(['foo', 'bar'], ['ba', 'zoo'])", "output": "False", "ops": "=="}, {"input": "is_sublist([], [1])", "output": "False", "ops": "=="}, {"input": "is_sublist([1, 2], [0])", "output": "False", "ops": "=="}, {"input": "is_sublist([1, 1], [1])", "output": "True", "ops": "=="}], "101": [{"input": "snake_to_camel(u'programming-language')", "output": "'Programming-language'", "ops": "=="}, {"input": "snake_to_camel('')", "output": "'_'", "ops": "=="}, {"input": "snake_to_camel('test2')", "output": "'Test2'", "ops": "=="}, {"input": "snake_to_camel('')", "output": "'_'", "ops": "=="}, {"input": "snake_to_camel('python_version')", "output": "'PythonVersion'", "ops": "=="}, {"input": "snake_to_camel('foobar')", "output": "'Foobar'", "ops": "=="}, {"input": "snake_to_camel(u'programming_language')", "output": "'ProgrammingLanguage'", "ops": "=="}, {"input": "snake_to_camel('')", "output": "'_'", "ops": "=="}, {"input": "snake_to_camel(u'programming_language')", "output": "'ProgrammingLanguage'", "ops": "=="}, {"input": "snake_to_camel('')", "output": "'_'", "ops": "=="}], "118": [{"input": "search([1], 1)", "output": "1", "ops": "=="}, {"input": "search(list(range(10**5)), 54)", "output": "1", "ops": "=="}], "165": [{"input": "find_even_Pair([], 0)", "output": "0", "ops": "=="}, {"input": "find_even_Pair(range(1, 9, 3), 3)", "output": "1", "ops": "=="}, {"input": "find_even_Pair([1], 1)", "output": "0", "ops": "=="}, {"input": "find_even_Pair([1, 2, 3, 6], 1)", "output": "0", "ops": "=="}, {"input": "find_even_Pair((1, 2, 0), 2)", "output": "0", "ops": "=="}], "432": [{"input": "check_greater(['a', 'b', 'c', '-'], '-')", "output": "'No, entered number is less than those in the array'", "ops": "=="}, {"input": "check_greater([2, 4, 2, 3, 8, 3, 2, 2, 9], 5)", "output": "'No, entered number is less than those in the array'", "ops": "=="}, {"input": "check_greater([1, 7, 9, 15, 8, 0, -1], 0)", "output": "'No, entered number is less than those in the array'", "ops": "=="}, {"input": "check_greater([1, 0, 1], 1)", "output": "'No, entered number is less than those in the array'", "ops": "=="}, {"input": "check_greater([1], 0.0)", "output": "'No, entered number is less than those in the array'", "ops": "=="}, {"input": "check_greater([9, 0, 1, 2], 5)", "output": "'No, entered number is less than those in the array'", "ops": "=="}, {"input": "check_greater([97, 7, 4, 5, 2, 8], 5)", "output": "'No, entered number is less than those in the array'", "ops": "=="}, {"input": "check_greater([5, 2, 10, 9, 7, 3], 1)", "output": "'No, entered number is less than those in the array'", "ops": "=="}, {"input": "check_greater([-2, 1, 0, 4], 6)", "output": "'Yes, the entered number is greater than those in the array'", "ops": "=="}, {"input": "check_greater([-4, 2, 1, 0], 8)", "output": "'Yes, the entered number is greater than those in the array'", "ops": "=="}, {"input": "check_greater([97, 73, 79, 79], 97)", "output": "'No, entered number is less than those in the array'", "ops": "=="}, {"input": "check_greater([0, 12, 0], 0)", "output": "'No, entered number is less than those in the array'", "ops": "=="}, {"input": "check_greater([1, 10, 100, 100, 200, 0], 0.001)", "output": "'No, entered number is less than those in the array'", "ops": "=="}], "528": [{"input": "filter_by_prefix(['name:john, name2:doe'], 'name')", "output": "['name:john, name2:doe']", "ops": "=="}, {"input": "filter_by_prefix([], ['asd', 'ab'])", "output": "[]", "ops": "=="}, {"input": "filter_by_prefix([], 'xxxx')", "output": "[]", "ops": "=="}, {"input": "filter_by_prefix([], 'xxx')", "output": "[]", "ops": "=="}, {"input": "filter_by_prefix(['name:', 'names:'], 'name: asd')", "output": "[]", "ops": "=="}, {"input": "filter_by_prefix({}, ['age: 1', 'age: 2'])", "output": "[]", "ops": "=="}], "140": [{"input": "pancake_sort([])", "output": "[]", "ops": "=="}, {"input": "pancake_sort([-10, 14, 26, 36, 44])", "output": "[-10, 14, 26, 36, 44]", "ops": "=="}, {"input": "pancake_sort([2, 3, 4, 5, 5, 2, 2, 8, 1, -3, -3])", "output": "[-3, -3, 1, 2, 2, 2, 3, 4, 5, 5, 8]", "ops": "=="}, {"input": "pancake_sort([3, 2, 8, 8, 1, 2, 3, 3, 10, -1, 2, 4, 4, 5])", "output": "[-1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 8, 8, 10]", "ops": "=="}, {"input": "pancake_sort([30, 45, 32, 12, 25])", "output": "[12, 25, 30, 32, 45]", "ops": "=="}, {"input": "pancake_sort([31, 82, 43, 33, 41])", "output": "[31, 33, 41, 43, 82]", "ops": "=="}, {"input": "pancake_sort([62, 69, 85, 63, 88])", "output": "[62, 63, 69, 85, 88]", "ops": "=="}, {"input": "pancake_sort([21, 41, 23, 35, 13])", "output": "[13, 21, 23, 35, 41]", "ops": "=="}, {"input": "pancake_sort([0, 20, 1, -9, -90])", "output": "[-90, -9, 0, 1, 20]", "ops": "=="}, {"input": "pancake_sort([1, 2, 4, 23, 25])", "output": "[1, 2, 4, 23, 25]", "ops": "=="}, {"input": "pancake_sort([4, 783, 5, 73, 2])", "output": "[2, 4, 5, 73, 783]", "ops": "=="}, {"input": "pancake_sort([106, 42, 55, 71])", "output": "[42, 55, 71, 106]", "ops": "=="}, {"input": "pancake_sort([23, 43, 42, 4, 43])", "output": "[4, 23, 42, 43, 43]", "ops": "=="}, {"input": "pancake_sort([33, 15, 29, 56, 21])", "output": "[15, 21, 29, 33, 56]", "ops": "=="}, {"input": "pancake_sort([1, 2, 3, 5, 5, 7, 14, 17, -6, 10, 7, 11, 13, 2, -1])", "output": "[-6, -1, 1, 2, 2, 3, 5, 5, 7, 7, 10, 11, 13, 14, 17]", "ops": "=="}], "151": [{"input": "merge_sort('')", "output": "''", "ops": "=="}, {"input": "merge_sort([])", "output": "[]", "ops": "=="}], "200": [{"input": "chkList(list(range(0, 1000, 10)))", "output": "False", "ops": "=="}, {"input": "chkList([]) == False", "output": "True", "ops": "=="}, {"input": "chkList(['one', 'One.two', 'One.TwoTwoTwoTwoTwo'])", "output": "False", "ops": "=="}, {"input": "chkList([])", "output": "False", "ops": "=="}, {"input": "chkList(['myserver', 'dbServer1','mysqlDb Database'])", "output": "False", "ops": "=="}, {"input": "chkList(['Cit', 'Stony'])", "output": "False", "ops": "=="}, {"input": "chkList(['eating-at', 'bigdata'])", "output": "False", "ops": "=="}, {"input": "chkList(['One', 'Three'])", "output": "False", "ops": "=="}, {"input": "chkList([])", "output": "False", "ops": "=="}, {"input": "chkList('spam')", "output": "False", "ops": "=="}, {"input": "chkList(['foo', 'notmyself', 3])", "output": "False", "ops": "=="}, {"input": "chkList(['aAa_b_Aa__b_'])", "output": "True", "ops": "=="}, {"input": "chkList([])", "output": "False", "ops": "=="}, {"input": "chkList([\"\", '', 'abc'])", "output": "False", "ops": "=="}, {"input": "chkList('')", "output": "False", "ops": "=="}, {"input": "chkList(['eight', 'eight', 'fifth'])", "output": "False", "ops": "=="}, {"input": "chkList([1])", "output": "True", "ops": "=="}, {"input": "chkList([1])", "output": "True", "ops": "=="}], "143": [{"input": "sum_Pairs(range(16), 10)", "output": "165", "ops": "=="}, {"input": "sum_Pairs([1, 1, 4, 2, 1, 1], 0)", "output": "0", "ops": "=="}, {"input": "sum_Pairs([0, 2, 8, 3, 0, 1, 5, 7], 3)", "output": "16", "ops": "=="}, {"input": "sum_Pairs(range(8, 27), 3)", "output": "4", "ops": "=="}, {"input": "sum_Pairs([-1, 2, 6, 8, 3, 9, 5, 4, 125, 63, 80], 5)", "output": "28", "ops": "=="}], "257": [{"input": "count_odd(range(50))", "output": "25", "ops": "=="}, {"input": "count_odd([True, False, True, False, False, False]) == (3*3*4*5*7*8*9) == 144 + 6 + 24", "output": "False", "ops": "=="}, {"input": "count_odd([0, 10000000000000000000])", "output": "0", "ops": "=="}, {"input": "count_odd([2, -1, 10, 1, 1])", "output": "3", "ops": "=="}, {"input": "count_odd([0, -1, -99, -72, -7, 5, 2])", "output": "4", "ops": "=="}, {"input": "count_odd([11, 21, 31])", "output": "3", "ops": "=="}, {"input": "count_odd([-20, 15, 8, 3, 15, 7, -2, -4])", "output": "4", "ops": "=="}, {"input": "count_odd([2, 3, 4, 5, 10])", "output": "2", "ops": "=="}, {"input": "count_odd([1, 4, 2, 1, 0])", "output": "2", "ops": "=="}, {"input": "count_odd([2 ** 31 - 1])", "output": "1", "ops": "=="}, {"input": "count_odd([1, -2, 3, 4, -10])", "output": "2", "ops": "=="}, {"input": "count_odd([0, -7, -51, 0])", "output": "2", "ops": "=="}, {"input": "count_odd(\"\")", "output": "0", "ops": "=="}, {"input": "count_odd([3, -5, 6, 3, -7, 2])", "output": "4", "ops": "=="}], "314": [{"input": "find_Max_Len_Even(\" I'm a pizza from my friend 'Maggie' that he ordered me...\")", "output": "\"'Maggie'\"", "ops": "=="}, {"input": "find_Max_Len_Even(' abcdefghij')", "output": "'abcdefghij'", "ops": "=="}, {"input": "find_Max_Len_Even([])", "output": "'-1'", "ops": "=="}, {"input": "find_Max_Len_Even([])", "output": "'-1'", "ops": "=="}], "473": [{"input": "replace_char(\" \", 'a', '')", "output": "' '", "ops": "=="}], "479": [{"input": "get_max_occuring_char(\" It's an \\n awfull\\n\\n\")", "output": "' '", "ops": "=="}], "492": [{"input": "calculate_polygons(20, 1, 1, 16, 3)", "output": "[]", "ops": "=="}, {"input": "calculate_polygons(3, 1, 0, 0, 0)", "output": "[]", "ops": "=="}, {"input": "calculate_polygons(5, 4, 7, 11, 10) == True", "output": "False", "ops": "=="}], "459": [{"input": "Extract([])", "output": "[]", "ops": "=="}], "658": [{"input": "generate_integers(1317, 5)", "output": "[6, 8]", "ops": "=="}, {"input": "generate_integers(7555789634181964595630, 196)", "output": "[]", "ops": "=="}, {"input": "generate_integers(3, 0)", "output": "[2]", "ops": "=="}, {"input": "generate_integers(17, 180)", "output": "[]", "ops": "=="}, {"input": "generate_integers(22, 3522)", "output": "[]", "ops": "=="}, {"input": "generate_integers(-1, 4)", "output": "[2, 4]", "ops": "=="}, {"input": "generate_integers(0, 25)", "output": "[2, 4, 6, 8]", "ops": "=="}, {"input": "generate_integers(22, 129)", "output": "[]", "ops": "=="}, {"input": "generate_integers(50, 17)", "output": "[]", "ops": "=="}, {"input": "generate_integers(50, 49)", "output": "[]", "ops": "=="}, {"input": "generate_integers(92, 8457573)", "output": "[]", "ops": "=="}], "89": [{"input": "len_log(['small', 'big', 'large'])", "output": "5", "ops": "=="}, {"input": "len_log(['zinga', 'zoo', 'zingas', 'zoozoo'])", "output": "6", "ops": "=="}, {"input": "len_log(['', 'tiny'])", "output": "4", "ops": "=="}, {"input": "len_log(['hi', [], 'bye'])", "output": "3", "ops": "=="}, {"input": "len_log(['small', 'big', 'bigger'])", "output": "6", "ops": "=="}, {"input": "len_log(['python\\nfast!', '', 'bigdata'])", "output": "12", "ops": "=="}], "340": [{"input": "set_to_tuple([1])", "output": "(1,)", "ops": "=="}, {"input": "set_to_tuple(set())", "output": "()", "ops": "=="}, {"input": "set_to_tuple(set())", "output": "()", "ops": "=="}, {"input": "type(set_to_tuple(range(100))) is tuple", "output": "True", "ops": "=="}, {"input": "set_to_tuple(set('ABCDEF'))", "output": "('D', 'B', 'A', 'F', 'C', 'E')", "ops": "=="}, {"input": "set_to_tuple(set([1, 2, 3, 4, 5]))", "output": "(1, 2, 3, 4, 5)", "ops": "=="}, {"input": "set_to_tuple([1, 2, 3, 4, 5, 6])", "output": "(1, 2, 3, 4, 5, 6)", "ops": "=="}, {"input": "set_to_tuple([])", "output": "()", "ops": "=="}, {"input": "set_to_tuple(set([1, 15, 17]))", "output": "(1, 17, 15)", "ops": "=="}, {"input": "set_to_tuple(set_to_tuple([{11, 22, 2, 4, 8, 16}] ) )", "output": "({2, 4, 8, 11, 16, 22},)", "ops": "=="}], "414": [{"input": "max_Product([])", "output": "'No pairs exists'", "ops": "=="}, {"input": "max_Product([])", "output": "'No pairs exists'", "ops": "=="}, {"input": "max_Product([1] * 25)", "output": "(1, 1)", "ops": "=="}, {"input": "max_Product(\"\")", "output": "'No pairs exists'", "ops": "=="}, {"input": "max_Product([0])", "output": "'No pairs exists'", "ops": "=="}, {"input": "max_Product([])", "output": "'No pairs exists'", "ops": "=="}, {"input": "max_Product([1])", "output": "'No pairs exists'", "ops": "=="}, {"input": "max_Product([0])", "output": "'No pairs exists'", "ops": "=="}], "507": [{"input": "sum_product([10]*10)", "output": "(100, 10000000000)", "ops": "=="}, {"input": "sum_product([0])", "output": "(0, 0)", "ops": "=="}, {"input": "sum_product([1, 50])", "output": "(51, 50)", "ops": "=="}, {"input": "sum_product([1, 2, 3, 4])", "output": "(10, 24)", "ops": "=="}, {"input": "sum_product([0])", "output": "(0, 0)", "ops": "=="}, {"input": "sum_product([0] * 300)", "output": "(0, 0)", "ops": "=="}, {"input": "sum_product([]) is None", "output": "False", "ops": "=="}], "189": [{"input": "count_Intgral_Points(4, 2, 8, 3)", "output": "0", "ops": "=="}, {"input": "count_Intgral_Points(8, 1, 16, 16)", "output": "98", "ops": "=="}, {"input": "count_Intgral_Points(0, 2, 4, 8)", "output": "15", "ops": "=="}, {"input": "count_Intgral_Points(2, 5, 1, 10)", "output": "-8", "ops": "=="}, {"input": "count_Intgral_Points(2, 4, 10, 4)", "output": "-7", "ops": "=="}, {"input": "count_Intgral_Points(4, 5, 8, 9)", "output": "9", "ops": "=="}, {"input": "count_Intgral_Points(2, 4, 4, 8)", "output": "3", "ops": "=="}, {"input": "count_Intgral_Points(2, 0, 4, 8)", "output": "7", "ops": "=="}, {"input": "count_Intgral_Points(2, 2, 5, 2)", "output": "-2", "ops": "=="}, {"input": "count_Intgral_Points(5, 6, 11, 18)", "output": "55", "ops": "=="}, {"input": "count_Intgral_Points(15, 9, 40, 10)", "output": "0", "ops": "=="}], "194": [{"input": "first([1, 2, 3, 4, 5, 6, 6], 1, 6)", "output": "0", "ops": "=="}, {"input": "first([1], 1, 1)", "output": "0", "ops": "=="}, {"input": "first([], 0.1, 0.3)", "output": "-1", "ops": "=="}], "426": [{"input": "change_date_format('2015-01-01')", "output": "'01-01-2015'", "ops": "=="}, {"input": "change_date_format('')", "output": "''", "ops": "=="}, {"input": "change_date_format('2013-02-28 16:07:43.944')", "output": "'28-02-2013 16:07:43.944'", "ops": "=="}, {"input": "change_date_format(\"\")", "output": "''", "ops": "=="}, {"input": "change_date_format(u'2017-01-01T00:00:00%Z')", "output": "'01-01-2017T00:00:00%Z'", "ops": "=="}], "448": [{"input": "check_Triangle(5, 4, 3, 3, 3, 3)", "output": "'No'", "ops": "=="}, {"input": "check_Triangle(16, 3, 3, 3, 7, 2)", "output": "'Yes'", "ops": "=="}, {"input": "check_Triangle(12, 1, 1, 9, 1, 1)", "output": "'Yes'", "ops": "=="}, {"input": "check_Triangle(9, 9, 9, 3, 3, 9)", "output": "'Yes'", "ops": "=="}, {"input": "check_Triangle(20, 2, 1, 1, 1, 15)", "output": "'Yes'", "ops": "=="}, {"input": "check_Triangle(2, 1, 5, 4, 2, 0)", "output": "'Yes'", "ops": "=="}, {"input": "check_Triangle(127, -2, 0, -17, -125, -117)", "output": "'Yes'", "ops": "=="}, {"input": "check_Triangle(12210111, 76210131, 1, 122101, 7211013, 14212411)", "output": "'Yes'", "ops": "=="}, {"input": "check_Triangle(121213, 1, 1321021212, 100221312, 1, 121413121)", "output": "'Yes'", "ops": "=="}], "471": [{"input": "check_Consecutive([1])", "output": "True", "ops": "=="}, {"input": "check_Consecutive([1])", "output": "True", "ops": "=="}, {"input": "check_Consecutive([1])", "output": "True", "ops": "=="}, {"input": "check_Consecutive([1])", "output": "True", "ops": "=="}, {"input": "check_Consecutive(range(1, 5))", "output": "True", "ops": "=="}, {"input": "check_Consecutive([1])", "output": "True", "ops": "=="}], "508": [{"input": "rolling_max(iter([5, 3, 2, 3, 1]))", "output": "[5, 5, 5, 5, 5]", "ops": "=="}, {"input": "rolling_max([[4, 3, 5, 6], [2, 2, 3, 3, 4]])", "output": "[[4, 3, 5, 6], [4, 3, 5, 6]]", "ops": "=="}, {"input": "rolling_max(2 * [0.5])", "output": "[0.5, 0.5]", "ops": "=="}, {"input": "rolling_max([] * 5)", "output": "[]", "ops": "=="}, {"input": "rolling_max(['crunchy frog', 'rabbit', 'fox', \"stop!\"])", "output": "['crunchy frog', 'rabbit', 'rabbit', 'stop!']", "ops": "=="}], "295": [{"input": "get_Inv_Count([], 1)", "output": "0", "ops": "=="}, {"input": "get_Inv_Count([], 0)", "output": "0", "ops": "=="}, {"input": "get_Inv_Count(range(1, 170, 4), 7)", "output": "0", "ops": "=="}, {"input": "get_Inv_Count([1], 0)", "output": "0", "ops": "=="}, {"input": "get_Inv_Count([0, 1, 0], 2)", "output": "0", "ops": "=="}, {"input": "get_Inv_Count([], 1)", "output": "0", "ops": "=="}, {"input": "get_Inv_Count([1, 2], 0)", "output": "0", "ops": "=="}, {"input": "get_Inv_Count([1, 2, 3, 3], 4)", "output": "0", "ops": "=="}, {"input": "get_Inv_Count([1, 1, 1, 1, 1, 5, 5, 1, 2, 7, 8, 2, 102, 102, 1, 2, 3, 5, 6, 7, 1, 1], 8)", "output": "2", "ops": "=="}, {"input": "get_Inv_Count([103, 1, 2, 3, 4, 5, 103, 2, 1, 6, 7, 102, 3, 52, 1, 6, 1, 2, 1, 2, 2, 3, 4, 8, 2, 2, 3, 1], 1)", "output": "0", "ops": "=="}], "368": [{"input": "lateralsurface_cuboid(50, 99, 81)", "output": "24138", "ops": "=="}, {"input": "lateralsurface_cuboid(22, 13, 29)", "output": "2030", "ops": "=="}, {"input": "lateralsurface_cuboid(14, 29, 44)", "output": "3784", "ops": "=="}, {"input": "lateralsurface_cuboid(45, 62, 122)", "output": "26108", "ops": "=="}, {"input": "lateralsurface_cuboid(11, 8, 9)", "output": "342", "ops": "=="}, {"input": "lateralsurface_cuboid(15, 34, 56)", "output": "5488", "ops": "=="}, {"input": "lateralsurface_cuboid(100, 250, 300)", "output": "210000", "ops": "=="}, {"input": "lateralsurface_cuboid(9, 50, 80)", "output": "9440", "ops": "=="}, {"input": "lateralsurface_cuboid(9, 19, 8)", "output": "448", "ops": "=="}, {"input": "lateralsurface_cuboid(4, 10, 3)", "output": "84", "ops": "=="}, {"input": "lateralsurface_cuboid(9, 18, 4)", "output": "216", "ops": "=="}, {"input": "lateralsurface_cuboid(2, 4, 1)", "output": "12", "ops": "=="}, {"input": "lateralsurface_cuboid(15, 16, 15)", "output": "930", "ops": "=="}, {"input": "lateralsurface_cuboid(12, 20, 30)", "output": "1920", "ops": "=="}, {"input": "lateralsurface_cuboid(20, 15, 60)", "output": "4200", "ops": "=="}], "523": [{"input": "largest_divisor(14)", "output": "7", "ops": "=="}, {"input": "largest_divisor(52)", "output": "26", "ops": "=="}, {"input": "largest_divisor(500)", "output": "250", "ops": "=="}, {"input": "largest_divisor(99)", "output": "33", "ops": "=="}, {"input": "largest_divisor(7919)", "output": "1", "ops": "=="}, {"input": "largest_divisor(500)", "output": "250", "ops": "=="}, {"input": "largest_divisor(49999)", "output": "1", "ops": "=="}, {"input": "largest_divisor(524)", "output": "262", "ops": "=="}, {"input": "largest_divisor(0)", "output": "None", "ops": "=="}, {"input": "largest_divisor(50)", "output": "25", "ops": "=="}, {"input": "largest_divisor(101)", "output": "1", "ops": "=="}, {"input": "largest_divisor(949)", "output": "73", "ops": "=="}, {"input": "largest_divisor(1000*1000)", "output": "500000", "ops": "=="}], "33": [{"input": "find_missing([1] * 7, 3)", "output": "2", "ops": "=="}, {"input": "find_missing(range(1, 101), 25)", "output": "-1", "ops": "=="}, {"input": "find_missing(list(\"abcdef\"), 3) == []", "output": "False", "ops": "=="}, {"input": "find_missing(range(9), 4)", "output": "-1", "ops": "=="}, {"input": "find_missing(['a', 'b', 'c', 'd'], 1)", "output": "-1", "ops": "=="}, {"input": "find_missing(range(100000), 62320)", "output": "-1", "ops": "=="}], "42": [{"input": "text_match(u'aab_b\u00e4cccd')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match(u'aab_\\u0300b\\u0440\\u043d_\\u043c\\u0430\\u0440\\u044b\\u0442\\u043d')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match(u'aab abb abc')", "output": "'Not matched!'", "ops": "=="}], "393": [{"input": "check_distinct({1, 4, 5, 6})", "output": "True", "ops": "=="}, {"input": "check_distinct([])", "output": "True", "ops": "=="}, {"input": "check_distinct((\"x\", 4, 6, 8, 1, (2, 3, 4, 5)))", "output": "True", "ops": "=="}, {"input": "list(filter(check_distinct, ([])))", "output": "[]", "ops": "=="}, {"input": "list(filter(check_distinct, ([3], [3, 4], [6, 4])))", "output": "[[3], [3, 4], [6, 4]]", "ops": "=="}, {"input": "check_distinct(tuple())", "output": "True", "ops": "=="}, {"input": "check_distinct([])", "output": "True", "ops": "=="}, {"input": "check_distinct([])", "output": "True", "ops": "=="}], "357": [{"input": "moddiv_list([0], [1, 1, 1, 1])", "output": "[0]", "ops": "=="}, {"input": "moddiv_list([0], [-1])", "output": "[0]", "ops": "=="}, {"input": "moddiv_list([0], [5])", "output": "[0]", "ops": "=="}, {"input": "moddiv_list([], [7, 4, 11, 3])", "output": "[]", "ops": "=="}], "525": [{"input": "remove_duplicates([0, 1, 0, 1, 0, 1])", "output": "[]", "ops": "=="}, {"input": "remove_duplicates([22, 43, 99, 33, 100, 5])", "output": "[22, 43, 99, 33, 100, 5]", "ops": "=="}, {"input": "remove_duplicates(['aAa', 'aaa', 'bb', 'AAAa', 'Aab'])", "output": "['aAa', 'aaa', 'bb', 'AAAa', 'Aab']", "ops": "=="}, {"input": "remove_duplicates({\"hi\": 1, \"okay\": 2})", "output": "['hi']", "ops": "=="}, {"input": "remove_duplicates([1,2,3,3])", "output": "[1, 2]", "ops": "=="}, {"input": "remove_duplicates([0])", "output": "[0]", "ops": "=="}, {"input": "remove_duplicates(['a', 'A', 'B', 1, 2, 3])", "output": "['a', 'A', 'B', 1, 2, 3]", "ops": "=="}, {"input": "remove_duplicates([2 * n  for n  in range(8)])", "output": "[0, 2, 4, 6, 8, 10, 12, 14]", "ops": "=="}], "657": [{"input": "string_to_md5(None)", "output": "None", "ops": "=="}, {"input": "string_to_md5(None)", "output": "None", "ops": "=="}, {"input": "string_to_md5(\"\")", "output": "None", "ops": "=="}], "181": [{"input": "find_character(('HiThere1'))", "output": "(['H', 'T'], ['i', 'h', 'e', 'r', 'e'], ['1'], [])", "ops": "=="}, {"input": "find_character(\"\")", "output": "([], [], [], [])", "ops": "=="}, {"input": "find_character(\"\")", "output": "([], [], [], [])", "ops": "=="}], "253": [{"input": "words_ae(u\"\u00eay!\")", "output": "[]", "ops": "=="}, {"input": "words_ae(\"\")", "output": "[]", "ops": "=="}], "469": [{"input": "add_pairwise(())", "output": "()", "ops": "=="}, {"input": "add_pairwise((5, 6))!= (6, 5)", "output": "True", "ops": "=="}, {"input": "add_pairwise(())", "output": "()", "ops": "=="}, {"input": "add_pairwise((4, 5, 6, 7, 8, 9, 10))", "output": "(9, 11, 13, 15, 17, 19)", "ops": "=="}, {"input": "add_pairwise((\"foo\",))", "output": "()", "ops": "=="}, {"input": "add_pairwise(range(7, 9))", "output": "(15,)", "ops": "=="}, {"input": "add_pairwise(())", "output": "()", "ops": "=="}], "7": [{"input": "square_nums([31, 32])", "output": "[961, 1024]", "ops": "=="}, {"input": "square_nums([])", "output": "[]", "ops": "=="}, {"input": "square_nums([1, 1])", "output": "[1, 1]", "ops": "=="}, {"input": "square_nums([5])", "output": "[25]", "ops": "=="}, {"input": "square_nums([2])", "output": "[4]", "ops": "=="}, {"input": "square_nums([1])", "output": "[1]", "ops": "=="}, {"input": "square_nums([])", "output": "[]", "ops": "=="}, {"input": "square_nums({})", "output": "[]", "ops": "=="}, {"input": "square_nums(tuple())", "output": "[]", "ops": "=="}, {"input": "square_nums([31, 44])", "output": "[961, 1936]", "ops": "=="}, {"input": "sorted(square_nums([20, 40]))", "output": "[400, 1600]", "ops": "=="}, {"input": "square_nums([])", "output": "[]", "ops": "=="}, {"input": "square_nums([21, 2, 9, 15, 19, 4, 16, 23])", "output": "[441, 4, 81, 225, 361, 16, 256, 529]", "ops": "=="}, {"input": "square_nums([1])", "output": "[1]", "ops": "=="}], "167": [{"input": "frequency({3, 2, 94, 12, 21, 3, 13}, 5)", "output": "0", "ops": "=="}, {"input": "frequency([3, 0, 1, 0, 5, 1], 1)", "output": "2", "ops": "=="}, {"input": "frequency({-14, -12, -6, -9, -2, 6, 6, 12}, 0)", "output": "0", "ops": "=="}, {"input": "frequency([], 0)", "output": "0", "ops": "=="}, {"input": "frequency([1, 2], 1)", "output": "1", "ops": "=="}, {"input": "frequency([0, 0, 1, 0, 0, 1, 0, 1, 0, 2], 1)", "output": "3", "ops": "=="}, {"input": "frequency([], 1)", "output": "0", "ops": "=="}, {"input": "frequency([0,2,1,2,3,1, 4], 1)", "output": "2", "ops": "=="}, {"input": "frequency([0, 1, 2, 3, 1, 2], 0)", "output": "1", "ops": "=="}], "502": [{"input": "truncate_number(123.456) + 1e21", "output": "1e+21", "ops": "=="}, {"input": "truncate_number(123.456e-50) + 1e21", "output": "1e+21", "ops": "=="}, {"input": "truncate_number(-123.456e-50) - 1e11", "output": "-99999999999.0", "ops": "=="}, {"input": "truncate_number(-(2.6 + 4.7))", "output": "0.6999999999999993", "ops": "=="}, {"input": "truncate_number(-10)", "output": "0.0", "ops": "=="}, {"input": "truncate_number(-5.2)", "output": "0.7999999999999998", "ops": "=="}, {"input": "int(truncate_number(1/3)*1000) - int(1000/2)", "output": "-167", "ops": "=="}, {"input": "truncate_number(-0.5)", "output": "0.5", "ops": "=="}, {"input": "truncate_number(18876123.e6)", "output": "0.0", "ops": "=="}, {"input": "truncate_number(1/7) == 2", "output": "False", "ops": "=="}, {"input": "truncate_number(-1000000) < 0", "output": "False", "ops": "=="}, {"input": "truncate_number(-0.0) == 0.0", "output": "True", "ops": "=="}, {"input": "truncate_number(-1.33)", "output": "0.6699999999999999", "ops": "=="}, {"input": "truncate_number(-5) == -4", "output": "False", "ops": "=="}], "578": [{"input": "starts_one_ends(11)", "output": "18000000000", "ops": "=="}, {"input": "starts_one_ends(6)", "output": "180000", "ops": "=="}, {"input": "starts_one_ends(7)", "output": "1800000", "ops": "=="}, {"input": "starts_one_ends(10)", "output": "1800000000", "ops": "=="}, {"input": "starts_one_ends(13)", "output": "1800000000000", "ops": "=="}, {"input": "starts_one_ends(6)", "output": "180000", "ops": "=="}, {"input": "starts_one_ends(7)", "output": "1800000", "ops": "=="}, {"input": "starts_one_ends(8)", "output": "18000000", "ops": "=="}, {"input": "starts_one_ends(100)", "output": "1800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "ops": "=="}, {"input": "starts_one_ends(6)", "output": "180000", "ops": "=="}, {"input": "starts_one_ends(101)", "output": "18000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "ops": "=="}], "105": [{"input": "add_lists([[0, 1]], (2, 3, 4, 5, 6))", "output": "(2, 3, 4, 5, 6, [0, 1])", "ops": "=="}, {"input": "add_lists([21], [22, 23])", "output": "(22, 23, 21)", "ops": "=="}, {"input": "add_lists([], (0, 1))", "output": "(0, 1)", "ops": "=="}], "442": [{"input": "largest_neg(range(101))", "output": "0", "ops": "=="}, {"input": "largest_neg([4])", "output": "4", "ops": "=="}, {"input": "largest_neg([1])", "output": "1", "ops": "=="}, {"input": "largest_neg([2])", "output": "2", "ops": "=="}, {"input": "largest_neg([0])", "output": "0", "ops": "=="}, {"input": "largest_neg([2, 3, 4, 9, 2])", "output": "2", "ops": "=="}, {"input": "largest_neg([1])", "output": "1", "ops": "=="}, {"input": "largest_neg([0])", "output": "0", "ops": "=="}, {"input": "largest_neg([-1, 0, 1, -2])", "output": "-2", "ops": "=="}, {"input": "largest_neg([\"0\", \"-1\", \"1\", \"-2\", \"2\"])", "output": "'-1'", "ops": "=="}], "70": [{"input": "comb_sort([1, 3, 2, 4, 99])", "output": "[1, 2, 3, 4, 99]", "ops": "=="}, {"input": "comb_sort([51, 33, 11, 51, 41])", "output": "[11, 33, 41, 51, 51]", "ops": "=="}, {"input": "comb_sort([71, 49, 28, 10, 71, 61])", "output": "[10, 28, 49, 61, 71, 71]", "ops": "=="}, {"input": "comb_sort([12, 68, 32, 4, 293])", "output": "[4, 12, 32, 68, 293]", "ops": "=="}, {"input": "comb_sort([332, 825, 995, 21, 23, 14, 16, 47, 9, 32, 9, 11, 71, 61, 411])", "output": "[9, 9, 11, 14, 16, 21, 23, 32, 47, 61, 71, 332, 411, 825, 995]", "ops": "=="}, {"input": "comb_sort([0, 1, 3, 99, 274, 32])", "output": "[0, 1, 3, 32, 99, 274]", "ops": "=="}, {"input": "comb_sort([0, 32, 99, 11, 27, 394])", "output": "[0, 11, 27, 32, 99, 394]", "ops": "=="}, {"input": "comb_sort([1, 3, 4, 1, 5, 0, 1, 1, 1])", "output": "[0, 1, 1, 1, 1, 1, 3, 4, 5]", "ops": "=="}, {"input": "comb_sort([12, 54, 41])", "output": "[12, 41, 54]", "ops": "=="}, {"input": "comb_sort([8, 43, 12, 41])", "output": "[8, 12, 41, 43]", "ops": "=="}, {"input": "comb_sort([83, 2, 13, 10, 19, 38, 24, 35, 28, 20, 15, 8, 25, 11, 29, 19, 40])", "output": "[2, 8, 10, 11, 13, 15, 19, 19, 20, 24, 25, 28, 29, 35, 38, 40, 83]", "ops": "=="}, {"input": "comb_sort([0, 1, 3, 6, 5])", "output": "[0, 1, 3, 5, 6]", "ops": "=="}, {"input": "comb_sort([9, 99, 29, 88, 24, 11, 38, 17, 24, 13, 92, 33, 99, 21, 54, 6, 83, 90])", "output": "[6, 9, 11, 13, 17, 21, 24, 24, 29, 33, 38, 54, 83, 88, 90, 92, 99, 99]", "ops": "=="}], "157": [{"input": "min_Ops(range(9), 5, 7)", "output": "-1", "ops": "=="}, {"input": "min_Ops([-4, -1, 3, 5, 2], 5, 7)", "output": "-1", "ops": "=="}, {"input": "min_Ops(range(1, 5), 7, 3)", "output": "-1", "ops": "=="}, {"input": "min_Ops([21, 45, 9, 33, 8], 4, 4)", "output": "18", "ops": "=="}, {"input": "min_Ops([60, 8, 27, 42, 24], 6, 2)", "output": "-1", "ops": "=="}, {"input": "min_Ops([40, 71, 121, 150, 179], 4, 8)", "output": "-1", "ops": "=="}], "252": [{"input": "count_integer([1, -2])", "output": "2", "ops": "=="}, {"input": "count_integer([2, 3, 4, 5, 6, 7, 10])", "output": "7", "ops": "=="}, {"input": "count_integer([True, False, True, 1])", "output": "4", "ops": "=="}, {"input": "count_integer([(), []])", "output": "0", "ops": "=="}, {"input": "count_integer([True, False, True, True])", "output": "4", "ops": "=="}, {"input": "count_integer({1:2,3:4})", "output": "2", "ops": "=="}, {"input": "count_integer([])", "output": "0", "ops": "=="}, {"input": "count_integer([1, \"2\", \"three\"])", "output": "1", "ops": "=="}], "145": [{"input": "ascii_value_string.__class__.__name__", "output": "'function'", "ops": "=="}, {"input": "ascii_value_string({})", "output": "None", "ops": "=="}, {"input": "ascii_value_string({10: 'a', 11: 'a', 0: 'c'})", "output": "99", "ops": "=="}, {"input": "ascii_value_string(' L u s e _ i n g')", "output": "32", "ops": "=="}, {"input": "ascii_value_string('')", "output": "None", "ops": "=="}], "175": [{"input": "perimeter_triangle(8, 19, 33)", "output": "60", "ops": "=="}, {"input": "perimeter_triangle(3 ** 0.5, 4 ** 0.5, 5 ** 0.5)", "output": "5.9681187850686666", "ops": "=="}, {"input": "perimeter_triangle(1, 2, 4)", "output": "7", "ops": "=="}, {"input": "perimeter_triangle(1, 0, 5)", "output": "6", "ops": "=="}, {"input": "perimeter_triangle(70, 71, 86)", "output": "227", "ops": "=="}, {"input": "perimeter_triangle(10, 30, 45)", "output": "85", "ops": "=="}, {"input": "perimeter_triangle(6, 10, 18)", "output": "34", "ops": "=="}, {"input": "perimeter_triangle(45, 38, 66)", "output": "149", "ops": "=="}, {"input": "perimeter_triangle(11, 10, 12)", "output": "33", "ops": "=="}, {"input": "perimeter_triangle(10, 8, 18)", "output": "36", "ops": "=="}, {"input": "perimeter_triangle(10, 15, 8)", "output": "33", "ops": "=="}, {"input": "perimeter_triangle(101, 101, 101)", "output": "303", "ops": "=="}, {"input": "perimeter_triangle(200, 350, 400)", "output": "950", "ops": "=="}, {"input": "perimeter_triangle(30, 30, 30)", "output": "90", "ops": "=="}, {"input": "perimeter_triangle(32, 34, 42)", "output": "108", "ops": "=="}, {"input": "perimeter_triangle(25, 31, 45)", "output": "101", "ops": "=="}, {"input": "perimeter_triangle(25, 26, 35)", "output": "86", "ops": "=="}, {"input": "perimeter_triangle(19, 2, 45)", "output": "66", "ops": "=="}, {"input": "perimeter_triangle(91, 117, 137)", "output": "345", "ops": "=="}], "224": [{"input": "find_Min([9, 3, 3, 4], 0, 3)", "output": "3", "ops": "=="}, {"input": "find_Min([0, 0, 1, 2, 2, 9], 2, 4)", "output": "1", "ops": "=="}], "274": [{"input": "get_Position([], 0, 0)", "output": "0", "ops": "=="}, {"input": "get_Position([], 0, 0)", "output": "0", "ops": "=="}, {"input": "get_Position(list([1, 2, 3, 4]), 1, 4)", "output": "1", "ops": "=="}, {"input": "get_Position(5, 0, 1)", "output": "0", "ops": "=="}], "410": [{"input": "snake_to_camel(u'apple\u3084watch')", "output": "'Apple\u3084watch'", "ops": "=="}, {"input": "snake_to_camel(u'android_lms_tv')", "output": "'AndroidLmsTv'", "ops": "=="}, {"input": "snake_to_camel(u'apple_ls_tv')", "output": "'AppleLsTv'", "ops": "=="}, {"input": "snake_to_camel('')", "output": "'_'", "ops": "=="}, {"input": "snake_to_camel('a&b')", "output": "'A&b'", "ops": "=="}, {"input": "snake_to_camel('_a&b_')", "output": "'_A&b_'", "ops": "=="}, {"input": "snake_to_camel(u'apple\u78e8\u5ea7')", "output": "'Apple\u78e8\u5ea7'", "ops": "=="}, {"input": "snake_to_camel(u'apple\u3007')", "output": "'Apple\u3007'", "ops": "=="}, {"input": "snake_to_camel('')", "output": "'_'", "ops": "=="}, {"input": "snake_to_camel('foo')", "output": "'Foo'", "ops": "=="}, {"input": "snake_to_camel(u'google_dee_bi_leb_ark')", "output": "'GoogleDeeBiLebArk'", "ops": "=="}, {"input": "print(snake_to_camel('Key'))", "output": "None", "ops": "=="}], "61": [{"input": "smallest_num([0])", "output": "0", "ops": "=="}, {"input": "smallest_num(range(100))", "output": "0", "ops": "=="}, {"input": "smallest_num([\"blueberry\", \"pineapple\", \"cucumber\", \"garlic\"])", "output": "'blueberry'", "ops": "=="}, {"input": "smallest_num([61, 70, 71])", "output": "61", "ops": "=="}, {"input": "smallest_num([0, 3, 9, 0])", "output": "0", "ops": "=="}, {"input": "smallest_num({\"1\": 1, \"2\":2})", "output": "'1'", "ops": "=="}, {"input": "smallest_num(['A'])", "output": "'A'", "ops": "=="}, {"input": "smallest_num([2, 100, 7, 7])", "output": "2", "ops": "=="}], "124": [{"input": "find_length(('10' * 17) + '01', 1)", "output": "0", "ops": "=="}, {"input": "(find_length(('10' * 17) + '01', 5) + 3)", "output": "4", "ops": "=="}], "164": [{"input": "count_char_position('A'*500)", "output": "1", "ops": "=="}, {"input": "count_char_position([])", "output": "0", "ops": "=="}], "232": [{"input": "lateralsuface_cylinder(5, 6)", "output": "188.49", "ops": "=="}, {"input": "lateralsuface_cylinder(25, 10)", "output": "1570.7500000000002", "ops": "=="}, {"input": "lateralsuface_cylinder(15, 15)", "output": "1413.6750000000002", "ops": "=="}, {"input": "lateralsuface_cylinder(3, 3)", "output": "56.547", "ops": "=="}, {"input": "lateralsuface_cylinder(5, 15)", "output": "471.225", "ops": "=="}, {"input": "lateralsuface_cylinder(17, 2)", "output": "213.622", "ops": "=="}, {"input": "lateralsuface_cylinder(6, 20)", "output": "753.96", "ops": "=="}, {"input": "lateralsuface_cylinder(7, 0)", "output": "0.0", "ops": "=="}, {"input": "lateralsuface_cylinder(12, 5)", "output": "376.98", "ops": "=="}, {"input": "lateralsuface_cylinder(3, 0)", "output": "0.0", "ops": "=="}, {"input": "lateralsuface_cylinder(6, 2)", "output": "75.396", "ops": "=="}, {"input": "lateralsuface_cylinder(0, 4)", "output": "0.0", "ops": "=="}], "60": [{"input": "count_Substrings(str('1121'), 2)", "output": "3", "ops": "=="}, {"input": "count_Substrings('1', 1)", "output": "1", "ops": "=="}], "85": [{"input": "centered_hexagonal_number(3)", "output": "19", "ops": "=="}, {"input": "centered_hexagonal_number(1)", "output": "1", "ops": "=="}, {"input": "centered_hexagonal_number(12)", "output": "397", "ops": "=="}, {"input": "centered_hexagonal_number(25)", "output": "1801", "ops": "=="}, {"input": "centered_hexagonal_number(20)", "output": "1141", "ops": "=="}, {"input": "centered_hexagonal_number(5)", "output": "61", "ops": "=="}, {"input": "centered_hexagonal_number(8)", "output": "169", "ops": "=="}, {"input": "centered_hexagonal_number(15)", "output": "631", "ops": "=="}, {"input": "centered_hexagonal_number(11)", "output": "331", "ops": "=="}, {"input": "centered_hexagonal_number(-1)", "output": "7", "ops": "=="}, {"input": "not centered_hexagonal_number(1)", "output": "False", "ops": "=="}, {"input": "centered_hexagonal_number(-1).imag", "output": "0", "ops": "=="}, {"input": "centered_hexagonal_number(16)", "output": "721", "ops": "=="}, {"input": "centered_hexagonal_number(15)", "output": "631", "ops": "=="}, {"input": "centered_hexagonal_number(12)", "output": "397", "ops": "=="}, {"input": "centered_hexagonal_number(0)", "output": "1", "ops": "=="}, {"input": "centered_hexagonal_number(8)", "output": "169", "ops": "=="}], "97": [{"input": "multiply_num(tuple((-9, 9, -10)))", "output": "270.0", "ops": "=="}, {"input": "multiply_num(range(3))", "output": "0.0", "ops": "=="}, {"input": "multiply_num([1])", "output": "1.0", "ops": "=="}, {"input": "multiply_num(tuple([i for i in range(1, 12)]))", "output": "3628800.0", "ops": "=="}, {"input": "multiply_num((2, 3, 4, -5, 1))", "output": "-24.0", "ops": "=="}], "216": [{"input": "first_Repeated_Char([])", "output": "'\\x00'", "ops": "=="}, {"input": "first_Repeated_Char('fooBAR')", "output": "'o'", "ops": "=="}, {"input": "first_Repeated_Char(\"\")", "output": "'\\x00'", "ops": "=="}, {"input": "first_Repeated_Char(\"-\".join(['foo', 'BAR']))", "output": "'o'", "ops": "=="}, {"input": "first_Repeated_Char([])", "output": "'\\x00'", "ops": "=="}, {"input": "first_Repeated_Char([])", "output": "'\\x00'", "ops": "=="}], "526": [{"input": "flip_case(\" Mango-esque-bact\u00e9rists. \")", "output": "' mANGO-ESQUE-BACT\u00c9RISTS. '", "ops": "=="}, {"input": "flip_case(u'\u3053\u3093\u306b\u3061\u306f\uff01')", "output": "'\u3053\u3093\u306b\u3061\u306f\uff01'", "ops": "=="}, {"input": "flip_case(\" I cane's foot to fight 'em, but they don't care about me... So let's heal it...\")", "output": "\" i CANE'S FOOT TO FIGHT 'EM, BUT THEY DON'T CARE ABOUT ME... sO LET'S HEAL IT...\"", "ops": "=="}], "14": [{"input": "split_lowerstring(u'\u00fcberb\u00fcr')", "output": "['b', 'e', 'r', 'b\u00fc', 'r']", "ops": "=="}, {"input": "'-' in split_lowerstring('Word, With A Few Or Punctuation Pun, Haha.')", "output": "False", "ops": "=="}, {"input": "split_lowerstring(u'\\u4f5c')", "output": "[]", "ops": "=="}, {"input": "split_lowerstring('')", "output": "[]", "ops": "=="}, {"input": "split_lowerstring('0')", "output": "[]", "ops": "=="}, {"input": "split_lowerstring(chr(32) + chr(128) + chr(26) + chr(64))", "output": "[]", "ops": "=="}, {"input": "split_lowerstring('Aa a')", "output": "['a ', 'a']", "ops": "=="}, {"input": "split_lowerstring(r'Aa a b')", "output": "['a ', 'a ', 'b']", "ops": "=="}], "45": [{"input": "test_distinct(range(1, 20))", "output": "True", "ops": "=="}, {"input": "test_distinct(['spam', 'eggs'])", "output": "True", "ops": "=="}, {"input": "test_distinct([\"a\",\"b\"])", "output": "True", "ops": "=="}, {"input": "test_distinct([\"a\", \"b\", \"a\", \"B\"])", "output": "False", "ops": "=="}, {"input": "test_distinct([-1, -100, 3, 4.25])", "output": "True", "ops": "=="}, {"input": "test_distinct([0, 0, 0])", "output": "False", "ops": "=="}, {"input": "test_distinct('banana-pie')", "output": "False", "ops": "=="}, {"input": "test_distinct([])", "output": "True", "ops": "=="}, {"input": "test_distinct(['a', 'a', 'b', 'b'])", "output": "False", "ops": "=="}, {"input": "test_distinct([])", "output": "True", "ops": "=="}, {"input": "test_distinct([4, 0, 9])", "output": "True", "ops": "=="}, {"input": "test_distinct(list(range(5)))", "output": "True", "ops": "=="}, {"input": "test_distinct = {}", "output": "{}", "ops": "=="}, {"input": "test_distinct([])", "output": "True", "ops": "=="}, {"input": "test_distinct([3, 4])", "output": "True", "ops": "=="}], "237": [{"input": "number_of_substrings('abracadaba')", "output": "55", "ops": "=="}, {"input": "number_of_substrings(['aabc', 'bcdc'])", "output": "3", "ops": "=="}, {"input": "number_of_substrings(['aada', 'cabd']) == 0", "output": "False", "ops": "=="}, {"input": "number_of_substrings(['aabc','adad']), 0", "output": "(3, 0)", "ops": "=="}, {"input": "number_of_substrings(u'Ab\u00e7\u011f\u00e9rkez\u0151')", "output": "55", "ops": "=="}, {"input": "number_of_substrings(['a', 'b', 'c', 'd'])", "output": "10", "ops": "=="}, {"input": "number_of_substrings({'frank':{'nickname':'Bovine','age':24}})", "output": "1", "ops": "=="}, {"input": "number_of_substrings(['a','b','a','b','c','b'])", "output": "21", "ops": "=="}, {"input": "number_of_substrings('aaa')", "output": "6", "ops": "=="}], "378": [{"input": "surfacearea_cuboid(33, 76, 139)", "output": "35318", "ops": "=="}, {"input": "surfacearea_cuboid(16, 22, 30)", "output": "2984", "ops": "=="}, {"input": "surfacearea_cuboid(15, 20, 21)", "output": "2070", "ops": "=="}, {"input": "surfacearea_cuboid(16, 19, 23)", "output": "2218", "ops": "=="}, {"input": "surfacearea_cuboid(20, 25, 31)", "output": "3790", "ops": "=="}, {"input": "surfacearea_cuboid(20, 23, 32)", "output": "3672", "ops": "=="}, {"input": "surfacearea_cuboid(100, 250, 900)", "output": "680000", "ops": "=="}, {"input": "surfacearea_cuboid(50, 71, 92)", "output": "29364", "ops": "=="}, {"input": "surfacearea_cuboid(7, 5, 13)", "output": "382", "ops": "=="}, {"input": "surfacearea_cuboid(13, 18, 25)", "output": "2018", "ops": "=="}], "446": [{"input": "cube_nums([0, 1, -1])", "output": "[0, 1, -1]", "ops": "=="}, {"input": "cube_nums([43, 122])", "output": "[79507, 1815848]", "ops": "=="}, {"input": "cube_nums([1])", "output": "[1]", "ops": "=="}, {"input": "cube_nums([51])", "output": "[132651]", "ops": "=="}, {"input": "cube_nums([6, 13, 12, 3, 13, 3, 6, 7, 9, 9, 0])", "output": "[216, 2197, 1728, 27, 2197, 27, 216, 343, 729, 729, 0]", "ops": "=="}, {"input": "cube_nums([12, 20, 10])", "output": "[1728, 8000, 1000]", "ops": "=="}, {"input": "cube_nums([3])", "output": "[27]", "ops": "=="}, {"input": "cube_nums([31, 39, 47])", "output": "[29791, 59319, 103823]", "ops": "=="}, {"input": "cube_nums([])", "output": "[]", "ops": "=="}, {"input": "cube_nums(())", "output": "[]", "ops": "=="}], "547": [{"input": "modp(40000, 31111)", "output": "8972", "ops": "=="}, {"input": "modp(53, 12)", "output": "8", "ops": "=="}, {"input": "modp(1311, 30)", "output": "8", "ops": "=="}, {"input": "modp(0, 0)", "output": "1", "ops": "=="}, {"input": "modp(30, 45)", "output": "19", "ops": "=="}, {"input": "modp(25, 32)", "output": "0", "ops": "=="}, {"input": "modp(22, 5)", "output": "4", "ops": "=="}, {"input": "modp(99, 111)", "output": "80", "ops": "=="}, {"input": "modp(38, 1066)", "output": "810", "ops": "=="}, {"input": "modp(999, 995)", "output": "313", "ops": "=="}, {"input": "modp(37, 5)", "output": "2", "ops": "=="}, {"input": "modp(41, 5)", "output": "2", "ops": "=="}, {"input": "modp(99999999, 995)", "output": "598", "ops": "=="}], "574": [{"input": "decimal_to_binary(5)", "output": "'db101db'", "ops": "=="}, {"input": "decimal_to_binary(16)", "output": "'db10000db'", "ops": "=="}, {"input": "decimal_to_binary(23)", "output": "'db10111db'", "ops": "=="}, {"input": "decimal_to_binary(128)", "output": "'db10000000db'", "ops": "=="}, {"input": "decimal_to_binary(255)", "output": "'db11111111db'", "ops": "=="}, {"input": "decimal_to_binary(255)", "output": "'db11111111db'", "ops": "=="}, {"input": "decimal_to_binary(645)", "output": "'db1010000101db'", "ops": "=="}, {"input": "decimal_to_binary(41)", "output": "'db101001db'", "ops": "=="}, {"input": "decimal_to_binary(154)", "output": "'db10011010db'", "ops": "=="}, {"input": "decimal_to_binary(5)", "output": "'db101db'", "ops": "=="}, {"input": "decimal_to_binary(6)", "output": "'db110db'", "ops": "=="}, {"input": "decimal_to_binary(101)", "output": "'db1100101db'", "ops": "=="}, {"input": "decimal_to_binary(23)", "output": "'db10111db'", "ops": "=="}, {"input": "decimal_to_binary(20)", "output": "'db10100db'", "ops": "=="}, {"input": "decimal_to_binary(-1)", "output": "'dbb1db'", "ops": "=="}, {"input": "decimal_to_binary(1047)", "output": "'db10000010111db'", "ops": "=="}], "174": [{"input": "is_valid_parenthese('testtest?')", "output": "False", "ops": "=="}, {"input": "is_valid_parenthese(\" \")", "output": "False", "ops": "=="}, {"input": "is_valid_parenthese([])", "output": "True", "ops": "=="}, {"input": "is_valid_parenthese(())", "output": "True", "ops": "=="}, {"input": "is_valid_parenthese('-[]()')", "output": "False", "ops": "=="}, {"input": "is_valid_parenthese({})", "output": "True", "ops": "=="}, {"input": "is_valid_parenthese(())", "output": "True", "ops": "=="}, {"input": "is_valid_parenthese(u'()')", "output": "True", "ops": "=="}], "281": [{"input": "sub_list([0], [-1000, 0])", "output": "[1000]", "ops": "=="}, {"input": "sub_list([], [])", "output": "[]", "ops": "=="}, {"input": "sub_list([], [45, 67, 89])", "output": "[]", "ops": "=="}, {"input": "sub_list([], [])", "output": "[]", "ops": "=="}, {"input": "b = sub_list([20, 30, 60], [25, 40])", "output": "[-5, -10]", "ops": "=="}], "284": [{"input": "text_match_two_three('bazzzzzy')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_two_three('efefbaaaaz')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_two_three(\"\")", "output": "'Not matched!'", "ops": "=="}], "572": [{"input": "iscube(34)", "output": "False", "ops": "=="}, {"input": "iscube(7876)", "output": "False", "ops": "=="}, {"input": "iscube(-1)**999", "output": "1", "ops": "=="}, {"input": "iscube(4**4)", "output": "False", "ops": "=="}, {"input": "iscube(1234890000)", "output": "False", "ops": "=="}, {"input": "iscube(818)", "output": "False", "ops": "=="}, {"input": "iscube(12345)", "output": "False", "ops": "=="}, {"input": "iscube(823)", "output": "False", "ops": "=="}, {"input": "iscube(100**9)", "output": "True", "ops": "=="}, {"input": "iscube(1311123)", "output": "False", "ops": "=="}, {"input": "iscube(100 ** 12)", "output": "True", "ops": "=="}], "608": [{"input": "odd_count([])", "output": "[]", "ops": "=="}, {"input": "odd_count(['774', '1859'])", "output": "['the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.']", "ops": "=="}, {"input": "odd_count(['4283', '2816', '499818361316169667781933907019107538998685682814'])", "output": "['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 27n the str27ng 27 of the 27nput.']", "ops": "=="}, {"input": "odd_count(['0'])", "output": "['the number of odd elements 0n the str0ng 0 of the 0nput.']", "ops": "=="}, {"input": "odd_count(['272', '138', '314', '314'])", "output": "['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.']", "ops": "=="}, {"input": "odd_count(['23', '7'])", "output": "['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.']", "ops": "=="}, {"input": "odd_count([])", "output": "[]", "ops": "=="}, {"input": "len(odd_count([\"2130\", \"4772\", \"4961\", \"4789\"]))", "output": "4", "ops": "=="}, {"input": "odd_count(['7131', '4257'])", "output": "['the number of odd elements 4n the str4ng 4 of the 4nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.']", "ops": "=="}, {"input": "odd_count(['4', '23', '79'])", "output": "['the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.']", "ops": "=="}], "626": [{"input": "digits(998765431)", "output": "8505", "ops": "=="}, {"input": "digits(4747465473741824)", "output": "36015", "ops": "=="}, {"input": "digits(864749)", "output": "63", "ops": "=="}, {"input": "digits(1065110)", "output": "5", "ops": "=="}, {"input": "digits(67543)", "output": "105", "ops": "=="}, {"input": "digits(5678912)", "output": "315", "ops": "=="}, {"input": "digits(87654321098)", "output": "945", "ops": "=="}, {"input": "digits(12345678910)", "output": "945", "ops": "=="}, {"input": "digits(1239876)", "output": "189", "ops": "=="}, {"input": "digits(9246837)", "output": "189", "ops": "=="}, {"input": "digits(1113187551925)", "output": "23625", "ops": "=="}, {"input": "digits(49006165101101201)", "output": "45", "ops": "=="}, {"input": "digits(9576524681)", "output": "1575", "ops": "=="}, {"input": "digits(675166)", "output": "35", "ops": "=="}, {"input": "digits(773587092)", "output": "46305", "ops": "=="}, {"input": "digits(55112364)", "output": "75", "ops": "=="}, {"input": "digits(872839593365)", "output": "382725", "ops": "=="}, {"input": "digits(43981)", "output": "27", "ops": "=="}, {"input": "digits(792937)", "output": "11907", "ops": "=="}, {"input": "digits(87276811)", "output": "49", "ops": "=="}, {"input": "digits(96456593)", "output": "6075", "ops": "=="}, {"input": "digits(96007402947)", "output": "3969", "ops": "=="}, {"input": "digits(9023)", "output": "27", "ops": "=="}, {"input": "digits(917465599440007)", "output": "893025", "ops": "=="}], "27": [{"input": "binomial_Coeff(30, 50)", "output": "0", "ops": "=="}, {"input": "binomial_Coeff( 241, 373)", "output": "0", "ops": "=="}, {"input": "binomial_Coeff(27, 54)", "output": "0", "ops": "=="}, {"input": "binomial_Coeff(2, 2)", "output": "1", "ops": "=="}, {"input": "binomial_Coeff(7, 18)", "output": "0", "ops": "=="}, {"input": "binomial_Coeff(5, 100)", "output": "0", "ops": "=="}, {"input": "binomial_Coeff(14, 0)", "output": "1", "ops": "=="}], "310": [{"input": "set_left_most_unset_bit(17)", "output": "25", "ops": "=="}, {"input": "set_left_most_unset_bit(21)", "output": "29", "ops": "=="}, {"input": "set_left_most_unset_bit(-1)", "output": "-1", "ops": "=="}, {"input": "set_left_most_unset_bit(32)", "output": "48", "ops": "=="}, {"input": "set_left_most_unset_bit(18)", "output": "26", "ops": "=="}, {"input": "set_left_most_unset_bit(17)", "output": "25", "ops": "=="}, {"input": "set_left_most_unset_bit(17)", "output": "25", "ops": "=="}, {"input": "set_left_most_unset_bit(-1)", "output": "-1", "ops": "=="}, {"input": "set_left_most_unset_bit(24)", "output": "28", "ops": "=="}, {"input": "set_left_most_unset_bit(4294967300)", "output": "6442450948", "ops": "=="}, {"input": "set_left_most_unset_bit(50)", "output": "58", "ops": "=="}, {"input": "set_left_most_unset_bit(17)", "output": "25", "ops": "=="}, {"input": "set_left_most_unset_bit(18)", "output": "26", "ops": "=="}, {"input": "set_left_most_unset_bit(0)", "output": "0", "ops": "=="}], "429": [{"input": "parabola_directrix(25, 37, 9)", "output": "-136991", "ops": "=="}, {"input": "parabola_directrix(5, 13, 25)", "output": "-3375", "ops": "=="}, {"input": "parabola_directrix(23, 45, 99)", "output": "-186293", "ops": "=="}, {"input": "parabola_directrix(21, 30, 20)", "output": "-75664", "ops": "=="}, {"input": "parabola_directrix(19, 11, 8)", "output": "-9264", "ops": "=="}, {"input": "parabola_directrix(13, 36, 35)", "output": "-67409", "ops": "=="}, {"input": "parabola_directrix(11, 20, 45)", "output": "-17599", "ops": "=="}, {"input": "parabola_directrix(5, 5, 6)", "output": "-514", "ops": "=="}, {"input": "parabola_directrix(5, 5, 7)", "output": "-513", "ops": "=="}, {"input": "parabola_directrix(13, 9, 9)", "output": "-4255", "ops": "=="}, {"input": "parabola_directrix(6, 12, 12)", "output": "-3468", "ops": "=="}, {"input": "parabola_directrix(10, 28, 10)", "output": "-31390", "ops": "=="}, {"input": "parabola_directrix(3, 4, 7)", "output": "-197", "ops": "=="}, {"input": "parabola_directrix(8, 5, 8)", "output": "-824", "ops": "=="}, {"input": "parabola_directrix(5, 10, 13)", "output": "-2007", "ops": "=="}, {"input": "parabola_directrix(4, 1, 11)", "output": "-21", "ops": "=="}, {"input": "parabola_directrix(10, 7, 9)", "output": "-1991", "ops": "=="}], "431": [{"input": "median_trapezium(30, 10, 13)", "output": "20.0", "ops": "=="}, {"input": "median_trapezium(16, 19, 23)", "output": "17.5", "ops": "=="}, {"input": "median_trapezium(33, 47, 50)", "output": "40.0", "ops": "=="}, {"input": "median_trapezium(32, 49, 70)", "output": "40.5", "ops": "=="}, {"input": "median_trapezium(17, 25, 35)", "output": "21.0", "ops": "=="}, {"input": "median_trapezium(50, 150, 200)", "output": "100.0", "ops": "=="}, {"input": "median_trapezium(18, 21, 20)", "output": "19.5", "ops": "=="}, {"input": "median_trapezium(3, 2, 6)", "output": "2.5", "ops": "=="}, {"input": "median_trapezium(8, 12, 15)", "output": "10.0", "ops": "=="}, {"input": "median_trapezium(8, 3, 2)", "output": "5.5", "ops": "=="}], "453": [{"input": "text_match_wordz('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz('x  xz y xyz.xyz..yz')", "output": "'Found a match!'", "ops": "=="}, {"input": "text_match_wordz('')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz('..')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz(\" \")", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz(\" language.\")", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz(\"!$ /.\")", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz(\"\")", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_wordz('  lang .')", "output": "'Not matched!'", "ops": "=="}], "527": [{"input": "concatenate(['x'])", "output": "'x'", "ops": "=="}, {"input": "concatenate(('x')*1)", "output": "'x'", "ops": "=="}, {"input": "concatenate(['a', 'A', 'z', 'q', 'r'])", "output": "'aAzqr'", "ops": "=="}, {"input": "concatenate(['a', 'b', 'c', 'd', 'g'])", "output": "'abcdg'", "ops": "=="}, {"input": "concatenate(['q'])", "output": "'q'", "ops": "=="}, {"input": "concatenate('')", "output": "''", "ops": "=="}, {"input": "concatenate(['1', '2', '3'])", "output": "'123'", "ops": "=="}, {"input": "concatenate(['s', 't', 'd', 'i', 'f', 'g', 'q', 'r', 'y'])", "output": "'stdifgqry'", "ops": "=="}], "50": [{"input": "check_equilateral(12, 12, 6)", "output": "False", "ops": "=="}, {"input": "check_equilateral(5, 0, 5)", "output": "False", "ops": "=="}, {"input": "check_equilateral(5, 6, 6)", "output": "False", "ops": "=="}, {"input": "check_equilateral(3, 13, 8)", "output": "False", "ops": "=="}, {"input": "check_equilateral(5, 7, 9)", "output": "False", "ops": "=="}, {"input": "check_equilateral(7, 45, 7)", "output": "False", "ops": "=="}, {"input": "check_equilateral(6, 10, 6)", "output": "False", "ops": "=="}, {"input": "check_equilateral(1, 2, 10)", "output": "False", "ops": "=="}, {"input": "check_equilateral(8, 2, 2)", "output": "False", "ops": "=="}, {"input": "check_equilateral(6, 3, 0)", "output": "False", "ops": "=="}, {"input": "check_equilateral(6, 6, 11)", "output": "False", "ops": "=="}, {"input": "check_equilateral(12, 21, 6)", "output": "False", "ops": "=="}, {"input": "check_equilateral(2, 2, 30)", "output": "False", "ops": "=="}], "137": [{"input": "is_Sum_Of_Powers_Of_Two(1000)", "output": "True", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(12)", "output": "True", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(998001)", "output": "False", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(999999999)", "output": "False", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(10**10)", "output": "True", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(0)", "output": "True", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(15)", "output": "False", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(27)", "output": "False", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(18)", "output": "True", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(20)", "output": "True", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(31)", "output": "False", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(55)", "output": "False", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(100)", "output": "True", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(34)", "output": "True", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(291)", "output": "False", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(290)", "output": "True", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(11)", "output": "False", "ops": "=="}], "190": [{"input": "check_monthnumber((2012, 12, 12))", "output": "False", "ops": "=="}, {"input": "check_monthnumber((2012, 11, 17))", "output": "False", "ops": "=="}, {"input": "check_monthnumber(2016)", "output": "False", "ops": "=="}, {"input": "check_monthnumber(201601)", "output": "False", "ops": "=="}, {"input": "check_monthnumber('10')", "output": "False", "ops": "=="}, {"input": "check_monthnumber(42)", "output": "False", "ops": "=="}, {"input": "check_monthnumber(20181221)", "output": "False", "ops": "=="}, {"input": "check_monthnumber(2)", "output": "False", "ops": "=="}, {"input": "check_monthnumber(6)", "output": "False", "ops": "=="}, {"input": "check_monthnumber(3)", "output": "False", "ops": "=="}, {"input": "check_monthnumber('')", "output": "False", "ops": "=="}, {"input": "check_monthnumber(None)", "output": "False", "ops": "=="}, {"input": "check_monthnumber(15)", "output": "False", "ops": "=="}, {"input": "check_monthnumber(2013)", "output": "False", "ops": "=="}], "221": [{"input": "check_type([0])", "output": "True", "ops": "=="}, {"input": "check_type(tuple())", "output": "True", "ops": "=="}, {"input": "check_type(('121', '11a'))", "output": "True", "ops": "=="}, {"input": "check_type((False, 0, (None, 'hello')))", "output": "False", "ops": "=="}, {"input": "check_type(('a', 'c', 'r','m', 1, 2, 'g', 't'))", "output": "False", "ops": "=="}, {"input": "check_type([])", "output": "True", "ops": "=="}, {"input": "check_type(b'')", "output": "True", "ops": "=="}, {"input": "check_type(())", "output": "True", "ops": "=="}, {"input": "check_type(('a', 1, (2,4), 'd'))", "output": "False", "ops": "=="}, {"input": "check_type([])", "output": "True", "ops": "=="}, {"input": "check_type([None])", "output": "True", "ops": "=="}, {"input": "check_type((1, []))", "output": "False", "ops": "=="}, {"input": "check_type(())", "output": "True", "ops": "=="}, {"input": "check_type(('foo', 2, 1, 5, 4))", "output": "False", "ops": "=="}], "328": [{"input": "neg_count([1] * 1000000)", "output": "0", "ops": "=="}, {"input": "neg_count([])", "output": "0", "ops": "=="}, {"input": "neg_count([51, 100, -1, 2, 3, -2, -100, -2, 100])", "output": "4", "ops": "=="}, {"input": "neg_count([-3, -10, -20])", "output": "3", "ops": "=="}, {"input": "neg_count([1, -21, -12])", "output": "2", "ops": "=="}, {"input": "neg_count([0.5, 4.9, 2.2])", "output": "0", "ops": "=="}, {"input": "neg_count([1, 2, 3, 2, -4])", "output": "1", "ops": "=="}, {"input": "neg_count([3, 4, 3, 3, 4, 4])", "output": "0", "ops": "=="}, {"input": "neg_count([1])", "output": "0", "ops": "=="}, {"input": "neg_count({})", "output": "0", "ops": "=="}], "336": [{"input": "text_match_word('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word(\"\"\"Hello world; Goodnight World\"\"\")", "output": "'Found a match!'", "ops": "=="}, {"input": "print (\" Hello\",text_match_word(\"\"\"Hello\"\"\"))", "output": "None", "ops": "=="}, {"input": "print (\" Hello\",text_match_word(\"Hello World.\"))", "output": "None", "ops": "=="}, {"input": "text_match_word('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word(\"\"\"The `PYTHON` word means an imperative language\\nthat is not compiled to native machine-code. A common use case of\\n this command is to list a module that provides a set of functions.\\nWhen `theano.gpuarray` is used to optimize such computations.\"\"\")", "output": "'Found a match!'", "ops": "=="}, {"input": "text_match_word('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word(\" words.\")", "output": "'Found a match!'", "ops": "=="}, {"input": "text_match_word('python')", "output": "'Found a match!'", "ops": "=="}, {"input": "text_match_word('')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word('')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word(' ')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word(', or : \\'   \\', \" ')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word('\\\\nor\\n.')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word('')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word(\"\"\"a language that can eat,but it's still a    , isn't it?    \"\"\")", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word('  lang .')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_word(    'python. ')", "output": "'Not matched!'", "ops": "=="}], "634": [{"input": "special_factorial(12)", "output": "127313963299399416749559771247411200000000000", "ops": "=="}, {"input": "special_factorial(15)", "output": "90378331112371142262979521568630736335023247731599748366336000000000000000000", "ops": "=="}, {"input": "special_factorial(-1)", "output": "1", "ops": "=="}, {"input": "special_factorial(0)", "output": "1", "ops": "=="}, {"input": "special_factorial(10)", "output": "6658606584104736522240000000", "ops": "=="}, {"input": "special_factorial(3)", "output": "12", "ops": "=="}, {"input": "special_factorial(8)", "output": "5056584744960000", "ops": "=="}, {"input": "special_factorial(8)", "output": "5056584744960000", "ops": "=="}, {"input": "special_factorial(3)", "output": "12", "ops": "=="}, {"input": "special_factorial(3)", "output": "12", "ops": "=="}, {"input": "special_factorial(14)", "output": "69113789582492712943486800506462734562847413501952000000000000000", "ops": "=="}], "133": [{"input": "check_last([], 0, 41)", "output": "'EVEN'", "ops": "=="}, {"input": "check_last([1], 1, 0)", "output": "'EVEN'", "ops": "=="}, {"input": "check_last([1, 3, 1, 9, 2, 3, 4, 10], 3, 6)", "output": "'EVEN'", "ops": "=="}, {"input": "check_last([1, 2, 3], 3, 1001)", "output": "'EVEN'", "ops": "=="}, {"input": "check_last(list(range(4)), 0, 0)", "output": "'EVEN'", "ops": "=="}, {"input": "check_last([1], 1, 0)", "output": "'EVEN'", "ops": "=="}, {"input": "check_last([0, 1], 2, 0)", "output": "'EVEN'", "ops": "=="}, {"input": "check_last([1, 2, 3], 0, 0)", "output": "'EVEN'", "ops": "=="}, {"input": "check_last([[True], None, [0, 3], 3], 0, 3)", "output": "'EVEN'", "ops": "=="}], "225": [{"input": "odd_values_string('aaa')", "output": "'aa'", "ops": "=="}, {"input": "odd_values_string('asdf jkl\u00f6 ')", "output": "'ad k\u00f6'", "ops": "=="}, {"input": "odd_values_string('a 100')", "output": "'a10'", "ops": "=="}, {"input": "odd_values_string('a')", "output": "'a'", "ops": "=="}, {"input": "odd_values_string('a a')", "output": "'aa'", "ops": "=="}, {"input": "odd_values_string([])", "output": "''", "ops": "=="}, {"input": "odd_values_string('abcd \\t \\t asdf asdf.')", "output": "'ac   sfad.'", "ops": "=="}, {"input": "odd_values_string({})", "output": "''", "ops": "=="}], "292": [{"input": "otherside_rightangle(7, 16)", "output": "17.46424919657298", "ops": "=="}, {"input": "otherside_rightangle(24, 15)", "output": "28.30194339616981", "ops": "=="}, {"input": "otherside_rightangle(20, 23)", "output": "30.479501308256342", "ops": "=="}, {"input": "otherside_rightangle(5, 6)", "output": "7.810249675906654", "ops": "=="}, {"input": "otherside_rightangle(70, 75)", "output": "102.59142264341595", "ops": "=="}, {"input": "otherside_rightangle(0, 9)", "output": "9.0", "ops": "=="}, {"input": "otherside_rightangle(20, 11)", "output": "22.825424421026653", "ops": "=="}, {"input": "otherside_rightangle(13, 21)", "output": "24.698178070456937", "ops": "=="}, {"input": "otherside_rightangle(15, 7)", "output": "16.55294535724685", "ops": "=="}, {"input": "otherside_rightangle(15, 7)", "output": "16.55294535724685", "ops": "=="}, {"input": "otherside_rightangle(14, 15)", "output": "20.518284528683193", "ops": "=="}, {"input": "otherside_rightangle(15, 25)", "output": "29.154759474226502", "ops": "=="}, {"input": "otherside_rightangle(15, 15)", "output": "21.213203435596427", "ops": "=="}, {"input": "otherside_rightangle(-10, 7)", "output": "12.206555615733702", "ops": "=="}, {"input": "otherside_rightangle(25, 7)", "output": "25.96150997149434", "ops": "=="}, {"input": "otherside_rightangle(21, 34)", "output": "39.96248240537617", "ops": "=="}, {"input": "otherside_rightangle(3.14, 2.95)", "output": "4.308375563945186", "ops": "=="}, {"input": "otherside_rightangle(11, 6)", "output": "12.529964086141668", "ops": "=="}], "108": [{"input": "odd_Equivalent('FFFFFFFFFFFF', -10)", "output": "0", "ops": "=="}, {"input": "odd_Equivalent('0b0010101', 9)", "output": "3", "ops": "=="}, {"input": "odd_Equivalent('01101', 5)", "output": "3", "ops": "=="}], "154": [{"input": "even_bit_toggle_number(40)", "output": "2", "ops": "=="}, {"input": "even_bit_toggle_number(40)", "output": "2", "ops": "=="}, {"input": "even_bit_toggle_number(39)", "output": "13", "ops": "=="}, {"input": "even_bit_toggle_number(40)", "output": "2", "ops": "=="}, {"input": "even_bit_toggle_number(50)", "output": "24", "ops": "=="}, {"input": "even_bit_toggle_number(60)", "output": "22", "ops": "=="}, {"input": "even_bit_toggle_number(70)", "output": "108", "ops": "=="}, {"input": "even_bit_toggle_number(0)", "output": "0", "ops": "=="}, {"input": "even_bit_toggle_number(-1)", "output": "-1", "ops": "=="}, {"input": "even_bit_toggle_number(40)", "output": "2", "ops": "=="}, {"input": "even_bit_toggle_number(42)", "output": "0", "ops": "=="}, {"input": "even_bit_toggle_number(40)", "output": "2", "ops": "=="}, {"input": "even_bit_toggle_number(50)", "output": "24", "ops": "=="}, {"input": "even_bit_toggle_number(60)", "output": "22", "ops": "=="}, {"input": "even_bit_toggle_number(70)", "output": "108", "ops": "=="}, {"input": "even_bit_toggle_number(80)", "output": "122", "ops": "=="}, {"input": "even_bit_toggle_number(40)", "output": "2", "ops": "=="}, {"input": "even_bit_toggle_number(35892)", "output": "9886", "ops": "=="}, {"input": "even_bit_toggle_number(50)", "output": "24", "ops": "=="}, {"input": "even_bit_toggle_number(50)", "output": "24", "ops": "=="}], "220": [{"input": "first_even(range(3))", "output": "0", "ops": "=="}, {"input": "first_even(range(1, 9))", "output": "2", "ops": "=="}, {"input": "first_even([2, 4, 7])", "output": "2", "ops": "=="}, {"input": "first_even([12, 5, 3])", "output": "12", "ops": "=="}, {"input": "first_even(range(1, 11))", "output": "2", "ops": "=="}, {"input": "first_even([2, 4, 2])", "output": "2", "ops": "=="}, {"input": "first_even(range(10, 0, -1))", "output": "10", "ops": "=="}, {"input": "first_even([])", "output": "-1", "ops": "=="}, {"input": "first_even(range(1, 100))", "output": "2", "ops": "=="}, {"input": "first_even([])", "output": "-1", "ops": "=="}, {"input": "first_even([])", "output": "-1", "ops": "=="}], "273": [{"input": "even_binomial_Coeff_Sum(14)", "output": "8192", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(1)", "output": "1", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(20)", "output": "524288", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(30)", "output": "536870912", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(8)", "output": "128", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(7)", "output": "64", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(8)", "output": "128", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(20)", "output": "524288", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(3)", "output": "4", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(8)", "output": "128", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(10)", "output": "512", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(25)", "output": "16777216", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(8)", "output": "128", "ops": "=="}], "382": [{"input": "even_bit_toggle_number(50)", "output": "39", "ops": "=="}, {"input": "even_bit_toggle_number(40)", "output": "61", "ops": "=="}, {"input": "even_bit_toggle_number(40)", "output": "61", "ops": "=="}, {"input": "even_bit_toggle_number(40)", "output": "61", "ops": "=="}, {"input": "even_bit_toggle_number(50)", "output": "39", "ops": "=="}, {"input": "even_bit_toggle_number(0)", "output": "0", "ops": "=="}, {"input": "even_bit_toggle_number(-10)", "output": "-10", "ops": "=="}, {"input": "even_bit_toggle_number(40)", "output": "61", "ops": "=="}, {"input": "even_bit_toggle_number(50)", "output": "39", "ops": "=="}, {"input": "even_bit_toggle_number(60)", "output": "41", "ops": "=="}, {"input": "even_bit_toggle_number(70)", "output": "19", "ops": "=="}, {"input": "even_bit_toggle_number(80)", "output": "5", "ops": "=="}, {"input": "even_bit_toggle_number(90)", "output": "15", "ops": "=="}, {"input": "even_bit_toggle_number(100)", "output": "49", "ops": "=="}, {"input": "even_bit_toggle_number(120)", "output": "45", "ops": "=="}, {"input": "even_bit_toggle_number(129)", "output": "212", "ops": "=="}, {"input": "even_bit_toggle_number(50)", "output": "39", "ops": "=="}, {"input": "even_bit_toggle_number(100)", "output": "49", "ops": "=="}, {"input": "even_bit_toggle_number(200)", "output": "157", "ops": "=="}, {"input": "even_bit_toggle_number(7)", "output": "2", "ops": "=="}, {"input": "even_bit_toggle_number(40)", "output": "61", "ops": "=="}, {"input": "even_bit_toggle_number(50)", "output": "39", "ops": "=="}, {"input": "even_bit_toggle_number(40)", "output": "61", "ops": "=="}, {"input": "even_bit_toggle_number(31)", "output": "10", "ops": "=="}], "396": [{"input": "median_numbers(12, 34, 90)", "output": "34", "ops": "=="}, {"input": "median_numbers(90, 85, 10)", "output": "85", "ops": "=="}, {"input": "median_numbers(5, 5, 50)", "output": "5", "ops": "=="}, {"input": "median_numbers(8, 34, 90)", "output": "34", "ops": "=="}, {"input": "median_numbers(9, 5, 50)", "output": "9", "ops": "=="}, {"input": "median_numbers(15, 20, 12)", "output": "15", "ops": "=="}, {"input": "median_numbers(1, 22, 51)", "output": "22", "ops": "=="}, {"input": "median_numbers(22, 75, 90)", "output": "75", "ops": "=="}, {"input": "median_numbers(2, 11, 35)", "output": "11", "ops": "=="}, {"input": "median_numbers(17, 63, 111)", "output": "63", "ops": "=="}, {"input": "median_numbers(60, 30, 40)", "output": "40", "ops": "=="}, {"input": "median_numbers(10, 7, 30)", "output": "10", "ops": "=="}, {"input": "median_numbers(0, 0, 10)", "output": "0", "ops": "=="}, {"input": "median_numbers(10, 20, 30)", "output": "20", "ops": "=="}, {"input": "median_numbers(19, 75, 90)", "output": "75", "ops": "=="}, {"input": "median_numbers(18, 30, 50)", "output": "30", "ops": "=="}], "77": [{"input": "count_With_Odd_SetBits(25)", "output": "13.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(4)", "output": "3.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(9)", "output": "5.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(12)", "output": "6.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(11)", "output": "6.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(19)", "output": "10.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(41)", "output": "21.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(21)", "output": "11.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(31)", "output": "16.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(25)", "output": "13.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(20)", "output": "10.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(21)", "output": "11.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(25)", "output": "13.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(30)", "output": "15.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(33)", "output": "17.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(1000)", "output": "500.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(50)", "output": "26.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(50)", "output": "26.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(24)", "output": "12.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(20)", "output": "10.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(26)", "output": "14.0", "ops": "=="}, {"input": "count_With_Odd_SetBits(43)", "output": "22.0", "ops": "=="}], "246": [{"input": "lps(' TENS FOR TIK AND KAR')", "output": "7", "ops": "=="}, {"input": "lps( 'FACIALS')", "output": "3", "ops": "=="}, {"input": "lps(u'PARTIE DE CADRES FORGENDARES POPPPES EBOUTIIRES, ET DE PRINTERIER C\u2019 EST PIEDS MORPHI\u00c9S')", "output": "38", "ops": "=="}, {"input": "lps(['BASTOCIATO BASTRO', 'KILLER', 'HERRY', 'SNOWBALL'])", "output": "1", "ops": "=="}, {"input": "lps(\"ITCH-O MY POTATOES-OO 'TIS A TIE-I!!\")", "output": "13", "ops": "=="}], "309": [{"input": "string_to_tuple(u'python 2.8')", "output": "('p', 'y', 't', 'h', 'o', 'n', '2', '.', '8')", "ops": "=="}, {"input": "string_to_tuple('a')", "output": "('a',)", "ops": "=="}, {"input": "string_to_tuple(\"a\"), \"<string ''>\"", "output": "(('a',), \"<string ''>\")", "ops": "=="}, {"input": "string_to_tuple(u'item 1')", "output": "('i', 't', 'e', 'm', '1')", "ops": "=="}, {"input": "string_to_tuple(u'\u304f. kan\u0307\u203an t\u0315l')", "output": "('\u304f', '.', 'k', 'a', 'n', '\u0307', '\u203a', 'n', 't', '\u0315', 'l')", "ops": "=="}, {"input": "list(string_to_tuple('foo 15.10'))", "output": "['f', 'o', 'o', '1', '5', '.', '1', '0']", "ops": "=="}, {"input": "set(string_to_tuple('foo.bar'))", "output": "{'b', 'f', 'r', 'o', '.', 'a'}", "ops": "=="}], "51": [{"input": "parallelogram_area(12, 9)", "output": "108", "ops": "=="}, {"input": "parallelogram_area(8, 20)", "output": "160", "ops": "=="}, {"input": "parallelogram_area(12, 15)", "output": "180", "ops": "=="}, {"input": "parallelogram_area(8, 12)", "output": "96", "ops": "=="}, {"input": "parallelogram_area(11, 5)", "output": "55", "ops": "=="}, {"input": "parallelogram_area(6, 9)", "output": "54", "ops": "=="}, {"input": "parallelogram_area(8, 27)", "output": "216", "ops": "=="}, {"input": "parallelogram_area(12, 10)", "output": "120", "ops": "=="}, {"input": "parallelogram_area(9, 20)", "output": "180", "ops": "=="}, {"input": "parallelogram_area(18, 18,)", "output": "324", "ops": "=="}, {"input": "parallelogram_area(1010, 1020)", "output": "1030200", "ops": "=="}, {"input": "parallelogram_area(30, 30)", "output": "900", "ops": "=="}, {"input": "parallelogram_area(60, 30)", "output": "1800", "ops": "=="}, {"input": "parallelogram_area(1, 4)", "output": "4", "ops": "=="}, {"input": "parallelogram_area(10, 4)", "output": "40", "ops": "=="}, {"input": "parallelogram_area(8, 20)", "output": "160", "ops": "=="}], "158": [{"input": "month_season(2011, 21)", "output": "'autumn'", "ops": "=="}, {"input": "month_season(1, 4)", "output": "'autumn'", "ops": "=="}, {"input": "month_season(2015, 6)!= month_season(2015, 27)", "output": "False", "ops": "=="}, {"input": "month_season(2015, 29)!= month_season(2016, 4)", "output": "False", "ops": "=="}, {"input": "month_season(7, 28)", "output": "'autumn'", "ops": "=="}, {"input": "month_season(2000, '')", "output": "'autumn'", "ops": "=="}, {"input": "month_season(2010, 4)", "output": "'autumn'", "ops": "=="}, {"input": "month_season(2013, 7)", "output": "'autumn'", "ops": "=="}, {"input": "month_season(2007, 7)", "output": "'autumn'", "ops": "=="}], "326": [{"input": "check_isosceles(5, 24, 25)", "output": "False", "ops": "=="}, {"input": "check_isosceles(5, 20, 25)", "output": "False", "ops": "=="}, {"input": "check_isosceles(6, 20, 12)", "output": "False", "ops": "=="}, {"input": "check_isosceles(4, 6, 16)", "output": "False", "ops": "=="}, {"input": "check_isosceles(30, 6, 16)", "output": "False", "ops": "=="}, {"input": "check_isosceles(32, 7, 16)", "output": "False", "ops": "=="}, {"input": "check_isosceles(22, 22, 20)", "output": "True", "ops": "=="}, {"input": "check_isosceles(14, 20, 5)", "output": "False", "ops": "=="}, {"input": "check_isosceles(7, 24, 30)", "output": "False", "ops": "=="}, {"input": "check_isosceles(12, 30, 60)", "output": "False", "ops": "=="}, {"input": "check_isosceles(13, 18, 22)", "output": "False", "ops": "=="}, {"input": "check_isosceles(3, 28, 35)", "output": "False", "ops": "=="}, {"input": "check_isosceles(7, 31, 47)", "output": "False", "ops": "=="}, {"input": "check_isosceles(1, 45, 47)", "output": "False", "ops": "=="}, {"input": "check_isosceles(19, 4, 8)", "output": "False", "ops": "=="}, {"input": "check_isosceles(16, 6, 20)", "output": "False", "ops": "=="}, {"input": "check_isosceles(4, 6, 11)", "output": "False", "ops": "=="}, {"input": "check_isosceles(2, 4, 15)", "output": "False", "ops": "=="}, {"input": "check_isosceles(6, 5, 6)", "output": "True", "ops": "=="}, {"input": "check_isosceles(1, 7, 10)", "output": "False", "ops": "=="}, {"input": "check_isosceles(1, 7, 17)", "output": "False", "ops": "=="}, {"input": "check_isosceles(5, 10, 12)", "output": "False", "ops": "=="}, {"input": "check_isosceles(9, 11, 5)", "output": "False", "ops": "=="}, {"input": "check_isosceles(9, 11, 17)", "output": "False", "ops": "=="}, {"input": "check_isosceles(6, 21, 32)", "output": "False", "ops": "=="}], "477": [{"input": "remove_lowercase(\"\")", "output": "''", "ops": "=="}], "510": [{"input": "string_xor(\"\", \"\")", "output": "''", "ops": "=="}, {"input": "string_xor('10', '8')", "output": "'1'", "ops": "=="}], "654": [{"input": "eat(4, 2, 10)", "output": "[6, 8]", "ops": "=="}, {"input": "eat(3, 4, 9)", "output": "[7, 5]", "ops": "=="}, {"input": "eat(7, 3, 10)", "output": "[10, 7]", "ops": "=="}, {"input": "eat(6, 2, 1)", "output": "[7, 0]", "ops": "=="}, {"input": "eat(5, 4, 1)", "output": "[6, 0]", "ops": "=="}, {"input": "eat(5, 5, 10)", "output": "[10, 5]", "ops": "=="}, {"input": "eat(2, 7, 3)", "output": "[5, 0]", "ops": "=="}, {"input": "eat(6, 8, 9)", "output": "[14, 1]", "ops": "=="}, {"input": "eat(5, 9, 0)", "output": "[5, 0]", "ops": "=="}, {"input": "eat(5, 16, 3)", "output": "[8, 0]", "ops": "=="}, {"input": "eat(2, 19, 5)", "output": "[7, 0]", "ops": "=="}, {"input": "eat(5, 4, 5)", "output": "[9, 1]", "ops": "=="}, {"input": "eat(5, 0, 0)", "output": "[5, 0]", "ops": "=="}, {"input": "eat(4, 5, 9)", "output": "[9, 4]", "ops": "=="}, {"input": "eat(13, 11, 11)", "output": "[24, 0]", "ops": "=="}, {"input": "eat(10, 12, 13)", "output": "[22, 1]", "ops": "=="}], "67": [{"input": "is_Monotonic([])", "output": "True", "ops": "=="}, {"input": "is_Monotonic([])", "output": "True", "ops": "=="}, {"input": "is_Monotonic([])", "output": "True", "ops": "=="}, {"input": "is_Monotonic([0])", "output": "True", "ops": "=="}, {"input": "is_Monotonic([1])", "output": "True", "ops": "=="}, {"input": "is_Monotonic([1, 3])", "output": "True", "ops": "=="}, {"input": "is_Monotonic([1])", "output": "True", "ops": "=="}, {"input": "(is_Monotonic([1, 2, 3, 4]),True)", "output": "(True, True)", "ops": "=="}, {"input": "is_Monotonic([0])", "output": "True", "ops": "=="}, {"input": "is_Monotonic([1, 2, 2, 3]) or is_Monotonic([1,2,3])", "output": "True", "ops": "=="}, {"input": "is_Monotonic([])", "output": "True", "ops": "=="}], "122": [{"input": "amicable_numbers_sum(100)", "output": "0", "ops": "=="}, {"input": "amicable_numbers_sum(10)", "output": "0", "ops": "=="}, {"input": "amicable_numbers_sum(1234)", "output": "2898", "ops": "=="}, {"input": "amicable_numbers_sum(99.9)", "output": "'Input is not an integer!'", "ops": "=="}, {"input": "amicable_numbers_sum(9999.01)", "output": "'Input is not an integer!'", "ops": "=="}, {"input": "amicable_numbers_sum(101)", "output": "0", "ops": "=="}, {"input": "amicable_numbers_sum(9)", "output": "0", "ops": "=="}, {"input": "amicable_numbers_sum(100)", "output": "0", "ops": "=="}, {"input": "amicable_numbers_sum(100)", "output": "0", "ops": "=="}, {"input": "amicable_numbers_sum(95)", "output": "0", "ops": "=="}, {"input": "amicable_numbers_sum(1111)", "output": "504", "ops": "=="}], "331": [{"input": "char_frequency_dict = []", "output": "[]", "ops": "=="}, {"input": "char_frequency(['progra', 'aming', 'language'])", "output": "{'progra': 1, 'aming': 1, 'language': 1}", "ops": "=="}, {"input": "char_frequency({'alice': 100})", "output": "{'alice': 1}", "ops": "=="}, {"input": "char_frequency([])", "output": "{}", "ops": "=="}, {"input": "char_frequency(\"\")", "output": "{}", "ops": "=="}, {"input": "char_frequency(list('spam'))", "output": "{'s': 1, 'p': 1, 'a': 1, 'm': 1}", "ops": "=="}, {"input": "char_frequency(list('i'))", "output": "{'i': 1}", "ops": "=="}, {"input": "char_frequency(set(\"abracadabra\"))", "output": "{'d': 1, 'b': 1, 'r': 1, 'c': 1, 'a': 1}", "ops": "=="}], "454": [{"input": "check_monthnumb_number(8)", "output": "True", "ops": "=="}, {"input": "check_monthnumb_number(105)", "output": "False", "ops": "=="}, {"input": "check_monthnumb_number(-6)", "output": "False", "ops": "=="}, {"input": "not check_monthnumb_number(2015)", "output": "True", "ops": "=="}, {"input": "check_monthnumb_number(12)", "output": "True", "ops": "=="}, {"input": "check_monthnumb_number(12)", "output": "True", "ops": "=="}, {"input": "check_monthnumb_number(15)", "output": "False", "ops": "=="}, {"input": "check_monthnumb_number(1)", "output": "True", "ops": "=="}, {"input": "check_monthnumb_number(3)", "output": "True", "ops": "=="}, {"input": "check_monthnumb_number(4)", "output": "False", "ops": "=="}, {"input": "check_monthnumb_number(100)", "output": "False", "ops": "=="}, {"input": "check_monthnumb_number(14)", "output": "False", "ops": "=="}, {"input": "check_monthnumb_number(13)", "output": "False", "ops": "=="}, {"input": "check_monthnumb_number(201608)", "output": "False", "ops": "=="}], "226": [{"input": "min_of_three(-11, -21, 0)", "output": "-21", "ops": "=="}, {"input": "min_of_three(20, 5, 40)", "output": "5", "ops": "=="}, {"input": "min_of_three(21, 32, 0)", "output": "0", "ops": "=="}, {"input": "min_of_three(9, 17, 13)", "output": "9", "ops": "=="}, {"input": "min_of_three(100, 200, 300)", "output": "100", "ops": "=="}, {"input": "min_of_three(3, 4, 5)", "output": "3", "ops": "=="}, {"input": "min_of_three(10, -15, 18)", "output": "-15", "ops": "=="}, {"input": "min_of_three(15, 5, 10)", "output": "5", "ops": "=="}, {"input": "min_of_three(10, 9, 7)", "output": "7", "ops": "=="}], "335": [{"input": "check_monthnum(2001)", "output": "False", "ops": "=="}, {"input": "check_monthnum(2018)", "output": "False", "ops": "=="}, {"input": "check_monthnum(10)", "output": "False", "ops": "=="}, {"input": "check_monthnum(\"\")", "output": "False", "ops": "=="}, {"input": "check_monthnum(42.42)", "output": "False", "ops": "=="}, {"input": "check_monthnum(1968) == [False, False, False, True, True]", "output": "False", "ops": "=="}, {"input": "check_monthnum(2014)", "output": "False", "ops": "=="}, {"input": "check_monthnum(\"\")", "output": "False", "ops": "=="}, {"input": "check_monthnum((1, 2, 'threethree') == 'two')", "output": "False", "ops": "=="}, {"input": "check_monthnum(11)", "output": "False", "ops": "=="}], "376": [{"input": "remove_Char('A2B3C', '3')", "output": "'A2BC'", "ops": "=="}, {"input": "remove_Char('K2', '2')", "output": "'K'", "ops": "=="}, {"input": "remove_Char(['A', 'B', 'C'], 'B')", "output": "'AC'", "ops": "=="}, {"input": "remove_Char('0123', 'g')", "output": "'0123'", "ops": "=="}], "534": [{"input": "max_element(range(1,100,5)) == 45", "output": "False", "ops": "=="}, {"input": "max_element(range(100))", "output": "99", "ops": "=="}, {"input": "max_element([5, 3, 0, 0, 0, 6, 1])", "output": "6", "ops": "=="}, {"input": "max_element([1])", "output": "1", "ops": "=="}], "618": [{"input": "get_odd_collatz(61)", "output": "[1, 5, 23, 35, 53, 61]", "ops": "=="}, {"input": "get_odd_collatz(361)", "output": "[1, 5, 7, 11, 13, 17, 37, 43, 49, 65, 271, 361, 407, 611, 917]", "ops": "=="}, {"input": "get_odd_collatz(7)", "output": "[1, 5, 7, 11, 13, 17]", "ops": "=="}, {"input": "get_odd_collatz(2)", "output": "[1]", "ops": "=="}, {"input": "get_odd_collatz(3)", "output": "[1, 3, 5]", "ops": "=="}, {"input": "get_odd_collatz(10)", "output": "[1, 5]", "ops": "=="}, {"input": "get_odd_collatz(8)", "output": "[1]", "ops": "=="}, {"input": "get_odd_collatz(19)", "output": "[1, 5, 11, 13, 17, 19, 29]", "ops": "=="}, {"input": "get_odd_collatz(33)", "output": "[1, 5, 11, 13, 17, 19, 25, 29, 33]", "ops": "=="}, {"input": "get_odd_collatz(63)", "output": "[1, 5, 23, 35, 53, 61, 63, 91, 95, 103, 137, 143, 155, 167, 175, 215, 233, 251, 263, 283, 319, 323, 325, 377, 395, 425, 433, 445, 479, 485, 577, 593, 719, 911, 1079, 1367, 1619, 2051, 2429, 3077]", "ops": "=="}, {"input": "get_odd_collatz(0)", "output": "[]", "ops": "=="}, {"input": "get_odd_collatz(16)", "output": "[1]", "ops": "=="}, {"input": "get_odd_collatz(9)", "output": "[1, 5, 7, 9, 11, 13, 17]", "ops": "=="}, {"input": "get_odd_collatz(22)", "output": "[1, 5, 11, 13, 17]", "ops": "=="}, {"input": "get_odd_collatz(4)", "output": "[1]", "ops": "=="}, {"input": "get_odd_collatz(160)", "output": "[1, 5]", "ops": "=="}, {"input": "get_odd_collatz(222)", "output": "[1, 5, 23, 35, 53, 61, 111, 167, 251, 283, 319, 325, 377, 425, 433, 479, 577, 719, 911, 1079, 1367, 1619, 2051, 2429, 3077]", "ops": "=="}, {"input": "get_odd_collatz(43523)", "output": "[1, 5, 7, 11, 13, 17, 37, 49, 65, 173, 307, 409, 461, 545, 1453, 1937, 3443, 5165, 9181, 12241, 43523, 65285]", "ops": "=="}, {"input": "get_odd_collatz(21)", "output": "[1, 21]", "ops": "=="}, {"input": "get_odd_collatz(2)", "output": "[1]", "ops": "=="}], "106": [{"input": "count_Hexadecimal(17, 100)", "output": "30", "ops": "=="}, {"input": "count_Hexadecimal(21, 23)", "output": "0", "ops": "=="}, {"input": "count_Hexadecimal(5, 16)", "output": "6", "ops": "=="}, {"input": "count_Hexadecimal(16, 17)", "output": "0", "ops": "=="}, {"input": "count_Hexadecimal(12, 10)", "output": "0", "ops": "=="}, {"input": "count_Hexadecimal(27, 32)", "output": "5", "ops": "=="}, {"input": "count_Hexadecimal(10000, 1111)", "output": "0", "ops": "=="}, {"input": "count_Hexadecimal(10234, 1000)", "output": "0", "ops": "=="}, {"input": "count_Hexadecimal(16, 170)", "output": "66", "ops": "=="}, {"input": "count_Hexadecimal(15, 64)", "output": "19", "ops": "=="}, {"input": "count_Hexadecimal(5, 8)", "output": "0", "ops": "=="}, {"input": "count_Hexadecimal(5, 64)", "output": "24", "ops": "=="}, {"input": "count_Hexadecimal(5, 128)", "output": "48", "ops": "=="}, {"input": "count_Hexadecimal(100, 999)", "output": "696", "ops": "=="}], "191": [{"input": "check_String('')", "output": "False", "ops": "=="}, {"input": "check_String('')", "output": "False", "ops": "=="}, {"input": "check_String(())", "output": "False", "ops": "=="}, {"input": "check_String(' ')", "output": "False", "ops": "=="}], "245": [{"input": "babylonian_squareroot(30)", "output": "5.477225575051661", "ops": "=="}, {"input": "babylonian_squareroot(11)", "output": "3.3166247903554", "ops": "=="}, {"input": "babylonian_squareroot(5)", "output": "2.23606797749979", "ops": "=="}, {"input": "babylonian_squareroot(5)", "output": "2.23606797749979", "ops": "=="}, {"input": "babylonian_squareroot(0.3)", "output": "0.5477225575051661", "ops": "=="}, {"input": "babylonian_squareroot(7)", "output": "2.6457513110645907", "ops": "=="}, {"input": "babylonian_squareroot(8)", "output": "2.82842712474619", "ops": "=="}, {"input": "babylonian_squareroot(2.442)", "output": "1.5626899884494045", "ops": "=="}, {"input": "babylonian_squareroot(20)", "output": "4.47213595499958", "ops": "=="}, {"input": "babylonian_squareroot(25)", "output": "5.0", "ops": "=="}, {"input": "babylonian_squareroot(32)", "output": "5.65685424949238", "ops": "=="}, {"input": "babylonian_squareroot(18)", "output": "4.242640687119286", "ops": "=="}, {"input": "babylonian_squareroot(100)", "output": "10.0", "ops": "=="}, {"input": "babylonian_squareroot(30)", "output": "5.477225575051661", "ops": "=="}, {"input": "babylonian_squareroot(15)", "output": "3.872983346207417", "ops": "=="}], "642": [{"input": "get_max_triples(500)", "output": "6861361", "ops": "=="}], "351": [{"input": "unique_Characters(['a', 'h', \"heya\" + 'hola'])", "output": "True", "ops": "=="}, {"input": "unique_Characters(('abab', 'abb'))", "output": "True", "ops": "=="}, {"input": "unique_Characters(['bab','aba'])", "output": "True", "ops": "=="}, {"input": "unique_Characters(u'caba')", "output": "False", "ops": "=="}, {"input": "unique_Characters([1,23,44, 'a'])", "output": "True", "ops": "=="}, {"input": "unique_Characters(['a', 'b', 'bc'])", "output": "True", "ops": "=="}], "540": [{"input": "incr_list(range(0, 3))", "output": "[1, 2, 3]", "ops": "=="}, {"input": "incr_list([0])", "output": "[1]", "ops": "=="}, {"input": "incr_list(set([]))", "output": "[]", "ops": "=="}, {"input": "incr_list(list(iter([1, 2, 3, 2, 1, 3, 2, 5, 2, 2, 9, 8, 3, 0, 0, 0, 12, -999])))", "output": "[2, 3, 4, 3, 2, 4, 3, 6, 3, 3, 10, 9, 4, 1, 1, 1, 13, -998]", "ops": "=="}, {"input": "incr_list([1])", "output": "[2]", "ops": "=="}, {"input": "incr_list([1, 2, 3, 10, 90])", "output": "[2, 3, 4, 11, 91]", "ops": "=="}], "65": [{"input": "pos_count([1, 2, 4, 5, ])", "output": "4", "ops": "=="}, {"input": "pos_count([2, 1, 4])", "output": "3", "ops": "=="}, {"input": "pos_count([1, -2, 3, 9])", "output": "3", "ops": "=="}, {"input": "pos_count([-13, -2, 12, 0])", "output": "2", "ops": "=="}, {"input": "pos_count([1, -2, 43, 1, 42])", "output": "4", "ops": "=="}, {"input": "pos_count([0, 1, 4, 2])", "output": "4", "ops": "=="}, {"input": "pos_count([2, 3, 4, -2, 100])", "output": "4", "ops": "=="}, {"input": "pos_count([1, -2, 3, -92, 41])", "output": "3", "ops": "=="}, {"input": "pos_count([1, 2, 4])", "output": "3", "ops": "=="}, {"input": "pos_count([1, 2, 3, 4, 5])", "output": "5", "ops": "=="}, {"input": "pos_count([1])", "output": "1", "ops": "=="}, {"input": "pos_count(iter([]))", "output": "0", "ops": "=="}, {"input": "pos_count([0])", "output": "1", "ops": "=="}, {"input": "pos_count([-4])", "output": "0", "ops": "=="}], "104": [{"input": "count([1e4, 1e5, 1e6])", "output": "1110000.0", "ops": "=="}, {"input": "count([False])", "output": "0", "ops": "=="}, {"input": "count([True])", "output": "1", "ops": "=="}, {"input": "count([False, False, False, False, True, True, False, True, True])", "output": "4", "ops": "=="}, {"input": "count([True, True, False, True, True, False, True, False, False])", "output": "5", "ops": "=="}, {"input": "count([0, 0, 0])", "output": "0", "ops": "=="}, {"input": "count({})", "output": "0", "ops": "=="}, {"input": "count([])", "output": "0", "ops": "=="}], "152": [{"input": "parabola_vertex(13, 21, 5)", "output": "(-0.8076923076923077, -3.480769230769231)", "ops": "=="}, {"input": "parabola_vertex(16, 15, 14)", "output": "(-0.46875, 10.484375)", "ops": "=="}, {"input": "parabola_vertex(13, 5, 8)", "output": "(-0.19230769230769232, 7.519230769230769)", "ops": "=="}, {"input": "parabola_vertex(20, 50, 120)", "output": "(-1.25, 88.75)", "ops": "=="}, {"input": "parabola_vertex(7, 5, 9)", "output": "(-0.35714285714285715, 8.107142857142858)", "ops": "=="}, {"input": "parabola_vertex(3, 4, 4)", "output": "(-0.6666666666666666, 2.6666666666666665)", "ops": "=="}, {"input": "parabola_vertex(9, 11, 4)", "output": "(-0.6111111111111112, 0.6388888888888888)", "ops": "=="}, {"input": "parabola_vertex(2, 11, 12)", "output": "(-2.75, -3.125)", "ops": "=="}, {"input": "parabola_vertex(6, 3, 1)", "output": "(-0.25, 0.625)", "ops": "=="}, {"input": "parabola_vertex(17, 9, 2)", "output": "(-0.2647058823529412, 0.8088235294117647)", "ops": "=="}, {"input": "parabola_vertex(2, 10, 24)", "output": "(-2.5, 11.5)", "ops": "=="}, {"input": "parabola_vertex(10, 3, 12)", "output": "(-0.15, 11.775)", "ops": "=="}, {"input": "parabola_vertex(1, 3, 3)", "output": "(-1.5, 0.75)", "ops": "=="}, {"input": "parabola_vertex(2, 17, 2)", "output": "(-4.25, -34.125)", "ops": "=="}, {"input": "parabola_vertex(11, 12, -1)", "output": "(-0.5454545454545454, -4.2727272727272725)", "ops": "=="}, {"input": "parabola_vertex(9, 8, -1)", "output": "(-0.4444444444444444, -2.7777777777777777)", "ops": "=="}, {"input": "parabola_vertex(9, 9, 3)", "output": "(-0.5, 0.75)", "ops": "=="}, {"input": "parabola_vertex(10, 19, 3)", "output": "(-0.95, -6.025)", "ops": "=="}, {"input": "parabola_vertex(10, 1, 7)", "output": "(-0.05, 6.975)", "ops": "=="}], "280": [{"input": "all_unique([])", "output": "True", "ops": "=="}, {"input": "all_unique(list([1, 3, 4, 2]))", "output": "True", "ops": "=="}, {"input": "all_unique([1])", "output": "True", "ops": "=="}, {"input": "all_unique((1,2,3,4,5))", "output": "True", "ops": "=="}, {"input": "all_unique([1])", "output": "True", "ops": "=="}, {"input": "all_unique([1])", "output": "True", "ops": "=="}, {"input": "all_unique([])", "output": "True", "ops": "=="}, {"input": "all_unique([0, 2, 2, 3, 3, 4])", "output": "False", "ops": "=="}, {"input": "all_unique([])", "output": "True", "ops": "=="}, {"input": "all_unique([2, 1, 3, 1, 4])", "output": "False", "ops": "=="}, {"input": "all_unique([1])", "output": "True", "ops": "=="}, {"input": "all_unique([1, 1])", "output": "False", "ops": "=="}], "343": [{"input": "count_Odd_Squares(13, 101)", "output": "7", "ops": "=="}, {"input": "count_Odd_Squares(6, 9)", "output": "1", "ops": "=="}, {"input": "count_Odd_Squares(7, 54)", "output": "5", "ops": "=="}, {"input": "count_Odd_Squares(12, 51)", "output": "4", "ops": "=="}, {"input": "count_Odd_Squares(15, 100)", "output": "7", "ops": "=="}, {"input": "count_Odd_Squares(11, 131)", "output": "8", "ops": "=="}, {"input": "count_Odd_Squares(5, 12)", "output": "1", "ops": "=="}, {"input": "count_Odd_Squares(11, 15)", "output": "0", "ops": "=="}, {"input": "count_Odd_Squares(14, 1)", "output": "-2", "ops": "=="}, {"input": "count_Odd_Squares(1, 10)", "output": "3", "ops": "=="}, {"input": "count_Odd_Squares(7, 15)", "output": "1", "ops": "=="}, {"input": "count_Odd_Squares(18, 23)", "output": "0", "ops": "=="}, {"input": "count_Odd_Squares(5, 23)", "output": "2", "ops": "=="}, {"input": "count_Odd_Squares(6, 30)", "output": "3", "ops": "=="}, {"input": "count_Odd_Squares(8, 5)", "output": "0", "ops": "=="}, {"input": "count_Odd_Squares(30, 20)", "output": "-1", "ops": "=="}, {"input": "count_Odd_Squares(1, 2)", "output": "1", "ops": "=="}, {"input": "count_Odd_Squares(9, 2)", "output": "-1", "ops": "=="}, {"input": "count_Odd_Squares(17, 23)", "output": "0", "ops": "=="}], "367": [{"input": "repeat_tuples((2, 2), 0)", "output": "()", "ops": "=="}, {"input": "repeat_tuples((1, 5), 10)", "output": "((1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5))", "ops": "=="}, {"input": "repeat_tuples((2, 3, 4), 5)", "output": "((2, 3, 4), (2, 3, 4), (2, 3, 4), (2, 3, 4), (2, 3, 4))", "ops": "=="}, {"input": "sum(range(1, 13)), list(repeat_tuples((0, 1), 10))", "output": "(78, [(0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1)])", "ops": "=="}, {"input": "repeat_tuples((-1, 5), 1)", "output": "((-1, 5),)", "ops": "=="}, {"input": "repeat_tuples((1, -1), 2)", "output": "((1, -1), (1, -1))", "ops": "=="}, {"input": "repeat_tuples((1, 1), 0)", "output": "()", "ops": "=="}, {"input": "repeat_tuples((1,) * 100, 0)", "output": "()", "ops": "=="}, {"input": "repeat_tuples((-3, 4, 5), 3)", "output": "((-3, 4, 5), (-3, 4, 5), (-3, 4, 5))", "ops": "=="}, {"input": "repeat_tuples((0, 1), 6)", "output": "((0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1))", "ops": "=="}, {"input": "repeat_tuples((0, 1), 2)", "output": "((0, 1), (0, 1))", "ops": "=="}, {"input": "repeat_tuples(3, 7)", "output": "(3, 3, 3, 3, 3, 3, 3)", "ops": "=="}, {"input": "repeat_tuples((2, 1, 2, 3), 4)", "output": "((2, 1, 2, 3), (2, 1, 2, 3), (2, 1, 2, 3), (2, 1, 2, 3))", "ops": "=="}, {"input": "repeat_tuples((-2, -2), -5)", "output": "()", "ops": "=="}], "377": [{"input": "move_first(list(range(2, 21, 2)))", "output": "[20, 2, 4, 6, 8, 10, 12, 14, 16, 18]", "ops": "=="}, {"input": "move_first([])", "output": "[]", "ops": "=="}, {"input": "move_first([0])", "output": "[0]", "ops": "=="}, {"input": "move_first([1])", "output": "[1]", "ops": "=="}, {"input": "move_first([2, 0])", "output": "[0, 2]", "ops": "=="}, {"input": "move_first([10])", "output": "[10]", "ops": "=="}, {"input": "move_first([])", "output": "[]", "ops": "=="}, {"input": "len(move_first([4, 1, 2, 3, 5, 9]))", "output": "6", "ops": "=="}, {"input": "move_first([])", "output": "[]", "ops": "=="}, {"input": "move_first([])", "output": "[]", "ops": "=="}, {"input": "move_first([])", "output": "[]", "ops": "=="}, {"input": "move_first([1])", "output": "[1]", "ops": "=="}, {"input": "move_first([])", "output": "[]", "ops": "=="}, {"input": "move_first([]);", "output": "[]", "ops": "=="}, {"input": "move_first([])", "output": "[]", "ops": "=="}, {"input": "move_first([])", "output": "[]", "ops": "=="}, {"input": "move_first([[], 'first'])", "output": "['first', []]", "ops": "=="}], "23": [{"input": "binary_to_decimal(9872345876)", "output": "7932", "ops": "=="}, {"input": "binary_to_decimal(111)", "output": "7", "ops": "=="}, {"input": "binary_to_decimal(11111010101)", "output": "2005", "ops": "=="}, {"input": "binary_to_decimal(11111101)", "output": "253", "ops": "=="}, {"input": "binary_to_decimal(10000111)", "output": "135", "ops": "=="}, {"input": "binary_to_decimal(90900091)", "output": "1459", "ops": "=="}, {"input": "binary_to_decimal(5631855818590102)", "output": "317878", "ops": "=="}, {"input": "binary_to_decimal(1111111111)", "output": "1023", "ops": "=="}, {"input": "binary_to_decimal(1001101)", "output": "77", "ops": "=="}, {"input": "binary_to_decimal(1010101)", "output": "85", "ops": "=="}, {"input": "binary_to_decimal(92)", "output": "20", "ops": "=="}], "496": [{"input": "surfacearea_cone(100, 50)", "output": "66540.00019110156", "ops": "=="}, {"input": "surfacearea_cone(30, 32)", "output": "6961.46374381921", "ops": "=="}, {"input": "surfacearea_cone(42, 44)", "output": "13567.785513993178", "ops": "=="}, {"input": "surfacearea_cone(35, 31)", "output": "8989.396453135505", "ops": "=="}, {"input": "surfacearea_cone(20, 13)", "output": "2755.4105472195224", "ops": "=="}, {"input": "surfacearea_cone(30, 18)", "output": "6124.759002761479", "ops": "=="}, {"input": "surfacearea_cone(31, 33)", "output": "7428.56191103659", "ops": "=="}, {"input": "surfacearea_cone(30, 25)", "output": "6507.926838910374", "ops": "=="}, {"input": "surfacearea_cone(60, 18)", "output": "23117.442035586122", "ops": "=="}, {"input": "surfacearea_cone(38, 38)", "output": "10951.982754484343", "ops": "=="}, {"input": "surfacearea_cone(29, 13)", "output": "5537.479337799656", "ops": "=="}, {"input": "surfacearea_cone(47, 12)", "output": "14102.180195897256", "ops": "=="}, {"input": "surfacearea_cone(25, 20)", "output": "4477.9964165363435", "ops": "=="}], "504": [{"input": "intersperse([1], 3)", "output": "[1]", "ops": "=="}, {"input": "intersperse([], 10)", "output": "[]", "ops": "=="}, {"input": "intersperse([1], [1, 3])", "output": "[1]", "ops": "=="}, {"input": "intersperse([], 15)", "output": "[]", "ops": "=="}, {"input": "intersperse([], 10)", "output": "[]", "ops": "=="}, {"input": "intersperse((5, 7), 6)", "output": "[5, 6, 7]", "ops": "=="}, {"input": "intersperse(list(range(1, 26)), 10)", "output": "[1, 10, 2, 10, 3, 10, 4, 10, 5, 10, 6, 10, 7, 10, 8, 10, 9, 10, 10, 10, 11, 10, 12, 10, 13, 10, 14, 10, 15, 10, 16, 10, 17, 10, 18, 10, 19, 10, 20, 10, 21, 10, 22, 10, 23, 10, 24, 10, 25]", "ops": "=="}, {"input": "intersperse([], 10)", "output": "[]", "ops": "=="}], "580": [{"input": "add(['a'])", "output": "0", "ops": "=="}, {"input": "add([])", "output": "0", "ops": "=="}, {"input": "add([])", "output": "0", "ops": "=="}, {"input": "add([1, 0])", "output": "0", "ops": "=="}, {"input": "add([1])", "output": "0", "ops": "=="}, {"input": "add([])", "output": "0", "ops": "=="}, {"input": "add([1, 2, 3])", "output": "2", "ops": "=="}, {"input": "add([0])", "output": "0", "ops": "=="}, {"input": "add([1, 1, 1])", "output": "0", "ops": "=="}, {"input": "add([])", "output": "0", "ops": "=="}, {"input": "add([1] * 35)", "output": "0", "ops": "=="}, {"input": "add([10, 0, 0, 100, 0])", "output": "100", "ops": "=="}, {"input": "add([0] * 16)", "output": "0", "ops": "=="}, {"input": "add([1, 1, 1, 3, 134, 341, 543]), sum([2, 1, 1, 3, 1, 13, 3, 54])", "output": "(0, 78)", "ops": "=="}, {"input": "add(([1] * 8) + [2, 0, 1, 3, 0])", "output": "0", "ops": "=="}], "138": [{"input": "circle_circumference(3)", "output": "18.849", "ops": "=="}, {"input": "circle_circumference(13)", "output": "81.679", "ops": "=="}, {"input": "circle_circumference(7)", "output": "43.981", "ops": "=="}, {"input": "circle_circumference(3)", "output": "18.849", "ops": "=="}, {"input": "circle_circumference(3)", "output": "18.849", "ops": "=="}, {"input": "circle_circumference(3)", "output": "18.849", "ops": "=="}, {"input": "circle_circumference_5 = 9", "output": "9", "ops": "=="}, {"input": "circle_circumference(9)", "output": "56.547000000000004", "ops": "=="}, {"input": "circle_circumference(1)", "output": "6.283", "ops": "=="}, {"input": "circle_circumference(17)", "output": "106.811", "ops": "=="}, {"input": "circle_circumference(30)", "output": "188.49", "ops": "=="}, {"input": "circle_circumference(15)", "output": "94.245", "ops": "=="}, {"input": "circle_circumference(8)", "output": "50.264", "ops": "=="}, {"input": "circle_circumference(15)", "output": "94.245", "ops": "=="}, {"input": "circle_circumference(2)", "output": "12.566", "ops": "=="}, {"input": "circle_circumference(7.0)", "output": "43.981", "ops": "=="}, {"input": "circle_circumference(1)", "output": "6.283", "ops": "=="}], "149": [{"input": "does_Contain_B(2.5, 1.7, 0)", "output": "False", "ops": "=="}, {"input": "does_Contain_B(11, 3, 5)", "output": "False", "ops": "=="}, {"input": "does_Contain_B(8, -1, 5)", "output": "False", "ops": "=="}, {"input": "does_Contain_B(3, 4, 5)", "output": "False", "ops": "=="}, {"input": "does_Contain_B(11, 4, 10)", "output": "False", "ops": "=="}, {"input": "does_Contain_B(6, 7, 3)", "output": "False", "ops": "=="}, {"input": "does_Contain_B(6, 7, 3)", "output": "False", "ops": "=="}, {"input": "does_Contain_B(2, 1, 5)", "output": "False", "ops": "=="}, {"input": "does_Contain_B(-1, 5, 5)", "output": "False", "ops": "=="}, {"input": "does_Contain_B(-11, 10, 20)", "output": "False", "ops": "=="}, {"input": "does_Contain_B(6, 7, 8)", "output": "False", "ops": "=="}, {"input": "does_Contain_B(7, 3, 5)", "output": "False", "ops": "=="}], "333": [{"input": "check_Validity(8, 9, 2)", "output": "True", "ops": "=="}, {"input": "check_Validity(2, 1, -1)", "output": "False", "ops": "=="}, {"input": "check_Validity(10,  93, 5)", "output": "False", "ops": "=="}, {"input": "check_Validity(7, 10, 1)", "output": "False", "ops": "=="}, {"input": "check_Validity(8, 10, 4)", "output": "True", "ops": "=="}, {"input": "check_Validity(8, 10, 10)", "output": "True", "ops": "=="}, {"input": "check_Validity(20, 17, 20)", "output": "True", "ops": "=="}, {"input": "check_Validity(13, 22, 11)", "output": "True", "ops": "=="}, {"input": "check_Validity(7, 2, 1)", "output": "False", "ops": "=="}, {"input": "check_Validity(11, 11, 2)", "output": "True", "ops": "=="}, {"input": "check_Validity(0, 20, 30)", "output": "False", "ops": "=="}, {"input": "check_Validity(12, 15, 5)", "output": "True", "ops": "=="}, {"input": "check_Validity(0, 25, 5) == False", "output": "True", "ops": "=="}], "358": [{"input": "Check_Solution(4.9, -2, -1)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(3.5, 4, 2)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(53, 1, 15)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(98763, 2, 80)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(-1, -2, 4)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(-80, -1, 10)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(2, 1, 1)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(15, 7, 2)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(9, 9, 2)", "output": "'Yes'", "ops": "=="}, {"input": "Check_Solution(4, 3, -3)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(7, 15, 4)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(4, 3, 7)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(2, -3, 7)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(6, 0, 9)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(8, 3, 3)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(3, -25, 270)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(3, 4, 2)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(-3, 5, 2)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(-4, 4, -5)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(1, 1, 2)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(1.9, 1.8, -1.7)", "output": "'No'", "ops": "=="}, {"input": "sol = Check_Solution(1.9, 0.9, -0.7)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(6, -6, -8)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(6, 5, 5)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(7, 3, 3)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(3, 6, 3)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(0, -5, 1)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(13, -20, 33)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(0, 400000000, 312)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(1000000, 1, -1)", "output": "'No'", "ops": "=="}], "595": [{"input": "make_a_pile(10)", "output": "[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]", "ops": "=="}, {"input": "make_a_pile(10)", "output": "[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]", "ops": "=="}, {"input": "make_a_pile(9)", "output": "[9, 11, 13, 15, 17, 19, 21, 23, 25]", "ops": "=="}, {"input": "make_a_pile(12)", "output": "[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]", "ops": "=="}, {"input": "make_a_pile(15)", "output": "[15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43]", "ops": "=="}, {"input": "make_a_pile(9)", "output": "[9, 11, 13, 15, 17, 19, 21, 23, 25]", "ops": "=="}, {"input": "make_a_pile(12)", "output": "[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]", "ops": "=="}, {"input": "make_a_pile(9)", "output": "[9, 11, 13, 15, 17, 19, 21, 23, 25]", "ops": "=="}, {"input": "make_a_pile(19)", "output": "[19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55]", "ops": "=="}, {"input": "make_a_pile(13)", "output": "[13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]", "ops": "=="}, {"input": "make_a_pile(10)", "output": "[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]", "ops": "=="}], "35": [{"input": "find_Nth_Digit(8, 12, 11)", "output": "6", "ops": "=="}, {"input": "find_Nth_Digit(99, 1000, 999)", "output": "0", "ops": "=="}, {"input": "find_Nth_Digit(13, 12, 11)", "output": "3", "ops": "=="}, {"input": "find_Nth_Digit(100, 5, 2)", "output": "0", "ops": "=="}, {"input": "find_Nth_Digit(9, 8, 5)", "output": "0", "ops": "=="}, {"input": "find_Nth_Digit(8, 18, 5)", "output": "4", "ops": "=="}, {"input": "find_Nth_Digit(6, 1, 5)", "output": "0", "ops": "=="}, {"input": "find_Nth_Digit(7, 11, 10)", "output": "3", "ops": "=="}, {"input": "find_Nth_Digit(8, 10, 3)", "output": "0", "ops": "=="}, {"input": "find_Nth_Digit(1, 2, 6)", "output": "0", "ops": "=="}, {"input": "find_Nth_Digit(1, 32, 100)", "output": "0", "ops": "=="}, {"input": "find_Nth_Digit(15, 16, 17)", "output": "0", "ops": "=="}, {"input": "find_Nth_Digit(8, 93, 99)", "output": "5", "ops": "=="}], "115": [{"input": "tuple_to_int( (6, 7 , 8))", "output": "678", "ops": "=="}, {"input": "tuple_to_int( (7, 8, 10))", "output": "7810", "ops": "=="}], "184": [{"input": "parabola_focus(3, 4, 6)", "output": "(-0.6666666666666666, 4.75)", "ops": "=="}, {"input": "parabola_focus(3, 14, 12)", "output": "(-2.3333333333333335, -4.25)", "ops": "=="}, {"input": "parabola_focus(1, 48, 44)", "output": "(-24.0, -531.75)", "ops": "=="}, {"input": "parabola_focus(1, 1, 2)", "output": "(-0.5, 2.0)", "ops": "=="}, {"input": "parabola_focus(1, 0, 0)", "output": "(0.0, 0.25)", "ops": "=="}, {"input": "parabola_focus(5, 14, 9)", "output": "(-1.4, -0.75)", "ops": "=="}, {"input": "parabola_focus(9, 6, 4)", "output": "(-0.3333333333333333, 3.0277777777777777)", "ops": "=="}, {"input": "parabola_focus(13, 42, 30)", "output": "(-1.6153846153846154, -3.9038461538461537)", "ops": "=="}, {"input": "parabola_focus(1, 10, 50)", "output": "(-5.0, 25.25)", "ops": "=="}, {"input": "parabola_focus(3, 1, 100)", "output": "(-0.16666666666666666, 100.0)", "ops": "=="}, {"input": "parabola_focus(3, 5, 7)", "output": "(-0.8333333333333334, 5.0)", "ops": "=="}, {"input": "parabola_focus(8, 8, 3)", "output": "(-0.5, 1.03125)", "ops": "=="}, {"input": "parabola_focus(5, 5, 18)", "output": "(-0.5, 16.8)", "ops": "=="}, {"input": "parabola_focus(13, 2, 50)", "output": "(-0.07692307692307693, 49.94230769230769)", "ops": "=="}, {"input": "parabola_focus(18, 7, 3)", "output": "(-0.19444444444444445, 2.3333333333333335)", "ops": "=="}, {"input": "parabola_focus(8, 4, 6)", "output": "(-0.25, 5.53125)", "ops": "=="}, {"input": "parabola_focus(4, 5, 1)", "output": "(-0.625, -0.5)", "ops": "=="}, {"input": "parabola_focus(5, 4, 1)", "output": "(-0.4, 0.25)", "ops": "=="}], "234": [{"input": "even_bit_set_number(31)", "output": "31", "ops": "=="}, {"input": "even_bit_set_number(40000000)", "output": "48954026", "ops": "=="}, {"input": "even_bit_set_number(40000010)", "output": "48954026", "ops": "=="}, {"input": "even_bit_set_number(40000120)", "output": "48954106", "ops": "=="}, {"input": "even_bit_set_number(104857610)", "output": "116042410", "ops": "=="}, {"input": "even_bit_set_number(104857618)", "output": "116042426", "ops": "=="}, {"input": "even_bit_set_number(1073741823)", "output": "1073741823", "ops": "=="}, {"input": "even_bit_set_number(1073740113)", "output": "1073740795", "ops": "=="}, {"input": "even_bit_set_number(40)", "output": "42", "ops": "=="}, {"input": "even_bit_set_number(50)", "output": "58", "ops": "=="}, {"input": "even_bit_set_number(60)", "output": "62", "ops": "=="}, {"input": "even_bit_set_number(70)", "output": "110", "ops": "=="}, {"input": "even_bit_set_number(80)", "output": "122", "ops": "=="}, {"input": "even_bit_set_number(90)", "output": "122", "ops": "=="}, {"input": "even_bit_set_number(40)", "output": "42", "ops": "=="}, {"input": "even_bit_set_number(40)", "output": "42", "ops": "=="}, {"input": "even_bit_set_number(50)", "output": "58", "ops": "=="}, {"input": "even_bit_set_number(31)", "output": "31", "ops": "=="}, {"input": "even_bit_set_number(40)", "output": "42", "ops": "=="}, {"input": "even_bit_set_number(43)", "output": "43", "ops": "=="}, {"input": "even_bit_set_number(39)", "output": "47", "ops": "=="}, {"input": "even_bit_set_number(40)", "output": "42", "ops": "=="}], "372": [{"input": "volume_cuboid(100, 111, 122)", "output": "1354200", "ops": "=="}, {"input": "volume_cuboid(25, 32, 47)", "output": "37600", "ops": "=="}, {"input": "volume_cuboid(15, 20, 25)", "output": "7500", "ops": "=="}, {"input": "volume_cuboid(42, 42, 41)", "output": "72324", "ops": "=="}, {"input": "volume_cuboid(-6, -14, 30)", "output": "2520", "ops": "=="}, {"input": "volume_cuboid(100, 99, 90)", "output": "891000", "ops": "=="}, {"input": "volume_cuboid(50, 75, 1)", "output": "3750", "ops": "=="}, {"input": "volume_cuboid(15, 31, 73)", "output": "33945", "ops": "=="}, {"input": "volume_cuboid(25, 33, 41)", "output": "33825", "ops": "=="}, {"input": "volume_cuboid(25, 75, 101)", "output": "189375", "ops": "=="}, {"input": "volume_cuboid(15, 7, 9)", "output": "945", "ops": "=="}], "421": [{"input": "find_Average_Of_Cube(100)", "output": "255025.0", "ops": "=="}, {"input": "find_Average_Of_Cube(99)", "output": "247500.0", "ops": "=="}, {"input": "find_Average_Of_Cube(100)", "output": "255025.0", "ops": "=="}, {"input": "find_Average_Of_Cube(7)", "output": "112.0", "ops": "=="}, {"input": "find_Average_Of_Cube(8)", "output": "162.0", "ops": "=="}, {"input": "find_Average_Of_Cube(25)", "output": "4225.0", "ops": "=="}, {"input": "find_Average_Of_Cube(42)", "output": "19414.5", "ops": "=="}], "435": [{"input": "neg_nos([0, 5, 6, 4])", "output": "None", "ops": "=="}, {"input": "neg_nos([-7, -1, -13, -4])", "output": "-7", "ops": "=="}, {"input": "neg_nos([-12, 15, -24, -13])", "output": "-12", "ops": "=="}, {"input": "neg_nos((-2, 3, -3, -1, 5, 4, 7, 8, 9, -10))", "output": "-2", "ops": "=="}, {"input": "neg_nos([1])", "output": "None", "ops": "=="}, {"input": "neg_nos([-9, -8, -10, -5])", "output": "-9", "ops": "=="}, {"input": "neg_nos([-1, 1, 6, 1, -5])", "output": "-1", "ops": "=="}, {"input": "neg_nos([0])", "output": "None", "ops": "=="}, {"input": "neg_nos([-2])", "output": "-2", "ops": "=="}, {"input": "neg_nos([])", "output": "None", "ops": "=="}, {"input": "neg_nos([-16, 7, -12, 5, -11])", "output": "-16", "ops": "=="}, {"input": "neg_nos([-11, 4, 3, -8])", "output": "-11", "ops": "=="}, {"input": "neg_nos([33, 3, 12, -82])", "output": "-82", "ops": "=="}, {"input": "neg_nos([1.3, -4.1, -2.4, -22.9])", "output": "-4.1", "ops": "=="}, {"input": "neg_nos([30, -31, 1, -70, -65, 70])", "output": "-31", "ops": "=="}, {"input": "neg_nos([0, 1, 2])", "output": "None", "ops": "=="}], "202": [{"input": "hamming_Distance(5300, 100)", "output": "5", "ops": "=="}, {"input": "hamming_Distance(1000, 3)", "output": "8", "ops": "=="}, {"input": "hamming_Distance(800, 500)", "output": "5", "ops": "=="}, {"input": "hamming_Distance(920, 4)", "output": "6", "ops": "=="}, {"input": "hamming_Distance(812, 7)", "output": "6", "ops": "=="}, {"input": "hamming_Distance(10, 1000)", "output": "6", "ops": "=="}, {"input": "hamming_Distance(992, 17)", "output": "7", "ops": "=="}, {"input": "hamming_Distance(100, 6)", "output": "3", "ops": "=="}, {"input": "hamming_Distance(12345, 65432)", "output": "9", "ops": "=="}, {"input": "hamming_Distance(0, 0)", "output": "0", "ops": "=="}, {"input": "hamming_Distance(123455123, 734)", "output": "15", "ops": "=="}, {"input": "hamming_Distance(7, 8)", "output": "4", "ops": "=="}, {"input": "hamming_Distance(700, 479)", "output": "6", "ops": "=="}, {"input": "hamming_Distance(810, 479)", "output": "7", "ops": "=="}], "366": [{"input": "is_tree_balanced(root1.right.right)", "output": "True", "ops": "=="}], "243": [{"input": "next_Perfect_Square(12)", "output": "16", "ops": "=="}, {"input": "next_Perfect_Square(11)", "output": "16", "ops": "=="}, {"input": "next_Perfect_Square(44)", "output": "49", "ops": "=="}, {"input": "next_Perfect_Square(10)", "output": "16", "ops": "=="}, {"input": "next_Perfect_Square(13)", "output": "16", "ops": "=="}, {"input": "next_Perfect_Square(12)", "output": "16", "ops": "=="}, {"input": "next_Perfect_Square(2)", "output": "4", "ops": "=="}, {"input": "next_Perfect_Square(3)", "output": "4", "ops": "=="}, {"input": "next_Perfect_Square(21)", "output": "25", "ops": "=="}, {"input": "next_Perfect_Square(50)", "output": "64", "ops": "=="}, {"input": "next_Perfect_Square(37)", "output": "49", "ops": "=="}, {"input": "next_Perfect_Square(18)", "output": "25", "ops": "=="}], "265": [{"input": "lateralsurface_cube(11)", "output": "484", "ops": "=="}, {"input": "lateralsurface_cube(19)", "output": "1444", "ops": "=="}, {"input": "lateralsurface_cube(50)", "output": "10000", "ops": "=="}, {"input": "lateralsurface_cube(20)", "output": "1600", "ops": "=="}, {"input": "lateralsurface_cube(11)", "output": "484", "ops": "=="}, {"input": "lateralsurface_cube(20)", "output": "1600", "ops": "=="}, {"input": "lateralsurface_cube(100)", "output": "40000", "ops": "=="}, {"input": "lateralsurface_cube(11)", "output": "484", "ops": "=="}, {"input": "lateralsurface_cube(27)", "output": "2916", "ops": "=="}], "451": [{"input": "loss_amount(20000000000000000005, 100000000000000000006)", "output": "80000000000000000001", "ops": "=="}, {"input": "loss_amount(7500, 52500)", "output": "45000", "ops": "=="}, {"input": "loss_amount(7500, 7500) == False", "output": "False", "ops": "=="}, {"input": "loss_amount(20000, 3000)", "output": "None", "ops": "=="}, {"input": "loss_amount(15000, 30000)", "output": "15000", "ops": "=="}, {"input": "loss_amount(2000, 10000)", "output": "8000", "ops": "=="}, {"input": "loss_amount(2000, 4999)", "output": "2999", "ops": "=="}, {"input": "loss_amount(3000, 10000)", "output": "7000", "ops": "=="}, {"input": "loss_amount(1000, 50*30)", "output": "500", "ops": "=="}, {"input": "loss_amount(500, 5000)", "output": "4500", "ops": "=="}, {"input": "loss_amount(500, 10*12)", "output": "None", "ops": "=="}, {"input": "loss_amount(10000, 15000)", "output": "5000", "ops": "=="}, {"input": "loss_amount(1, 1000)", "output": "999", "ops": "=="}], "20": [{"input": "multiples_of_num(7, 5)", "output": "[5, 10, 15, 20, 25, 30, 35]", "ops": "=="}, {"input": "multiples_of_num(32, 16)", "output": "[16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 352, 368, 384, 400, 416, 432, 448, 464, 480, 496, 512]", "ops": "=="}, {"input": "multiples_of_num(51, 1)", "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]", "ops": "=="}, {"input": "multiples_of_num(12, 10)", "output": "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "ops": "=="}, {"input": "len(multiples_of_num(12, 25))", "output": "12", "ops": "=="}, {"input": "multiples_of_num(9, 3)", "output": "[3, 6, 9, 12, 15, 18, 21, 24, 27]", "ops": "=="}, {"input": "multiples_of_num(6, 2)", "output": "[2, 4, 6, 8, 10, 12]", "ops": "=="}, {"input": "multiples_of_num(3, 2)", "output": "[2, 4, 6]", "ops": "=="}, {"input": "multiples_of_num(5, 7)", "output": "[7, 14, 21, 28, 35]", "ops": "=="}, {"input": "multiples_of_num(11, 9)", "output": "[9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99]", "ops": "=="}, {"input": "multiples_of_num(0, 23)", "output": "[]", "ops": "=="}, {"input": "multiples_of_num(50, 2)", "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]", "ops": "=="}, {"input": "multiples_of_num(12, 1)", "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "ops": "=="}], "47": [{"input": "odd_bit_set_number(43)", "output": "63", "ops": "=="}, {"input": "odd_bit_set_number(52)", "output": "53", "ops": "=="}, {"input": "odd_bit_set_number(100)", "output": "117", "ops": "=="}, {"input": "odd_bit_set_number(40)", "output": "61", "ops": "=="}, {"input": "odd_bit_set_number(50)", "output": "55", "ops": "=="}, {"input": "odd_bit_set_number(51)", "output": "55", "ops": "=="}, {"input": "odd_bit_set_number(0)", "output": "0", "ops": "=="}, {"input": "odd_bit_set_number(2)", "output": "3", "ops": "=="}, {"input": "odd_bit_set_number(100)", "output": "117", "ops": "=="}, {"input": "odd_bit_set_number(40)", "output": "61", "ops": "=="}, {"input": "odd_bit_set_number(420)", "output": "501", "ops": "=="}, {"input": "odd_bit_set_number(1)", "output": "1", "ops": "=="}, {"input": "odd_bit_set_number(0)", "output": "0", "ops": "=="}, {"input": "odd_bit_set_number(-1)", "output": "-1", "ops": "=="}, {"input": "odd_bit_set_number(15)", "output": "15", "ops": "=="}, {"input": "odd_bit_set_number(40)", "output": "61", "ops": "=="}], "84": [{"input": "surfacearea_sphere(25)", "output": "7853.981633974483", "ops": "=="}, {"input": "surfacearea_sphere(30)", "output": "11309.733552923255", "ops": "=="}, {"input": "surfacearea_sphere(31)", "output": "12076.282160399165", "ops": "=="}, {"input": "surfacearea_sphere(100)", "output": "125663.70614359173", "ops": "=="}, {"input": "surfacearea_sphere(100)", "output": "125663.70614359173", "ops": "=="}, {"input": "surfacearea_sphere(100)", "output": "125663.70614359173", "ops": "=="}, {"input": "surfacearea_sphere(25)", "output": "7853.981633974483", "ops": "=="}, {"input": "surfacearea_sphere(30)", "output": "11309.733552923255", "ops": "=="}, {"input": "surfacearea_sphere(35)", "output": "15393.804002589986", "ops": "=="}, {"input": "surfacearea_sphere(300)", "output": "1130973.3552923256", "ops": "=="}, {"input": "surfacearea_sphere(35)", "output": "15393.804002589986", "ops": "=="}, {"input": "surfacearea_sphere(100)", "output": "125663.70614359173", "ops": "=="}, {"input": "surfacearea_sphere(25)", "output": "7853.981633974483", "ops": "=="}], "197": [{"input": "largest_triangle(9, 2)", "output": "52.61104327990465", "ops": "=="}, {"input": "largest_triangle(9 + 12, 5)", "output": "114.57516092068124", "ops": "=="}, {"input": "largest_triangle(11, 2)", "output": "78.59180539343781", "ops": "=="}, {"input": "largest_triangle(9, 14)", "output": "7.515863325700664", "ops": "=="}, {"input": "largest_triangle(7, 17)", "output": "3.744286304597426", "ops": "=="}, {"input": "largest_triangle(11, 11)", "output": "14.289419162443238", "ops": "=="}, {"input": "largest_triangle(100, 101)", "output": "128.61763422541168", "ops": "=="}, {"input": "largest_triangle(195, 99)", "output": "498.94872695308004", "ops": "=="}, {"input": "largest_triangle(6, 1)", "output": "46.76537180435969", "ops": "=="}, {"input": "largest_triangle(8, 6)", "output": "13.85640646055102", "ops": "=="}, {"input": "largest_triangle(-2, 15)", "output": "-1", "ops": "=="}, {"input": "largest_triangle(9, 2)", "output": "52.61104327990465", "ops": "=="}, {"input": "largest_triangle(5, 12)", "output": "2.7063293868263707", "ops": "=="}, {"input": "largest_triangle(10, 10)", "output": "12.99038105676658", "ops": "=="}, {"input": "largest_triangle(10, 18)", "output": "7.216878364870322", "ops": "=="}, {"input": "largest_triangle(1, 20)", "output": "0.0649519052838329", "ops": "=="}, {"input": "largest_triangle(5, 11)", "output": "2.9523593310833136", "ops": "=="}, {"input": "largest_triangle(20, 11)", "output": "47.23774929733302", "ops": "=="}, {"input": "largest_triangle(36, 15)", "output": "112.23689233046325", "ops": "=="}, {"input": "largest_triangle(1, 5)", "output": "0.2598076211353316", "ops": "=="}], "198": [{"input": "highest_Power_of_2(9)", "output": "8", "ops": "=="}, {"input": "highest_Power_of_2(5)", "output": "4", "ops": "=="}, {"input": "highest_Power_of_2(35)", "output": "32", "ops": "=="}, {"input": "highest_Power_of_2(31)", "output": "16", "ops": "=="}, {"input": "highest_Power_of_2(49) == 25", "output": "False", "ops": "=="}, {"input": "highest_Power_of_2(42)", "output": "32", "ops": "=="}, {"input": "highest_Power_of_2(9808)", "output": "8192", "ops": "=="}, {"input": "highest_Power_of_2(33)", "output": "32", "ops": "=="}, {"input": "highest_Power_of_2(3584)", "output": "2048", "ops": "=="}, {"input": "highest_Power_of_2(39049)", "output": "32768", "ops": "=="}, {"input": "highest_Power_of_2(37) == 3**19+1", "output": "False", "ops": "=="}, {"input": "highest_Power_of_2(9*19*32)", "output": "4096", "ops": "=="}], "201": [{"input": "remove_even(remove_even('computer'))", "output": "'cu'", "ops": "=="}, {"input": "remove_even('jojojo')", "output": "'jjj'", "ops": "=="}], "290": [{"input": "count_no_of_ways(5, 2)", "output": "16", "ops": "=="}, {"input": "count_no_of_ways(25, 35)", "output": "332405262", "ops": "=="}, {"input": "count_no_of_ways(3, 8)", "output": "504", "ops": "=="}, {"input": "count_no_of_ways(3, 5)", "output": "120", "ops": "=="}, {"input": "count_no_of_ways(2, 10)", "output": "100", "ops": "=="}, {"input": "count_no_of_ways(4, 5)", "output": "580", "ops": "=="}, {"input": "count_no_of_ways(5, 5)", "output": "2800", "ops": "=="}, {"input": "count_no_of_ways(5, 5)", "output": "2800", "ops": "=="}, {"input": "count_no_of_ways(3, 3)", "output": "24", "ops": "=="}, {"input": "count_no_of_ways(6, 2)", "output": "26", "ops": "=="}, {"input": "count_no_of_ways(6, 8)", "output": "247352", "ops": "=="}, {"input": "count_no_of_ways(11, 8)", "output": "551048911", "ops": "=="}, {"input": "count_no_of_ways(8, 2)", "output": "68", "ops": "=="}], "349": [{"input": "minimum_Length('hi')", "output": "1", "ops": "=="}, {"input": "minimum_Length(set())", "output": "0", "ops": "=="}, {"input": "minimum_Length([])", "output": "0", "ops": "=="}], "387": [{"input": "highest_Power_of_2(-100)", "output": "0", "ops": "=="}, {"input": "highest_Power_of_2(-1000)", "output": "0", "ops": "=="}, {"input": "highest_Power_of_2(50)", "output": "32", "ops": "=="}, {"input": "highest_Power_of_2(35)", "output": "32", "ops": "=="}, {"input": "highest_Power_of_2(36)", "output": "32", "ops": "=="}, {"input": "print(highest_Power_of_2(20))", "output": "None", "ops": "=="}, {"input": "highest_Power_of_2(50)", "output": "32", "ops": "=="}, {"input": "highest_Power_of_2(25)", "output": "16", "ops": "=="}, {"input": "highest_Power_of_2(64)", "output": "64", "ops": "=="}, {"input": "highest_Power_of_2(64)", "output": "64", "ops": "=="}, {"input": "highest_Power_of_2(1023)", "output": "512", "ops": "=="}, {"input": "highest_Power_of_2(49)", "output": "32", "ops": "=="}, {"input": "highest_Power_of_2(63)", "output": "32", "ops": "=="}, {"input": "highest_Power_of_2(70)", "output": "64", "ops": "=="}, {"input": "highest_Power_of_2(37)", "output": "32", "ops": "=="}, {"input": "highest_Power_of_2(-120)", "output": "0", "ops": "=="}, {"input": "highest_Power_of_2(-125)", "output": "0", "ops": "=="}, {"input": "highest_Power_of_2(-100)", "output": "0", "ops": "=="}, {"input": "highest_Power_of_2(-105)", "output": "0", "ops": "=="}, {"input": "highest_Power_of_2(300000000)", "output": "268435456", "ops": "=="}], "558": [{"input": "fibfib( 1)", "output": "0", "ops": "=="}, {"input": "fibfib(0)", "output": "0", "ops": "=="}], "57": [{"input": "opposite_Signs(-2, 2)", "output": "True", "ops": "=="}, {"input": "opposite_Signs(100, 1000)", "output": "False", "ops": "=="}, {"input": "opposite_Signs(-12, 12)", "output": "True", "ops": "=="}, {"input": "opposite_Signs(14, 14)", "output": "False", "ops": "=="}, {"input": "opposite_Signs(-10000, -1000)", "output": "False", "ops": "=="}, {"input": "opposite_Signs(200000, 10000)", "output": "False", "ops": "=="}, {"input": "opposite_Signs(3, -2)", "output": "True", "ops": "=="}, {"input": "opposite_Signs(2, 5)", "output": "False", "ops": "=="}, {"input": "opposite_Signs(5, 5)", "output": "False", "ops": "=="}, {"input": "opposite_Signs(5, -2)", "output": "True", "ops": "=="}, {"input": "opposite_Signs(-1, 1)", "output": "True", "ops": "=="}, {"input": "opposite_Signs(2, 3)", "output": "False", "ops": "=="}, {"input": "opposite_Signs(0, 1)", "output": "False", "ops": "=="}, {"input": "opposite_Signs(-1000000, 2000)", "output": "True", "ops": "=="}], "91": [{"input": "is_undulating('a')", "output": "False", "ops": "=="}, {"input": "is_undulating('abc1')", "output": "False", "ops": "=="}, {"input": "is_undulating('abcde')", "output": "False", "ops": "=="}, {"input": "is_undulating('')", "output": "False", "ops": "=="}, {"input": "is_undulating(['2', '2', '1', '2', '2', '0', '4'])", "output": "False", "ops": "=="}, {"input": "is_undulating('aaaax')", "output": "False", "ops": "=="}, {"input": "is_undulating('aaaaaaaaaaaaaaaaaa')", "output": "True", "ops": "=="}, {"input": "is_undulating('xxxxx')", "output": "True", "ops": "=="}, {"input": "is_undulating(['a', 1])", "output": "False", "ops": "=="}, {"input": "print(is_undulating)", "output": "None", "ops": "=="}, {"input": "is_undulating(\"  A  T  L   A    T A C C   A    T  O    A    L   U   \")", "output": "False", "ops": "=="}], "130": [{"input": "reverse_vowels(\"hey you?\")", "output": "'huy yoe?'", "ops": "=="}, {"input": "reverse_vowels([])", "output": "''", "ops": "=="}, {"input": "reverse_vowels(())", "output": "''", "ops": "=="}, {"input": "reverse_vowels(('a', 'b', 'c'))", "output": "'abc'", "ops": "=="}, {"input": "''.join(reverse_vowels('Ross, Robin, and Petersen, Marco'))", "output": "'Ross, Raben, end Petarsin, Morco'", "ops": "=="}, {"input": "reverse_vowels(str('a or b and c'))", "output": "'a or b and c'", "ops": "=="}], "170": [{"input": "perimeter_pentagon(20)", "output": "100", "ops": "=="}, {"input": "perimeter_pentagon(50)", "output": "250", "ops": "=="}, {"input": "perimeter_pentagon(18)", "output": "90", "ops": "=="}, {"input": "perimeter_pentagon(20)", "output": "100", "ops": "=="}, {"input": "perimeter_pentagon(45)", "output": "225", "ops": "=="}, {"input": "perimeter_pentagon(100)", "output": "500", "ops": "=="}, {"input": "perimeter_pentagon(26)", "output": "130", "ops": "=="}, {"input": "perimeter_pentagon(63)", "output": "315", "ops": "=="}, {"input": "perimeter_pentagon(20)", "output": "100", "ops": "=="}, {"input": "perimeter_pentagon(18)", "output": "90", "ops": "=="}, {"input": "perimeter_pentagon(17)", "output": "85", "ops": "=="}, {"input": "perimeter_pentagon(35)", "output": "175", "ops": "=="}, {"input": "perimeter_pentagon(20)", "output": "100", "ops": "=="}], "275": [{"input": "volume_cylinder(5, 10)", "output": "785.3750000000001", "ops": "=="}, {"input": "volume_cylinder(4,30)", "output": "1507.92", "ops": "=="}, {"input": "volume_cylinder(1, 15)", "output": "47.1225", "ops": "=="}, {"input": "volume_cylinder(4, 25)", "output": "1256.6000000000001", "ops": "=="}, {"input": "volume_cylinder(7, 10)", "output": "1539.335", "ops": "=="}, {"input": "volume_cylinder(4, 20)", "output": "1005.2800000000001", "ops": "=="}, {"input": "volume_cylinder(4, 1)", "output": "50.264", "ops": "=="}, {"input": "volume_cylinder(100, 100)", "output": "3141500.0000000005", "ops": "=="}, {"input": "volume_cylinder(8, 10)", "output": "2010.5600000000002", "ops": "=="}, {"input": "volume_cylinder(8, 8)", "output": "1608.448", "ops": "=="}, {"input": "volume_cylinder(30, 20)", "output": "56547.00000000001", "ops": "=="}, {"input": "volume_cylinder(10, 10)", "output": "3141.5000000000005", "ops": "=="}, {"input": "volume_cylinder(4, 50)", "output": "2513.2000000000003", "ops": "=="}, {"input": "volume_cylinder(40, 520)", "output": "2613728.0000000005", "ops": "=="}, {"input": "volume_cylinder(40, 500)", "output": "2513200.0000000005", "ops": "=="}, {"input": "volume_cylinder(100, 35)", "output": "1099525.0000000002", "ops": "=="}, {"input": "volume_cylinder(10, 30)", "output": "9424.500000000002", "ops": "=="}], "411": [{"input": "remove_odd([1, 10, 5, 1])", "output": "[10, 1]", "ops": "=="}, {"input": "remove_odd([1, 10, 5, 1, 2])", "output": "[10, 1, 2]", "ops": "=="}, {"input": "remove_odd([1, 2, 4])", "output": "[2, 4]", "ops": "=="}, {"input": "remove_odd([10, 20, 21, 3, 9, 7, 9])", "output": "[10, 20, 3, 7]", "ops": "=="}, {"input": "remove_odd([1, 3, 4])", "output": "[3, 4]", "ops": "=="}, {"input": "remove_odd([3, 4])", "output": "[4]", "ops": "=="}, {"input": "remove_odd([1, 2, 3, 4, 20, 1])", "output": "[2, 4, 20]", "ops": "=="}, {"input": "remove_odd([12, 15, 6])", "output": "[12, 6]", "ops": "=="}, {"input": "remove_odd([1, 2, 3, 4, 5, 7, 6, 8])", "output": "[2, 4, 7, 6, 8]", "ops": "=="}, {"input": "list(remove_odd([2, 3, 5]))", "output": "[2, 5]", "ops": "=="}, {"input": "remove_odd([0, 20, 1])", "output": "[0, 20]", "ops": "=="}, {"input": "remove_odd([2, 6, 3, 4, 9, 8, 5, 0, 20, 2, 9, 6, 5, 1, 10])", "output": "[2, 6, 4, 8, 0, 20, 2, 6, 1, 10]", "ops": "=="}, {"input": "remove_odd = [7, 11, 22, 30, 4, 118]", "output": "[7, 11, 22, 30, 4, 118]", "ops": "=="}], "533": [{"input": "unique([])", "output": "[]", "ops": "=="}, {"input": "unique(range(10))", "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "ops": "=="}, {"input": "unique([])", "output": "[]", "ops": "=="}, {"input": "unique([])", "output": "[]", "ops": "=="}, {"input": "unique([\"foo\"])", "output": "['foo']", "ops": "=="}, {"input": "unique([]) == []", "output": "True", "ops": "=="}, {"input": "unique([])", "output": "[]", "ops": "=="}, {"input": "unique([1, 2, 1, 5, 3, 3, 3, 5, 0])", "output": "[0, 1, 2, 3, 5]", "ops": "=="}, {"input": "unique([])", "output": "[]", "ops": "=="}, {"input": "unique([])", "output": "[]", "ops": "=="}, {"input": "unique(())", "output": "[]", "ops": "=="}], "52": [{"input": "check_Equality('ab cad') > check_Equality(' ')", "output": "True", "ops": "=="}], "8": [{"input": "find_Rotations([2,2,3,7,2,2])", "output": "6", "ops": "=="}, {"input": "find_Rotations(\"4\")", "output": "1", "ops": "=="}, {"input": "find_Rotations(\" 4\")", "output": "2", "ops": "=="}, {"input": "find_Rotations(\".4\")", "output": "2", "ops": "=="}, {"input": "find_Rotations(['ab', 'aa', 'bb'])", "output": "3", "ops": "=="}, {"input": "find_Rotations([1, 2, 0])", "output": "3", "ops": "=="}, {"input": "find_Rotations(u'aab')", "output": "3", "ops": "=="}, {"input": "find_Rotations((3,2,3,1,1,1,2,3,2,3,3,2-2))", "output": "12", "ops": "=="}, {"input": "find_Rotations(['ab','ab','ab','ba'])", "output": "4", "ops": "=="}, {"input": "find_Rotations(['aaa', 'bc'])", "output": "2", "ops": "=="}, {"input": "find_Rotations('a')", "output": "1", "ops": "=="}, {"input": "find_Rotations('z')", "output": "1", "ops": "=="}, {"input": "find_Rotations('m')", "output": "1", "ops": "=="}, {"input": "find_Rotations('M')", "output": "1", "ops": "=="}], "79": [{"input": "tetrahedral_number(24)", "output": "2600.0", "ops": "=="}, {"input": "tetrahedral_number(12)", "output": "364.0", "ops": "=="}, {"input": "tetrahedral_number(18)", "output": "1140.0", "ops": "=="}, {"input": "tetrahedral_number(9)", "output": "165.0", "ops": "=="}, {"input": "tetrahedral_number(12)", "output": "364.0", "ops": "=="}, {"input": "tetrahedral_number(1)", "output": "1.0", "ops": "=="}, {"input": "tetrahedral_number(8)", "output": "120.0", "ops": "=="}, {"input": "tetrahedral_number(3)", "output": "10.0", "ops": "=="}, {"input": "tetrahedral_number(1)", "output": "1.0", "ops": "=="}, {"input": "tetrahedral_number(0)", "output": "0.0", "ops": "=="}, {"input": "tetrahedral_number(8)", "output": "120.0", "ops": "=="}, {"input": "tetrahedral_number(9)", "output": "165.0", "ops": "=="}, {"input": "tetrahedral_number(15)", "output": "680.0", "ops": "=="}, {"input": "tetrahedral_number(18)", "output": "1140.0", "ops": "=="}, {"input": "tetrahedral_number(22)", "output": "2024.0", "ops": "=="}, {"input": "tetrahedral_number(8)", "output": "120.0", "ops": "=="}, {"input": "tetrahedral_number(8)", "output": "120.0", "ops": "=="}, {"input": "tetrahedral_number(8)", "output": "120.0", "ops": "=="}], "112": [{"input": "check_integer('p101')", "output": "False", "ops": "=="}, {"input": "check_integer('2j2')", "output": "False", "ops": "=="}, {"input": "check_integer('1awef')", "output": "False", "ops": "=="}, {"input": "check_integer('awe123')", "output": "False", "ops": "=="}, {"input": "check_integer('abc')", "output": "False", "ops": "=="}, {"input": "check_integer('astring')", "output": "False", "ops": "=="}, {"input": "check_integer('hello')", "output": "False", "ops": "=="}, {"input": "check_integer('1.5')", "output": "False", "ops": "=="}, {"input": "check_integer('a')", "output": "False", "ops": "=="}, {"input": "check_integer('10')", "output": "True", "ops": "=="}], "114": [{"input": "empty_dit({1: {}, 2: {}, 3: {}, 4: 4, 5: None})", "output": "False", "ops": "=="}, {"input": "empty_dit([1, 2])", "output": "False", "ops": "=="}, {"input": "empty_dit([[], [1], [1], [1], [], [1], [1], None, True])", "output": "False", "ops": "=="}, {"input": "empty_dit([{}, {}, [], 'hi', '', 'hi'])", "output": "False", "ops": "=="}, {"input": "empty_dit({3: 5})", "output": "False", "ops": "=="}, {"input": "empty_dit({0:0})", "output": "True", "ops": "=="}, {"input": "empty_dit({0: 1, 1: 1, 2: 1})", "output": "False", "ops": "=="}, {"input": "empty_dit([{}])", "output": "True", "ops": "=="}, {"input": "empty_dit({1: 2})", "output": "False", "ops": "=="}], "255": [{"input": "count_Primes_nums(1000)", "output": "168", "ops": "=="}, {"input": "count_Primes_nums(250)", "output": "53", "ops": "=="}, {"input": "count_Primes_nums(486)", "output": "92", "ops": "=="}, {"input": "count_Primes_nums(3000)", "output": "430", "ops": "=="}, {"input": "count_Primes_nums(1000)", "output": "168", "ops": "=="}, {"input": "count_Primes_nums(6000)", "output": "783", "ops": "=="}, {"input": "count_Primes_nums(1500)", "output": "239", "ops": "=="}, {"input": "count_Primes_nums(1000)", "output": "168", "ops": "=="}, {"input": "count_Primes_nums(10000)", "output": "1229", "ops": "=="}, {"input": "count_Primes_nums(500)", "output": "95", "ops": "=="}, {"input": "count_Primes_nums(1001)", "output": "168", "ops": "=="}, {"input": "count_Primes_nums(1000)", "output": "168", "ops": "=="}, {"input": "count_Primes_nums(3)", "output": "1", "ops": "=="}], "320": [{"input": "find_demlo(find_demlo('111100'))", "output": "'123456789101110987654321'", "ops": "=="}], "373": [{"input": "permute_string(\"\")", "output": "['']", "ops": "=="}], "436": [{"input": "remove_odd('testestestestestest')", "output": "'etsetsets'", "ops": "=="}, {"input": "remove_odd('zomg ahaaa!')", "output": "'ogaaa'", "ops": "=="}], "457": [{"input": "rectangle_area(8, 6)", "output": "48", "ops": "=="}, {"input": "'%.2f' % rectangle_area(13, 4)", "output": "'52.00'", "ops": "=="}, {"input": "rectangle_area(50, 100)", "output": "5000", "ops": "=="}, {"input": "rectangle_area(7, 2)", "output": "14", "ops": "=="}, {"input": "rectangle_area(3, 9)", "output": "27", "ops": "=="}, {"input": "rectangle_area(15, 1)", "output": "15", "ops": "=="}, {"input": "rectangle_area(12, 12)", "output": "144", "ops": "=="}, {"input": "rectangle_area(43, 43)", "output": "1849", "ops": "=="}, {"input": "rectangle_area(6, 3)", "output": "18", "ops": "=="}, {"input": "rectangle_area(20, 15)", "output": "300", "ops": "=="}, {"input": "rectangle_area(25, 50)", "output": "1250", "ops": "=="}], "32": [{"input": "decimal_To_Binary(99)", "output": "1100011", "ops": "=="}, {"input": "decimal_To_Binary(1000)", "output": "1111101000", "ops": "=="}, {"input": "decimal_To_Binary(1200000)", "output": "100100100111110000000", "ops": "=="}, {"input": "decimal_To_Binary(0)", "output": "0", "ops": "=="}, {"input": "decimal_To_Binary(11)", "output": "1011", "ops": "=="}, {"input": "decimal_To_Binary(30)", "output": "11110", "ops": "=="}, {"input": "decimal_To_Binary(40)", "output": "101000", "ops": "=="}, {"input": "decimal_To_Binary(500)", "output": "111110100", "ops": "=="}, {"input": "decimal_To_Binary(200)", "output": "11001000", "ops": "=="}, {"input": "decimal_To_Binary(19)", "output": "10011", "ops": "=="}, {"input": "decimal_To_Binary(30)", "output": "11110", "ops": "=="}, {"input": "decimal_To_Binary(3.125)", "output": "11.125", "ops": "=="}, {"input": "decimal_To_Binary(2.125)", "output": "10.125", "ops": "=="}, {"input": "decimal_To_Binary(6.0025)", "output": "110.0025", "ops": "=="}, {"input": "float(decimal_To_Binary(2.125e42))", "output": "1.1000011001001101e+140", "ops": "=="}, {"input": "decimal_To_Binary(1.1123)", "output": "1.1123", "ops": "=="}, {"input": "decimal_To_Binary(8)", "output": "1000", "ops": "=="}, {"input": "decimal_To_Binary(8)", "output": "1000", "ops": "=="}], "256": [{"input": "swap_numbers(300, 600)", "output": "(600, 300)", "ops": "=="}, {"input": "swap_numbers(400, 500)", "output": "(500, 400)", "ops": "=="}, {"input": "swap_numbers(1000, 2000)", "output": "(2000, 1000)", "ops": "=="}, {"input": "swap_numbers(100, -5)", "output": "(-5, 100)", "ops": "=="}, {"input": "swap_numbers(15, 300)", "output": "(300, 15)", "ops": "=="}, {"input": "swap_numbers(150000, 15000100)", "output": "(15000100, 150000)", "ops": "=="}, {"input": "swap_numbers(200, 100)", "output": "(100, 200)", "ops": "=="}, {"input": "swap_numbers(1000, 1000)", "output": "(1000, 1000)", "ops": "=="}, {"input": "swap_numbers(2000, 1900)", "output": "(1900, 2000)", "ops": "=="}, {"input": "swap_numbers(1, 19)", "output": "(19, 1)", "ops": "=="}, {"input": "swap_numbers(255, 10)", "output": "(10, 255)", "ops": "=="}], "312": [{"input": "pos_nos([0, 10, 5, 9])", "output": "0", "ops": "=="}, {"input": "pos_nos([])", "output": "None", "ops": "=="}, {"input": "pos_nos([1, -5])", "output": "1", "ops": "=="}, {"input": "pos_nos([5, -5])", "output": "5", "ops": "=="}, {"input": "pos_nos([-5, -6])", "output": "None", "ops": "=="}, {"input": "pos_nos([0])", "output": "0", "ops": "=="}, {"input": "pos_nos([1]) == pos_nos([1])", "output": "True", "ops": "=="}, {"input": "pos_nos([-3, 3]) is not None", "output": "True", "ops": "=="}, {"input": "pos_nos([2])", "output": "2", "ops": "=="}, {"input": "pos_nos([30, 0, 50, 60])", "output": "30", "ops": "=="}, {"input": "pos_nos([1])", "output": "1", "ops": "=="}, {"input": "pos_nos([2, 4, 3])", "output": "2", "ops": "=="}, {"input": "pos_nos([])", "output": "None", "ops": "=="}, {"input": "pos_nos([-3, 4, 7])", "output": "4", "ops": "=="}], "385": [{"input": "swap_count(' [  ]')", "output": "0", "ops": "=="}, {"input": "swap_count(r'\\]')", "output": "0", "ops": "=="}, {"input": "swap_count(r'\\n}')", "output": "0", "ops": "=="}, {"input": "swap_count(r'\\s+')", "output": "0", "ops": "=="}, {"input": "swap_count(r'  ')", "output": "0", "ops": "=="}, {"input": "swap_count([])", "output": "0", "ops": "=="}, {"input": "swap_count([[]])", "output": "0", "ops": "=="}, {"input": "swap_count('[[]]')", "output": "0", "ops": "=="}, {"input": "swap_count(r'foo\\b\\s*')", "output": "0", "ops": "=="}, {"input": "swap_count(',,, [[][][', )", "output": "0", "ops": "=="}, {"input": "swap_count(u\"\\u2119a\")", "output": "0", "ops": "=="}, {"input": "swap_count('')", "output": "0", "ops": "=="}], "433": [{"input": "text_match_one(u'b\\u0443\\u0437\\u044b\\u043d\\u0438\\u0446\\u0430')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_one('bac')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_one(\"\")", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_one(u'\\u65ab')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_one('acaacbaacedaecadcbabcbacdacadcabafacacc')", "output": "'Found a match!'", "ops": "=="}], "13": [{"input": "find_Volume(93, 2, 3)", "output": "279.0", "ops": "=="}, {"input": "find_Volume(100, 2, 3)", "output": "300.0", "ops": "=="}, {"input": "find_Volume(1, 0, 100)", "output": "0.0", "ops": "=="}, {"input": "find_Volume(7, 16, 16)", "output": "896.0", "ops": "=="}, {"input": "find_Volume(100, 3, 5)", "output": "750.0", "ops": "=="}, {"input": "find_Volume(3, 3, 5)", "output": "22.5", "ops": "=="}, {"input": "find_Volume(3, 10, 20)", "output": "300.0", "ops": "=="}, {"input": "find_Volume(3.34, 2,.32)", "output": "1.0688", "ops": "=="}, {"input": "find_Volume(3, 0, 2)", "output": "0.0", "ops": "=="}, {"input": "find_Volume(6, 5, 3)", "output": "45.0", "ops": "=="}, {"input": "find_Volume(2, 1, 1)", "output": "1.0", "ops": "=="}, {"input": "find_Volume(1, 3, 1)", "output": "1.5", "ops": "=="}, {"input": "find_Volume(20, 50, 90)", "output": "45000.0", "ops": "=="}, {"input": "find_Volume(40, 12, 22)", "output": "5280.0", "ops": "=="}, {"input": "find_Volume(4, 18, 52)", "output": "1872.0", "ops": "=="}, {"input": "find_Volume(7, 9, 4)", "output": "126.0", "ops": "=="}, {"input": "find_Volume(3, 4, 3)", "output": "18.0", "ops": "=="}], "31": [{"input": "max_Prime_Factors(18)", "output": "3", "ops": "=="}, {"input": "max_Prime_Factors(1)", "output": "-1", "ops": "=="}, {"input": "max_Prime_Factors(15000000)", "output": "5", "ops": "=="}, {"input": "max_Prime_Factors(126)", "output": "7", "ops": "=="}, {"input": "max_Prime_Factors(10)", "output": "5", "ops": "=="}, {"input": "max_Prime_Factors(1)", "output": "-1", "ops": "=="}, {"input": "max_Prime_Factors(7)", "output": "7", "ops": "=="}, {"input": "max_Prime_Factors(7)", "output": "7", "ops": "=="}, {"input": "max_Prime_Factors(1)", "output": "-1", "ops": "=="}, {"input": "max_Prime_Factors(3)", "output": "3", "ops": "=="}, {"input": "max_Prime_Factors(10)", "output": "5", "ops": "=="}, {"input": "max_Prime_Factors(14)", "output": "7", "ops": "=="}, {"input": "max_Prime_Factors(13)", "output": "13", "ops": "=="}, {"input": "max_Prime_Factors(25)", "output": "5", "ops": "=="}, {"input": "max_Prime_Factors(13)", "output": "13", "ops": "=="}, {"input": "max_Prime_Factors(30)", "output": "5", "ops": "=="}, {"input": "max_Prime_Factors(5)", "output": "5", "ops": "=="}, {"input": "max_Prime_Factors(21)", "output": "7", "ops": "=="}, {"input": "max_Prime_Factors(14)", "output": "7", "ops": "=="}, {"input": "max_Prime_Factors(36)", "output": "3", "ops": "=="}, {"input": "max_Prime_Factors(39)", "output": "13", "ops": "=="}], "98": [{"input": "decimal_to_binary(21)", "output": "'10101'", "ops": "=="}, {"input": "decimal_to_binary(17)", "output": "'10001'", "ops": "=="}, {"input": "decimal_to_binary(-6)", "output": "'-110'", "ops": "=="}, {"input": "decimal_to_binary(3)", "output": "'11'", "ops": "=="}, {"input": "decimal_to_binary(9)", "output": "'1001'", "ops": "=="}, {"input": "decimal_to_binary(3)", "output": "'11'", "ops": "=="}, {"input": "decimal_to_binary(1)", "output": "'1'", "ops": "=="}, {"input": "decimal_to_binary(16)", "output": "'10000'", "ops": "=="}, {"input": "decimal_to_binary(277)", "output": "'100010101'", "ops": "=="}, {"input": "decimal_to_binary(2)", "output": "'10'", "ops": "=="}, {"input": "decimal_to_binary(12)", "output": "'1100'", "ops": "=="}, {"input": "decimal_to_binary(20)", "output": "'10100'", "ops": "=="}, {"input": "decimal_to_binary(5)", "output": "'101'", "ops": "=="}, {"input": "decimal_to_binary(1)", "output": "'1'", "ops": "=="}, {"input": "decimal_to_binary(10)", "output": "'1010'", "ops": "=="}, {"input": "decimal_to_binary(42)", "output": "'101010'", "ops": "=="}, {"input": "decimal_to_binary(12345)", "output": "'11000000111001'", "ops": "=="}, {"input": "decimal_to_binary(10000000)", "output": "'100110001001011010000000'", "ops": "=="}, {"input": "decimal_to_binary(454321)", "output": "'1101110111010110001'", "ops": "=="}, {"input": "decimal_to_binary(188480)", "output": "'101110000001000000'", "ops": "=="}, {"input": "decimal_to_binary(24)", "output": "'11000'", "ops": "=="}], "217": [{"input": "min_Operations(0, 11)", "output": "0", "ops": "=="}, {"input": "min_Operations(1, 3)", "output": "2", "ops": "=="}, {"input": "min_Operations(1, 8)", "output": "7", "ops": "=="}, {"input": "min_Operations(2, 5)", "output": "4", "ops": "=="}, {"input": "min_Operations(1, 2)", "output": "1", "ops": "=="}, {"input": "min_Operations(3, 6)", "output": "1", "ops": "=="}, {"input": "min_Operations(4, 4)", "output": "0", "ops": "=="}, {"input": "min_Operations(8, 24)", "output": "2", "ops": "=="}, {"input": "min_Operations(4, 4)", "output": "0", "ops": "=="}], "406": [{"input": "rearrange_bigger(4)", "output": "False", "ops": "=="}, {"input": "rearrange_bigger(100)", "output": "False", "ops": "=="}, {"input": "rearrange_bigger(107)", "output": "170", "ops": "=="}, {"input": "rearrange_bigger(103)", "output": "130", "ops": "=="}, {"input": "rearrange_bigger(101)", "output": "110", "ops": "=="}, {"input": "rearrange_bigger(2)", "output": "False", "ops": "=="}, {"input": "rearrange_bigger(0)", "output": "False", "ops": "=="}, {"input": "rearrange_bigger(13)", "output": "31", "ops": "=="}, {"input": "rearrange_bigger(130400)", "output": "134000", "ops": "=="}, {"input": "rearrange_bigger(53)", "output": "False", "ops": "=="}, {"input": "rearrange_bigger(1099)", "output": "1909", "ops": "=="}, {"input": "rearrange_bigger(0)", "output": "False", "ops": "=="}, {"input": "rearrange_bigger(500)", "output": "False", "ops": "=="}, {"input": "rearrange_bigger(20000000)", "output": "False", "ops": "=="}, {"input": "rearrange_bigger(123)", "output": "132", "ops": "=="}], "625": [{"input": "tri(10)", "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0]", "ops": "=="}, {"input": "tri(13)", "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0]", "ops": "=="}, {"input": "tri(27)", "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0, 143.0, 12.0, 168.0, 13.0, 195.0, 14.0, 224.0]", "ops": "=="}, {"input": "tri(15)", "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0]", "ops": "=="}, {"input": "tri(15)", "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0]", "ops": "=="}, {"input": "tri(16)", "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0]", "ops": "=="}], "193": [{"input": "octal_To_Decimal(45)", "output": "37", "ops": "=="}, {"input": "octal_To_Decimal(47)", "output": "39", "ops": "=="}, {"input": "octal_To_Decimal(49)", "output": "41", "ops": "=="}, {"input": "octal_To_Decimal(50)", "output": "40", "ops": "=="}, {"input": "octal_To_Decimal(500)", "output": "320", "ops": "=="}, {"input": "octal_To_Decimal(799999999999999)", "output": "36440956806289", "ops": "=="}, {"input": "octal_To_Decimal(-10000)", "output": "36864", "ops": "=="}, {"input": "octal_To_Decimal(46)", "output": "38", "ops": "=="}, {"input": "octal_To_Decimal(50)", "output": "40", "ops": "=="}, {"input": "octal_To_Decimal(99)", "output": "81", "ops": "=="}, {"input": "octal_To_Decimal(63)", "output": "51", "ops": "=="}, {"input": "octal_To_Decimal(50)", "output": "40", "ops": "=="}, {"input": "octal_To_Decimal(60)", "output": "48", "ops": "=="}, {"input": "octal_To_Decimal(70)", "output": "56", "ops": "=="}, {"input": "octal_To_Decimal(85)", "output": "69", "ops": "=="}, {"input": "octal_To_Decimal(10)", "output": "8", "ops": "=="}], "207": [{"input": "is_decimal('02.0132')", "output": "False", "ops": "=="}, {"input": "is_decimal(\"'0.1'\")", "output": "False", "ops": "=="}, {"input": "is_decimal('')", "output": "False", "ops": "=="}, {"input": "is_decimal('1123.5671')", "output": "False", "ops": "=="}], "235": [{"input": "No_of_Triangle(3,3)", "output": "2", "ops": "=="}, {"input": "No_of_Triangle(7, 12)", "output": "-1", "ops": "=="}, {"input": "No_of_Triangle(23, 0)", "output": "600", "ops": "=="}, {"input": "No_of_Triangle(20, 3)", "output": "291", "ops": "=="}, {"input": "No_of_Triangle(3,3)", "output": "2", "ops": "=="}, {"input": "No_of_Triangle(20, 14)", "output": "49", "ops": "=="}, {"input": "No_of_Triangle(6, 2)", "output": "21", "ops": "=="}, {"input": "No_of_Triangle(9, 2)", "output": "57", "ops": "=="}, {"input": "No_of_Triangle(4, 4)", "output": "4", "ops": "=="}, {"input": "No_of_Triangle(9, 9)", "output": "29", "ops": "=="}], "203": [{"input": "count('mnmm0pm','m')", "output": "4", "ops": "=="}, {"input": "count('mnmm0pm','m')", "output": "4", "ops": "=="}, {"input": "count([1, 2, 3, 4, 1, 2, 3, 4], 1)", "output": "2", "ops": "=="}, {"input": "count('mnmm0pm','m')", "output": "4", "ops": "=="}, {"input": "count('mnmm0pm','m')", "output": "4", "ops": "=="}, {"input": "count(['aaaaaaaac', 'bbmcmcc0', 'cadebtfokq'], 'a')", "output": "0", "ops": "=="}, {"input": "count('mnmm0pm','m')", "output": "4", "ops": "=="}, {"input": "count('mnmm0pm','m')", "output": "4", "ops": "=="}, {"input": "count('mnmm0pm','m')", "output": "4", "ops": "=="}, {"input": "count(r'[0-3][1-9][5-7][a-d][d-o][0-2]\\w', 'a')", "output": "1", "ops": "=="}, {"input": "count('mnmm0pm','m')", "output": "4", "ops": "=="}, {"input": "count('mnmm0pm','m')", "output": "4", "ops": "=="}, {"input": "count('mnmm0pm','m')", "output": "4", "ops": "=="}], "364": [{"input": "count_Digit(78945610012)", "output": "11", "ops": "=="}, {"input": "count_Digit(41234567890)", "output": "11", "ops": "=="}, {"input": "count_Digit(412345678900)", "output": "12", "ops": "=="}, {"input": "count_Digit(111110000)", "output": "9", "ops": "=="}, {"input": "count_Digit(123)", "output": "3", "ops": "=="}, {"input": "count_Digit(9112324)", "output": "7", "ops": "=="}, {"input": "count_Digit(22123122)", "output": "8", "ops": "=="}, {"input": "count_Digit(34563456789)", "output": "11", "ops": "=="}, {"input": "count_Digit(34512340)", "output": "8", "ops": "=="}, {"input": "count_Digit(3)", "output": "1", "ops": "=="}, {"input": "count_Digit(5000000)", "output": "7", "ops": "=="}, {"input": "count_Digit(522396910)", "output": "9", "ops": "=="}, {"input": "count_Digit(11223353)", "output": "8", "ops": "=="}, {"input": "count_Digit(99)", "output": "2", "ops": "=="}], "460": [{"input": "upper_ctr('C')", "output": "1", "ops": "=="}, {"input": "upper_ctr(\"\"\"the program\"\"\")", "output": "0", "ops": "=="}, {"input": "upper_ctr('JAVA is pretty simple language that has a clear goal to be fast and light, so it supports JAVA')", "output": "1", "ops": "=="}, {"input": "upper_ctr('python')", "output": "0", "ops": "=="}, {"input": "upper_ctr('BIGData')", "output": "1", "ops": "=="}, {"input": "upper_ctr(' program ')", "output": "0", "ops": "=="}, {"input": "upper_ctr('C')", "output": "1", "ops": "=="}, {"input": "upper_ctr(\" python\")", "output": "0", "ops": "=="}], "466": [{"input": "decimal_to_Octal(534254)", "output": "2023356", "ops": "=="}, {"input": "decimal_to_Octal(27)", "output": "33", "ops": "=="}, {"input": "decimal_to_Octal(41)", "output": "51", "ops": "=="}, {"input": "decimal_to_Octal(256)", "output": "400", "ops": "=="}, {"input": "decimal_to_Octal(1000)", "output": "1750", "ops": "=="}, {"input": "decimal_to_Octal(3000)", "output": "5670", "ops": "=="}, {"input": "decimal_to_Octal(10*4)", "output": "50", "ops": "=="}, {"input": "decimal_to_Octal(12340)", "output": "30064", "ops": "=="}, {"input": "decimal_to_Octal(122)", "output": "172", "ops": "=="}, {"input": "decimal_to_Octal(300)", "output": "454", "ops": "=="}, {"input": "decimal_to_Octal(66)", "output": "102", "ops": "=="}, {"input": "decimal_to_Octal(37)", "output": "45", "ops": "=="}, {"input": "decimal_to_Octal(35899353098541)", "output": "1012317014064455", "ops": "=="}, {"input": "decimal_to_Octal(3444334723)", "output": "31523060203", "ops": "=="}], "556": [{"input": "sum_to_n(1024)", "output": "524800", "ops": "=="}, {"input": "sum_to_n(50)", "output": "1275", "ops": "=="}, {"input": "sum_to_n(200)", "output": "20100", "ops": "=="}, {"input": "sum_to_n(5000)", "output": "12502500", "ops": "=="}, {"input": "sum_to_n(1000)", "output": "500500", "ops": "=="}, {"input": "sum_to_n(2000000)", "output": "2000001000000", "ops": "=="}, {"input": "sum_to_n(0)", "output": "0", "ops": "=="}, {"input": "sum_to_n(-1)", "output": "0", "ops": "=="}, {"input": "sum_to_n(101)", "output": "5151", "ops": "=="}, {"input": "sum_to_n(500)", "output": "125250", "ops": "=="}, {"input": "sum_to_n(500)", "output": "125250", "ops": "=="}, {"input": "sum_to_n(250)", "output": "31375", "ops": "=="}, {"input": "sum_to_n(500)", "output": "125250", "ops": "=="}, {"input": "sum_to_n(-20)", "output": "0", "ops": "=="}, {"input": "sum_to_n(10000000)", "output": "50000005000000", "ops": "=="}, {"input": "sum_to_n(10**8)", "output": "5000000050000000", "ops": "=="}], "16": [{"input": "square_perimeter(3)", "output": "12", "ops": "=="}, {"input": "square_perimeter(3)", "output": "12", "ops": "=="}, {"input": "square_perimeter(7)", "output": "28", "ops": "=="}, {"input": "square_perimeter(3)", "output": "12", "ops": "=="}, {"input": "square_perimeter(0)", "output": "0", "ops": "=="}, {"input": "square_perimeter(square_perimeter(5)-4+3)", "output": "76", "ops": "=="}, {"input": "square_perimeter(6)", "output": "24", "ops": "=="}, {"input": "square_perimeter(2)", "output": "8", "ops": "=="}, {"input": "square_perimeter(1000)", "output": "4000", "ops": "=="}, {"input": "square_perimeter(600)", "output": "2400", "ops": "=="}, {"input": "square_perimeter(8)", "output": "32", "ops": "=="}, {"input": "square_perimeter(6)", "output": "24", "ops": "=="}, {"input": "square_perimeter(20)", "output": "80", "ops": "=="}, {"input": "square_perimeter(12)", "output": "48", "ops": "=="}], "278": [{"input": "is_num_decagonal(1313131)", "output": "6897248153251", "ops": "=="}, {"input": "is_num_decagonal(13547)", "output": "734044195", "ops": "=="}, {"input": "is_num_decagonal(11)", "output": "451", "ops": "=="}, {"input": "is_num_decagonal(20)", "output": "1540", "ops": "=="}, {"input": "is_num_decagonal(12)", "output": "540", "ops": "=="}, {"input": "is_num_decagonal(183)", "output": "133407", "ops": "=="}, {"input": "is_num_decagonal(1201931)", "output": "5778548909251", "ops": "=="}, {"input": "is_num_decagonal(1000)", "output": "3997000", "ops": "=="}, {"input": "is_num_decagonal(36)", "output": "5076", "ops": "=="}, {"input": "is_num_decagonal(15)", "output": "855", "ops": "=="}, {"input": "is_num_decagonal(13)", "output": "637", "ops": "=="}, {"input": "is_num_decagonal(13)", "output": "637", "ops": "=="}], "386": [{"input": "even_or_odd(['CC','DE',['AB']]),['CC', 'DE', ['AB']]", "output": "('Odd', ['CC', 'DE', ['AB']])", "ops": "=="}, {"input": "len(even_or_odd('AB3454D'))", "output": "3", "ops": "=="}, {"input": "even_or_odd([4, None, 'hello', True, 413])", "output": "'Odd'", "ops": "=="}], "401": [{"input": "ncr_modp(23, 16, 6)", "output": "3", "ops": "=="}, {"input": "ncr_modp(29, 5, 1)", "output": "0", "ops": "=="}, {"input": "ncr_modp(49, 31, 107)", "output": "68", "ops": "=="}, {"input": "ncr_modp(34, 1, 681)", "output": "34", "ops": "=="}, {"input": "ncr_modp(25, 50, 32)", "output": "0", "ops": "=="}, {"input": "ncr_modp(49, 23, 5)", "output": "4", "ops": "=="}, {"input": "ncr_modp(29, 12, 61)", "output": "2", "ops": "=="}, {"input": "ncr_modp(19, 8, 49)", "output": "24", "ops": "=="}, {"input": "ncr_modp(29, 51, 579)", "output": "0", "ops": "=="}, {"input": "ncr_modp(15, 12, 27)", "output": "23", "ops": "=="}, {"input": "ncr_modp(9, 5, 5)", "output": "1", "ops": "=="}, {"input": "ncr_modp(1, 0, 0)", "output": "1", "ops": "=="}, {"input": "ncr_modp(2, 9, 8)", "output": "0", "ops": "=="}, {"input": "ncr_modp(12, 3, 13)", "output": "12", "ops": "=="}, {"input": "ncr_modp(1, 23, 1)", "output": "0", "ops": "=="}], "440": [{"input": "surfacearea_cube(100)", "output": "60000", "ops": "=="}, {"input": "surfacearea_cube(18)", "output": "1944", "ops": "=="}, {"input": "surfacearea_cube(15)", "output": "1350", "ops": "=="}, {"input": "surfacearea_cube(6)", "output": "216", "ops": "=="}, {"input": "surfacearea_cube(100)", "output": "60000", "ops": "=="}, {"input": "surfacearea_cube(0)", "output": "0", "ops": "=="}, {"input": "surfacearea_cube(9)", "output": "486", "ops": "=="}, {"input": "surfacearea_cube(35)", "output": "7350", "ops": "=="}, {"input": "surfacearea_cube(19)", "output": "2166", "ops": "=="}, {"input": "surfacearea_cube(100)", "output": "60000", "ops": "=="}, {"input": "surfacearea_cube(100)", "output": "60000", "ops": "=="}], "475": [{"input": "big_sum((0, 10, 12, 18, 12))", "output": "18", "ops": "=="}, {"input": "big_sum([0, 0, 1])", "output": "1", "ops": "=="}, {"input": "big_sum([0] * 30)", "output": "0", "ops": "=="}, {"input": "big_sum(range(0, 105, 8))", "output": "104", "ops": "=="}, {"input": "big_sum([1])", "output": "2", "ops": "=="}, {"input": "big_sum([0]) + (-2)", "output": "-2", "ops": "=="}, {"input": "big_sum(range(50000000))", "output": "49999999", "ops": "=="}], "543": [{"input": "triangle_area(200, 200)", "output": "20000.0", "ops": "=="}, {"input": "triangle_area(2.5, 3)", "output": "3.75", "ops": "=="}, {"input": "triangle_area(50, 3)", "output": "75.0", "ops": "=="}, {"input": "triangle_area(15, 10)", "output": "75.0", "ops": "=="}, {"input": "triangle_area(101, 108)", "output": "5454.0", "ops": "=="}, {"input": "triangle_area(0.7, 3)", "output": "1.0499999999999998", "ops": "=="}, {"input": "triangle_area(0.6, 2.3)", "output": "0.69", "ops": "=="}, {"input": "triangle_area(1.1, 9.9)", "output": "5.445", "ops": "=="}, {"input": "triangle_area(100, 10)", "output": "500.0", "ops": "=="}, {"input": "triangle_area(100, 90)", "output": "4500.0", "ops": "=="}, {"input": "triangle_area(0, 14)", "output": "0.0", "ops": "=="}, {"input": "triangle_area(30, 18)", "output": "270.0", "ops": "=="}, {"input": "triangle_area(5, 30)", "output": "75.0", "ops": "=="}, {"input": "triangle_area(5, 5.2)", "output": "13.0", "ops": "=="}, {"input": "triangle_area(9, 8)", "output": "36.0", "ops": "=="}, {"input": "triangle_area(7, 6)", "output": "21.0", "ops": "=="}, {"input": "triangle_area(10.1, 10)", "output": "50.5", "ops": "=="}, {"input": "triangle_area(-3, 1.2)", "output": "-1.7999999999999998", "ops": "=="}, {"input": "triangle_area(-0.5, 0)", "output": "-0.0", "ops": "=="}], "75": [{"input": "count_Squares(9, 9)", "output": "285.0", "ops": "=="}, {"input": "count_Squares(11, 100)", "output": "6380.0", "ops": "=="}, {"input": "count_Squares(42, 111)", "output": "87892.0", "ops": "=="}, {"input": "count_Squares(100, 1000)", "output": "4883350.0", "ops": "=="}, {"input": "count_Squares(250, 1206)", "output": "35234125.0", "ops": "=="}, {"input": "count_Squares(9, 4)", "output": "80.0", "ops": "=="}, {"input": "count_Squares(200, 100)", "output": "843350.0", "ops": "=="}, {"input": "(5**4 + 3**(17*2))*(4**2 - 4) - count_Squares(9, 10)", "output": "2.00126180396006e+17", "ops": "=="}, {"input": "count_Squares(7, 20)", "output": "504.0", "ops": "=="}, {"input": "count_Squares(6, 10)", "output": "175.0", "ops": "=="}, {"input": "count_Squares(7, 6)", "output": "112.0", "ops": "=="}], "126": [{"input": "multiply_int(7, 0)", "output": "0", "ops": "=="}, {"input": "multiply_int(2, 1)", "output": "2", "ops": "=="}, {"input": "multiply_int(10, 0)", "output": "0", "ops": "=="}], "211": [{"input": "fourth_Power_Sum(32)", "output": "7246096", "ops": "=="}, {"input": "fourth_Power_Sum(8)", "output": "8772", "ops": "=="}, {"input": "fourth_Power_Sum(10)", "output": "25333", "ops": "=="}, {"input": "fourth_Power_Sum(8) - 323", "output": "8449", "ops": "=="}, {"input": "fourth_Power_Sum(8)", "output": "8772", "ops": "=="}, {"input": "fourth_Power_Sum(20)", "output": "722666", "ops": "=="}, {"input": "fourth_Power_Sum(32)", "output": "7246096", "ops": "=="}, {"input": "fourth_Power_Sum(8)", "output": "8772", "ops": "=="}, {"input": "fourth_Power_Sum(8)", "output": "8772", "ops": "=="}, {"input": "fourth_Power_Sum(8)", "output": "8772", "ops": "=="}, {"input": "fourth_Power_Sum(8)", "output": "8772", "ops": "=="}], "299": [{"input": "count_binary_seq(15)", "output": "155117520.0", "ops": "=="}, {"input": "count_binary_seq(1000)", "output": "inf", "ops": "=="}, {"input": "count_binary_seq(10)", "output": "184756.0", "ops": "=="}, {"input": "count_binary_seq(100)", "output": "9.054851465610324e+58", "ops": "=="}, {"input": "count_binary_seq(255)", "output": "1.1836951625016716e+152", "ops": "=="}, {"input": "count_binary_seq(10)", "output": "184756.0", "ops": "=="}, {"input": "count_binary_seq(9)", "output": "48620.0", "ops": "=="}, {"input": "count_binary_seq(999)", "output": "inf", "ops": "=="}, {"input": "count_binary_seq(8)", "output": "12870.0", "ops": "=="}, {"input": "count_binary_seq(7)", "output": "3432.0", "ops": "=="}, {"input": "count_binary_seq(6)", "output": "924.0", "ops": "=="}], "330": [{"input": "count_unset_bits(128)", "output": "7", "ops": "=="}, {"input": "count_unset_bits(8)", "output": "3", "ops": "=="}, {"input": "count_unset_bits(8)", "output": "3", "ops": "=="}, {"input": "count_unset_bits(0)", "output": "0", "ops": "=="}, {"input": "count_unset_bits(20)", "output": "3", "ops": "=="}, {"input": "count_unset_bits(22)", "output": "2", "ops": "=="}, {"input": "count_unset_bits(12)", "output": "2", "ops": "=="}, {"input": "count_unset_bits(36) == 7", "output": "False", "ops": "=="}, {"input": "count_unset_bits(16)", "output": "4", "ops": "=="}, {"input": "count_unset_bits(28)", "output": "2", "ops": "=="}, {"input": "count_unset_bits(8)", "output": "3", "ops": "=="}, {"input": "count_unset_bits(0x10)", "output": "4", "ops": "=="}, {"input": "count_unset_bits(8)", "output": "3", "ops": "=="}, {"input": "count_unset_bits(10)", "output": "2", "ops": "=="}, {"input": "count_unset_bits.__repr__()", "output": "'<function count_unset_bits at 0x1535a7ebca60>'", "ops": "=="}], "346": [{"input": "count_Squares(8, 3)", "output": "24", "ops": "=="}, {"input": "count_Squares(7, 8)", "output": "168", "ops": "=="}, {"input": "count_Squares(6, 5)", "output": "70", "ops": "=="}, {"input": "count_Squares(100, 200)", "output": "676700", "ops": "=="}, {"input": "count_Squares(11, 111)", "output": "-159544", "ops": "=="}, {"input": "count_Squares(15, 25)", "output": "2275", "ops": "=="}, {"input": "count_Squares(9, 2)", "output": "-30", "ops": "=="}, {"input": "count_Squares(5, 5)", "output": "55", "ops": "=="}, {"input": "count_Squares(12, 2)", "output": "-130", "ops": "=="}, {"input": "count_Squares(22, 11)", "output": "1012", "ops": "=="}], "354": [{"input": "count_Rectangles(12)", "output": "424", "ops": "=="}, {"input": "count_Rectangles(-1)", "output": "0", "ops": "=="}, {"input": "count_Rectangles(-2)", "output": "0", "ops": "=="}, {"input": "count_Rectangles(10)", "output": "294", "ops": "=="}, {"input": "count_Rectangles(-22)", "output": "0", "ops": "=="}, {"input": "count_Rectangles(22)", "output": "1475", "ops": "=="}, {"input": "count_Rectangles(-1)", "output": "0", "ops": "=="}, {"input": "count_Rectangles(-2)", "output": "0", "ops": "=="}, {"input": "count_Rectangles(3)", "output": "22", "ops": "=="}, {"input": "count_Rectangles(-4)", "output": "0", "ops": "=="}, {"input": "count_Rectangles(10)", "output": "294", "ops": "=="}, {"input": "count_Rectangles(10)", "output": "294", "ops": "=="}, {"input": "count_Rectangles(5)", "output": "69", "ops": "=="}, {"input": "count_Rectangles(16)", "output": "770", "ops": "=="}, {"input": "count_Rectangles(4)", "output": "41", "ops": "=="}, {"input": "count_Rectangles(17)", "output": "872", "ops": "=="}], "498": [{"input": "diameter_circle(35)", "output": "70", "ops": "=="}, {"input": "diameter_circle(20)", "output": "40", "ops": "=="}, {"input": "diameter_circle(30)", "output": "60", "ops": "=="}, {"input": "diameter_circle(11)", "output": "22", "ops": "=="}, {"input": "diameter_circle(30)", "output": "60", "ops": "=="}, {"input": "diameter_circle(50)", "output": "100", "ops": "=="}, {"input": "diameter_circle(1920)", "output": "3840", "ops": "=="}, {"input": "diameter_circle(100)", "output": "200", "ops": "=="}, {"input": "diameter_circle(80)", "output": "160", "ops": "=="}, {"input": "diameter_circle(25)", "output": "50", "ops": "=="}, {"input": "diameter_circle(20)", "output": "40", "ops": "=="}], "513": [{"input": "all_prefixes(r'\\\\?\\path'[1:5] + '...')", "output": "['\\\\', '\\\\?', '\\\\?\\\\', '\\\\?\\\\p', '\\\\?\\\\p.', '\\\\?\\\\p..', '\\\\?\\\\p...']", "ops": "=="}, {"input": "all_prefixes('asdf,qwer')", "output": "['a', 'as', 'asd', 'asdf', 'asdf,', 'asdf,q', 'asdf,qw', 'asdf,qwe', 'asdf,qwer']", "ops": "=="}, {"input": "all_prefixes(['a', 'b', 'c', 'd'])", "output": "[['a'], ['a', 'b'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd']]", "ops": "=="}, {"input": "all_prefixes(u'\ud83d\udc3b\ud83d\udc31\ud83d\udc3e \ud83e\udd16')", "output": "['\ud83d\udc3b', '\ud83d\udc3b\ud83d\udc31', '\ud83d\udc3b\ud83d\udc31\ud83d\udc3e', '\ud83d\udc3b\ud83d\udc31\ud83d\udc3e ', '\ud83d\udc3b\ud83d\udc31\ud83d\udc3e \ud83e\udd16']", "ops": "=="}, {"input": "all_prefixes(b'aaabbbs')", "output": "[b'a', b'aa', b'aaa', b'aaab', b'aaabb', b'aaabbb', b'aaabbbs']", "ops": "=="}], "78": [{"input": "word_len(u'\u00bfQu\u00e9bk?OCaml!Caml?')", "output": "False", "ops": "=="}, {"input": "word_len('\\\\21ooops')", "output": "False", "ops": "=="}, {"input": "word_len(\"\")", "output": "False", "ops": "=="}, {"input": "word_len(\"This is a string of words.\")", "output": "False", "ops": "=="}, {"input": "word_len(u'\u092a\u094d\u0930\u0915\u0937\u094d\u091f')", "output": "True", "ops": "=="}], "311": [{"input": "volume_cone(31, 9)", "output": "9057.211620299373", "ops": "=="}, {"input": "volume_cone(42, 44)", "output": "81279.28513367513", "ops": "=="}, {"input": "volume_cone(35, 21)", "output": "26939.15700453247", "ops": "=="}, {"input": "volume_cone(57, 33)", "output": "112277.37984664562", "ops": "=="}, {"input": "volume_cone(5, 6)", "output": "157.07963267948963", "ops": "=="}, {"input": "volume_cone(40, 20)", "output": "33510.32163829113", "ops": "=="}, {"input": "volume_cone(14, 16)", "output": "3284.0115205525303", "ops": "=="}, {"input": "volume_cone(25, 22)", "output": "14398.966328953218", "ops": "=="}, {"input": "volume_cone(22, 4)", "output": "2027.374459116613", "ops": "=="}, {"input": "volume_cone(31, 27)", "output": "27171.634860898117", "ops": "=="}, {"input": "volume_cone(1, 100)", "output": "104.71975511965977", "ops": "=="}, {"input": "volume_cone(17, 9)", "output": "2723.7608306623506", "ops": "=="}, {"input": "volume_cone(15, 5)", "output": "1178.0972450961722", "ops": "=="}, {"input": "volume_cone(13, 8)", "output": "1415.8110892178", "ops": "=="}, {"input": "volume_cone(2, 4)", "output": "16.755160819145562", "ops": "=="}], "166": [{"input": "next_Power_Of_2(16)", "output": "16", "ops": "=="}, {"input": "next_Power_Of_2(1)", "output": "1", "ops": "=="}, {"input": "next_Power_Of_2(63)", "output": "64", "ops": "=="}, {"input": "next_Power_Of_2(31)", "output": "32", "ops": "=="}, {"input": "next_Power_Of_2(35)", "output": "64", "ops": "=="}, {"input": "next_Power_Of_2(57)", "output": "64", "ops": "=="}, {"input": "next_Power_Of_2(24)", "output": "32", "ops": "=="}, {"input": "next_Power_Of_2(101247801512374933851595)", "output": "151115727451828646838272", "ops": "=="}, {"input": "next_Power_Of_2(5467384237577495230728588724)", "output": "9903520314283042199192993792", "ops": "=="}, {"input": "next_Power_Of_2(24)", "output": "32", "ops": "=="}, {"input": "next_Power_Of_2(4)", "output": "4", "ops": "=="}, {"input": "next_Power_Of_2(13)", "output": "16", "ops": "=="}, {"input": "next_Power_Of_2(9)", "output": "16", "ops": "=="}, {"input": "next_Power_Of_2(29)", "output": "32", "ops": "=="}, {"input": "next_Power_Of_2(14)", "output": "16", "ops": "=="}, {"input": "next_Power_Of_2(39)", "output": "64", "ops": "=="}, {"input": "next_Power_Of_2(16)", "output": "16", "ops": "=="}, {"input": "next_Power_Of_2(72)", "output": "128", "ops": "=="}, {"input": "next_Power_Of_2(30)", "output": "32", "ops": "=="}, {"input": "next_Power_Of_2(395)", "output": "512", "ops": "=="}, {"input": "next_Power_Of_2(3.125e-394)", "output": "1", "ops": "=="}], "338": [{"input": "find_Divisor(2**1000-1, 10)", "output": "2", "ops": "=="}, {"input": "find_Divisor(1, 10**1000)", "output": "2", "ops": "=="}, {"input": "find_Divisor(200, 500)", "output": "2", "ops": "=="}, {"input": "find_Divisor(33, 100)", "output": "2", "ops": "=="}, {"input": "find_Divisor(1, 3)", "output": "2", "ops": "=="}, {"input": "find_Divisor(2, 10)", "output": "2", "ops": "=="}, {"input": "find_Divisor(30, 25)", "output": "2", "ops": "=="}, {"input": "find_Divisor(13, 14)", "output": "2", "ops": "=="}, {"input": "find_Divisor(19, 38370480)", "output": "2", "ops": "=="}, {"input": "find_Divisor(6, 2)", "output": "2", "ops": "=="}, {"input": "find_Divisor(2, 8)", "output": "2", "ops": "=="}, {"input": "find_Divisor(6, 5)", "output": "2", "ops": "=="}, {"input": "find_Divisor(7, 12)", "output": "2", "ops": "=="}, {"input": "find_Divisor(99, 124)", "output": "2", "ops": "=="}, {"input": "find_Divisor(15, 50)", "output": "2", "ops": "=="}, {"input": "find_Divisor(8, 5)", "output": "2", "ops": "=="}, {"input": "find_Divisor(5, 8)", "output": "2", "ops": "=="}, {"input": "find_Divisor(40, 100)", "output": "2", "ops": "=="}, {"input": "find_Divisor(10, 10)", "output": "10", "ops": "=="}], "342": [{"input": "dig_let(('python', '3.0'))", "output": "(1, 0)", "ops": "=="}, {"input": "dig_let( r'python-3.4.6')", "output": "(6, 3)", "ops": "=="}, {"input": "dig_let({'name': 'Pyth', 'family': 'Python'})", "output": "(2, 0)", "ops": "=="}, {"input": "dig_let(u'python3')", "output": "(6, 1)", "ops": "=="}, {"input": "dig_let(u'\u3053\u3093\u306b\u3061\u306f')", "output": "(5, 0)", "ops": "=="}, {"input": "print('scripting', dig_let('jakppile'))", "output": "None", "ops": "=="}, {"input": "dig_let(['python', '3.9'])", "output": "(1, 0)", "ops": "=="}, {"input": "dig_let(u'\u043f\u0440\u0438\u0432\u0435\u0442\u0430')", "output": "(7, 0)", "ops": "=="}, {"input": "dig_let('\u041f\u0440\u0438\u0432\u0435\u0442')", "output": "(6, 0)", "ops": "=="}], "476": [{"input": "is_lower('tester')", "output": "'tester'", "ops": "=="}, {"input": "is_lower('test test TEST')", "output": "'test test test'", "ops": "=="}, {"input": "is_lower(u'\u00dft\u00eb')", "output": "'\u00dft\u00eb'", "ops": "=="}, {"input": "is_lower(\"\")", "output": "''", "ops": "=="}, {"input": "is_lower('TrUE')", "output": "'true'", "ops": "=="}, {"input": "is_lower(u'Test1')", "output": "'test1'", "ops": "=="}], "514": [{"input": "string_sequence(-1)", "output": "''", "ops": "=="}, {"input": "string_sequence(-1000000)", "output": "''", "ops": "=="}, {"input": "string_sequence(20).count(' ')", "output": "20", "ops": "=="}, {"input": "string_sequence(20)", "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'", "ops": "=="}, {"input": "string_sequence(5)", "output": "'0 1 2 3 4 5'", "ops": "=="}], "102": [{"input": "b= eulerian_num(10, 24)", "output": "0", "ops": "=="}, {"input": "eulerian_num(8, 15)", "output": "0", "ops": "=="}, {"input": "eulerian_num(5, 7)", "output": "0", "ops": "=="}, {"input": "eulerian_num(6, 8)", "output": "0", "ops": "=="}, {"input": "eulerian_num(5+1, 6+1)", "output": "0", "ops": "=="}, {"input": "eulerian_num(-12, 2)", "output": "0", "ops": "=="}, {"input": "eulerian_num(6, 6)", "output": "0", "ops": "=="}, {"input": "eulerian_num(20, 53)", "output": "0", "ops": "=="}, {"input": "eulerian_num(100, 900)", "output": "0", "ops": "=="}, {"input": "eulerian_num(6, 9)", "output": "0", "ops": "=="}], "319": [{"input": "sum_difference(100)", "output": "25164150", "ops": "=="}, {"input": "sum_difference(400)", "output": "6410626600", "ops": "=="}, {"input": "sum_difference(100)", "output": "25164150", "ops": "=="}, {"input": "sum_difference(256)", "output": "1076521600", "ops": "=="}, {"input": "sum_difference(568)", "output": "26052022332", "ops": "=="}, {"input": "sum_difference(-1)", "output": "0", "ops": "=="}, {"input": "sum_difference(90)", "output": "16521960", "ops": "=="}, {"input": "sum_difference(87)", "output": "14430284", "ops": "=="}, {"input": "sum_difference(72)", "output": "6779364", "ops": "=="}, {"input": "sum_difference(94)", "output": "19654930", "ops": "=="}, {"input": "sum_difference(723)", "output": "68374259902", "ops": "=="}, {"input": "sum_difference(93)", "output": "18833182", "ops": "=="}, {"input": "sum_difference(74)", "output": "7562800", "ops": "=="}, {"input": "sum_difference(63)", "output": "3978912", "ops": "=="}], "324": [{"input": "get_Min_Squares(3)", "output": "3", "ops": "=="}, {"input": "get_Min_Squares(1)", "output": "1", "ops": "=="}], "355": [{"input": "find_angle(82, 83)", "output": "15", "ops": "=="}, {"input": "find_angle(73, 83)", "output": "24", "ops": "=="}, {"input": "find_angle(-75, 65)", "output": "190", "ops": "=="}, {"input": "find_angle(-60, -60)", "output": "300", "ops": "=="}, {"input": "find_angle(1, 6)", "output": "173", "ops": "=="}, {"input": "find_angle(6, -1)", "output": "175", "ops": "=="}, {"input": "find_angle(44, 54)", "output": "82", "ops": "=="}, {"input": "find_angle(45, 100)", "output": "35", "ops": "=="}, {"input": "find_angle(110, 105)", "output": "-35", "ops": "=="}, {"input": "find_angle(89, 89)", "output": "2", "ops": "=="}, {"input": "find_angle(87, 121)", "output": "-28", "ops": "=="}, {"input": "find_angle(56, 45)", "output": "79", "ops": "=="}, {"input": "find_angle(42, 55)", "output": "83", "ops": "=="}, {"input": "find_angle(31, 43)", "output": "106", "ops": "=="}, {"input": "find_angle(44, 50)", "output": "86", "ops": "=="}, {"input": "find_angle(-6, -56)", "output": "242", "ops": "=="}, {"input": "find_angle(53, -4)", "output": "131", "ops": "=="}, {"input": "find_angle(40, 54)", "output": "86", "ops": "=="}, {"input": "find_angle(72, 70)", "output": "38", "ops": "=="}, {"input": "find_angle(61, 83)", "output": "36", "ops": "=="}, {"input": "find_angle(81, 88)", "output": "11", "ops": "=="}, {"input": "find_angle(53, 80)", "output": "47", "ops": "=="}, {"input": "find_angle(56, 87)", "output": "37", "ops": "=="}, {"input": "find_angle(55, 65)", "output": "60", "ops": "=="}, {"input": "find_angle(50, 70)", "output": "60", "ops": "=="}, {"input": "find_angle(107, 80)", "output": "-7", "ops": "=="}, {"input": "find_angle(68, 71)", "output": "41", "ops": "=="}, {"input": "find_angle(71, 84)", "output": "25", "ops": "=="}, {"input": "find_angle(47, 50)", "output": "83", "ops": "=="}, {"input": "find_angle(56, 75)", "output": "49", "ops": "=="}, {"input": "find_angle(89, 70)", "output": "21", "ops": "=="}, {"input": "find_angle(126, 96)", "output": "-42", "ops": "=="}, {"input": "find_angle(33, 90)", "output": "57", "ops": "=="}], "374": [{"input": "round_num(13862, -2)", "output": "13860", "ops": "=="}, {"input": "round_num(129, 3)", "output": "129", "ops": "=="}, {"input": "round_num(79, 1.1)", "output": "79.2", "ops": "=="}, {"input": "round_num(277, 7)", "output": "280", "ops": "=="}, {"input": "round_num(344, 6)", "output": "342", "ops": "=="}, {"input": "round_num(8185, 1)", "output": "8185", "ops": "=="}, {"input": "round_num(795, 4)", "output": "796", "ops": "=="}, {"input": "round_num(93, -3)", "output": "90", "ops": "=="}, {"input": "round_num(99999.129, 2)", "output": "100000.0", "ops": "=="}, {"input": "round_num(99002, 1000)", "output": "99000", "ops": "=="}, {"input": "round_num(33638, 100)", "output": "33600", "ops": "=="}, {"input": "round_num(13124, 4)", "output": "13124", "ops": "=="}, {"input": "round_num(13124, 3)", "output": "13125", "ops": "=="}, {"input": "round_num(11233450000.0, 9)", "output": "11233449999.0", "ops": "=="}, {"input": "round_num(1.259, -2)", "output": "0.0", "ops": "=="}, {"input": "round_num(99, 0.1)", "output": "99.0", "ops": "=="}, {"input": "round_num(279, 5)", "output": "280", "ops": "=="}], "550": [{"input": "add([1,1], [1])", "output": "[1, 1, 1]", "ops": "=="}, {"input": "add(10, 3)", "output": "13", "ops": "=="}, {"input": "add(10, 2)", "output": "12", "ops": "=="}, {"input": "add(136, 112)", "output": "248", "ops": "=="}], "135": [{"input": "cal_electbill(330)", "output": "1992.0", "ops": "=="}, {"input": "cal_electbill(700)", "output": "5118.5", "ops": "=="}, {"input": "cal_electbill(340)", "output": "2076.5", "ops": "=="}, {"input": "cal_electbill(30003)", "output": "252728.84999999998", "ops": "=="}, {"input": "cal_electbill(1250)", "output": "9766.0", "ops": "=="}, {"input": "cal_electbill(126)", "output": "474.26", "ops": "=="}, {"input": "cal_electbill(139)", "output": "542.64", "ops": "=="}, {"input": "cal_electbill(300)", "output": "1738.5", "ops": "=="}, {"input": "cal_electbill(3660)", "output": "30130.499999999996", "ops": "=="}, {"input": "cal_electbill(500)", "output": "3428.5", "ops": "=="}, {"input": "cal_electbill(600)", "output": "4273.5", "ops": "=="}, {"input": "cal_electbill(350)", "output": "2161.0", "ops": "=="}, {"input": "cal_electbill(1500)", "output": "11878.499999999998", "ops": "=="}, {"input": "cal_electbill(25000)", "output": "210453.49999999997", "ops": "=="}, {"input": "cal_electbill(50000000)", "output": "422499203.49999994", "ops": "=="}, {"input": "cal_electbill(260)", "output": "1400.5", "ops": "=="}, {"input": "cal_electbill(300)", "output": "1738.5", "ops": "=="}], "159": [{"input": "solution(100, 66, 767)", "output": "'No solution'", "ops": "=="}, {"input": "solution(18, 25, 36)", "output": "('x = ', 2, ', y = ', 0)", "ops": "=="}, {"input": "solution(15, 42, 11)", "output": "'No solution'", "ops": "=="}, {"input": "solution(6, 12, 25)", "output": "'No solution'", "ops": "=="}, {"input": "solution(13, 13, 17)", "output": "'No solution'", "ops": "=="}, {"input": "solution(3, 4, 14)", "output": "('x = ', 2, ', y = ', 2)", "ops": "=="}, {"input": "solution(100, 1000, 11001)", "output": "'No solution'", "ops": "=="}, {"input": "solution(8, 50, 28)", "output": "'No solution'", "ops": "=="}, {"input": "solution(7, 13, 17)", "output": "'No solution'", "ops": "=="}, {"input": "solution(2, 23, 61)", "output": "('x = ', 19, ', y = ', 1)", "ops": "=="}, {"input": "solution(30, 73, 55)", "output": "'No solution'", "ops": "=="}, {"input": "solution(30, 74, 55)", "output": "'No solution'", "ops": "=="}, {"input": "solution(18, 6, 53)", "output": "'No solution'", "ops": "=="}, {"input": "solution(19, 22, 81)", "output": "'No solution'", "ops": "=="}, {"input": "solution(7, 5, 21)", "output": "('x = ', 3, ', y = ', 0)", "ops": "=="}], "301": [{"input": "set_Bit_Number(22)", "output": "16", "ops": "=="}, {"input": "set_Bit_Number(25)", "output": "16", "ops": "=="}, {"input": "set_Bit_Number(29)", "output": "16", "ops": "=="}, {"input": "set_Bit_Number(4)", "output": "4", "ops": "=="}, {"input": "set_Bit_Number(2)", "output": "2", "ops": "=="}, {"input": "set_Bit_Number(24),", "output": "(16,)", "ops": "=="}, {"input": "set_Bit_Number(24)", "output": "16", "ops": "=="}, {"input": "set_Bit_Number(19)", "output": "16", "ops": "=="}, {"input": "set_Bit_Number(24)", "output": "16", "ops": "=="}, {"input": "set_Bit_Number(33)", "output": "32", "ops": "=="}, {"input": "set_Bit_Number(11)", "output": "8", "ops": "=="}, {"input": "set_Bit_Number(11)-1", "output": "7", "ops": "=="}, {"input": "set_Bit_Number(22)", "output": "16", "ops": "=="}, {"input": "set_Bit_Number(70)", "output": "64", "ops": "=="}, {"input": "set_Bit_Number(3)", "output": "2", "ops": "=="}, {"input": "set_Bit_Number(4)", "output": "4", "ops": "=="}, {"input": "set_Bit_Number(17)", "output": "16", "ops": "=="}, {"input": "set_Bit_Number(28)", "output": "16", "ops": "=="}, {"input": "set_Bit_Number(16)", "output": "16", "ops": "=="}, {"input": "set_Bit_Number(16)", "output": "16", "ops": "=="}], "213": [{"input": "degree_radian(180)", "output": "10313.240312354817", "ops": "=="}, {"input": "degree_radian(300)", "output": "17188.733853924696", "ops": "=="}, {"input": "degree_radian(360)", "output": "20626.480624709635", "ops": "=="}, {"input": "degree_radian(180)", "output": "10313.240312354817", "ops": "=="}, {"input": "degree_radian(130)", "output": "7448.451336700702", "ops": "=="}, {"input": "degree_radian(180)", "output": "10313.240312354817", "ops": "=="}, {"input": "degree_radian(20)", "output": "1145.9155902616465", "ops": "=="}, {"input": "degree_radian(-50)", "output": "-2864.7889756541163", "ops": "=="}, {"input": "degree_radian(500)", "output": "28647.88975654116", "ops": "=="}, {"input": "degree_radian(255)", "output": "14610.423775835992", "ops": "=="}], "81": [{"input": "volume_sphere(500)", "output": "523598775.59829885", "ops": "=="}, {"input": "volume_sphere(13)", "output": "9202.7720799157", "ops": "=="}, {"input": "volume_sphere(17)", "output": "20579.526276115535", "ops": "=="}, {"input": "volume_sphere(60)", "output": "904778.6842338603", "ops": "=="}, {"input": "volume_sphere(160)", "output": "17157284.678805057", "ops": "=="}, {"input": "volume_sphere(0.000001)", "output": "4.18879020478639e-18", "ops": "=="}, {"input": "volume_sphere(1.1)", "output": "5.575279762570688", "ops": "=="}, {"input": "volume_sphere(30)", "output": "113097.33552923254", "ops": "=="}, {"input": "volume_sphere(27)", "output": "82447.95760081052", "ops": "=="}, {"input": "volume_sphere(21)", "output": "38792.38608652677", "ops": "=="}, {"input": "volume_sphere(45)", "output": "381703.5074111598", "ops": "=="}, {"input": "volume_sphere(500)", "output": "523598775.59829885", "ops": "=="}, {"input": "volume_sphere(1000)", "output": "4188790204.786391", "ops": "=="}, {"input": "volume_sphere(16)", "output": "17157.284678805056", "ops": "=="}, {"input": "volume_sphere(12)", "output": "7238.229473870883", "ops": "=="}, {"input": "volume_sphere(8)", "output": "2144.660584850632", "ops": "=="}, {"input": "volume_sphere(4)", "output": "268.082573106329", "ops": "=="}, {"input": "volume_sphere(1)", "output": "4.1887902047863905", "ops": "=="}, {"input": "volume_sphere(21)", "output": "38792.38608652677", "ops": "=="}, {"input": "volume_sphere(2)", "output": "33.510321638291124", "ops": "=="}, {"input": "volume_sphere(1)", "output": "4.1887902047863905", "ops": "=="}], "223": [{"input": "count_Set_Bits(8)", "output": "1", "ops": "=="}, {"input": "count_Set_Bits(100)", "output": "3", "ops": "=="}, {"input": "count_Set_Bits(8)", "output": "1", "ops": "=="}, {"input": "count_Set_Bits(10)", "output": "2", "ops": "=="}, {"input": "count_Set_Bits(100)", "output": "3", "ops": "=="}, {"input": "count_Set_Bits(1024)", "output": "1", "ops": "=="}, {"input": "count_Set_Bits(8)", "output": "1", "ops": "=="}, {"input": "count_Set_Bits(8)", "output": "1", "ops": "=="}, {"input": "count_Set_Bits(8)", "output": "1", "ops": "=="}, {"input": "count_Set_Bits(8)", "output": "1", "ops": "=="}, {"input": "count_Set_Bits(1)", "output": "1", "ops": "=="}, {"input": "count_Set_Bits(1)", "output": "1", "ops": "=="}, {"input": "count_Set_Bits(8)", "output": "1", "ops": "=="}, {"input": "count_Set_Bits(8)", "output": "1", "ops": "=="}], "240": [{"input": "array_3d(3, 3, 2)", "output": "[[['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']], [['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']]]", "ops": "=="}, {"input": "array_3d(3, 1, 5)", "output": "[[['*', '*', '*']], [['*', '*', '*']], [['*', '*', '*']], [['*', '*', '*']], [['*', '*', '*']]]", "ops": "=="}, {"input": "array_3d(0, 4, 1)", "output": "[[[], [], [], []]]", "ops": "=="}, {"input": "array_3d(2, 4, 3)", "output": "[[['*', '*'], ['*', '*'], ['*', '*'], ['*', '*']], [['*', '*'], ['*', '*'], ['*', '*'], ['*', '*']], [['*', '*'], ['*', '*'], ['*', '*'], ['*', '*']]]", "ops": "=="}, {"input": "array_3d(2, 1, 2)", "output": "[[['*', '*']], [['*', '*']]]", "ops": "=="}, {"input": "array_3d(3, 2, 1)", "output": "[[['*', '*', '*'], ['*', '*', '*']]]", "ops": "=="}, {"input": "array_3d(5, 5, 1)", "output": "[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]", "ops": "=="}, {"input": "array_3d(-5, 1, -3)", "output": "[]", "ops": "=="}, {"input": "array_3d(3, 0, 1)", "output": "[[]]", "ops": "=="}, {"input": "array_3d(1, 5, 3)", "output": "[[['*'], ['*'], ['*'], ['*'], ['*']], [['*'], ['*'], ['*'], ['*'], ['*']], [['*'], ['*'], ['*'], ['*'], ['*']]]", "ops": "=="}, {"input": "array_3d(2, 2, 3)", "output": "[[['*', '*'], ['*', '*']], [['*', '*'], ['*', '*']], [['*', '*'], ['*', '*']]]", "ops": "=="}, {"input": "array_3d(5, 1, 3)", "output": "[[['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*']]]", "ops": "=="}], "270": [{"input": "even_Power_Sum(9)", "output": "3866400", "ops": "=="}, {"input": "even_Power_Sum(0)", "output": "0", "ops": "=="}, {"input": "even_Power_Sum(10)", "output": "7066400", "ops": "=="}, {"input": "even_Power_Sum(15)", "output": "73574400", "ops": "=="}, {"input": "even_Power_Sum(10)", "output": "7066400", "ops": "=="}, {"input": "even_Power_Sum(7)", "output": "928256", "ops": "=="}, {"input": "even_Power_Sum(50)", "output": "88416660000", "ops": "=="}, {"input": "even_Power_Sum(6)", "output": "390432", "ops": "=="}, {"input": "even_Power_Sum(10000)", "output": "5334933466666666400000000", "ops": "=="}, {"input": "even_Power_Sum(500)", "output": "83834166666000000", "ops": "=="}, {"input": "'{:g}'.format(even_Power_Sum(500) / 13)", "output": "'6.44878e+15'", "ops": "=="}], "579": [{"input": "solve(23)", "output": "'101'", "ops": "=="}, {"input": "solve(739)", "output": "'10011'", "ops": "=="}, {"input": "solve(920)", "output": "'1011'", "ops": "=="}, {"input": "solve(1577)", "output": "'10100'", "ops": "=="}, {"input": "solve(8)", "output": "'1000'", "ops": "=="}, {"input": "solve(400)", "output": "'100'", "ops": "=="}, {"input": "solve(400)", "output": "'100'", "ops": "=="}, {"input": "solve(16)", "output": "'111'", "ops": "=="}, {"input": "solve(1258612)", "output": "'11001'", "ops": "=="}, {"input": "solve(4218290340921983310571)", "output": "'1010010'", "ops": "=="}, {"input": "solve(832769952115115117287336279)", "output": "'1111001'", "ops": "=="}, {"input": "solve(502)", "output": "'111'", "ops": "=="}, {"input": "solve(2919)", "output": "'10101'", "ops": "=="}, {"input": "solve(542)", "output": "'1011'", "ops": "=="}, {"input": "solve(399)", "output": "'10101'", "ops": "=="}, {"input": "solve(3500) == []", "output": "False", "ops": "=="}, {"input": "solve(1297)", "output": "'10011'", "ops": "=="}], "379": [{"input": "multi_list(14, 0)", "output": "[[], [], [], [], [], [], [], [], [], [], [], [], [], []]", "ops": "=="}, {"input": "(5 in multi_list(9, 10) and 10 not in multi_list(12, 17)) is False", "output": "True", "ops": "=="}], "481": [{"input": "match(u'geeks')", "output": "'No'", "ops": "=="}, {"input": "match(u\"\u00d2'h\u028cn\u0259l\u0259r'oqj\u00d6\")", "output": "'No'", "ops": "=="}, {"input": "match('The McGregor Singularis Singult')", "output": "'Yes'", "ops": "=="}, {"input": "match(\"\u00f8l'k'o\")", "output": "'No'", "ops": "=="}, {"input": "match(\"u'ko\")", "output": "'No'", "ops": "=="}, {"input": "match('/\u00b4C\u014f/u')", "output": "'No'", "ops": "=="}, {"input": "match(r'C:\\Program Files')", "output": "'Yes'", "ops": "=="}, {"input": "match(r'C\\:\\/Program Files')", "output": "'Yes'", "ops": "=="}, {"input": "match(r'^[-+?])|\\w(.+\\w)').replace('  ','$')", "output": "'No'", "ops": "=="}, {"input": "match('100')", "output": "'No'", "ops": "=="}, {"input": "match('pythont')", "output": "'No'", "ops": "=="}], "487": [{"input": "area_pentagon(20)", "output": "688.1909602355868", "ops": "=="}, {"input": "area_pentagon(100)", "output": "17204.77400588967", "ops": "=="}, {"input": "area_pentagon(25)", "output": "1075.2983753681044", "ops": "=="}, {"input": "area_pentagon(32)", "output": "1761.7688582031021", "ops": "=="}, {"input": "area_pentagon(60)", "output": "6193.7186421202805", "ops": "=="}, {"input": "area_pentagon(20)", "output": "688.1909602355868", "ops": "=="}, {"input": "area_pentagon(25)", "output": "1075.2983753681044", "ops": "=="}, {"input": "area_pentagon(17)", "output": "497.2179687702114", "ops": "=="}, {"input": "area_pentagon(12)", "output": "247.74874568481124", "ops": "=="}, {"input": "area_pentagon(20)", "output": "688.1909602355868", "ops": "=="}, {"input": "area_pentagon(20)", "output": "688.1909602355868", "ops": "=="}, {"input": "area_pentagon(21)", "output": "758.7305336597344", "ops": "=="}, {"input": "area_pentagon(41)", "output": "2892.1225103900533", "ops": "=="}, {"input": "area_pentagon(100)", "output": "17204.77400588967", "ops": "=="}], "134": [{"input": "hexagonal_num(0)", "output": "0", "ops": "=="}, {"input": "hexagonal_num(8)", "output": "120", "ops": "=="}, {"input": "hexagonal_num(30000)", "output": "1799970000", "ops": "=="}, {"input": "hexagonal_num(8)", "output": "120", "ops": "=="}, {"input": "hexagonal_num(11)", "output": "231", "ops": "=="}, {"input": "hexagonal_num(24)", "output": "1128", "ops": "=="}, {"input": "hexagonal_num(9)", "output": "153", "ops": "=="}, {"input": "hexagonal_num(1)", "output": "1", "ops": "=="}, {"input": "hexagonal_num(20)", "output": "780", "ops": "=="}, {"input": "hexagonal_num(9)", "output": "153", "ops": "=="}, {"input": "hexagonal_num(1)", "output": "1", "ops": "=="}, {"input": "hexagonal_num(13)", "output": "325", "ops": "=="}, {"input": "hexagonal_num(30)", "output": "1770", "ops": "=="}, {"input": "hexagonal_num(12)", "output": "276", "ops": "=="}, {"input": "hexagonal_num(18)", "output": "630", "ops": "=="}, {"input": "hexagonal_num(45)", "output": "4005", "ops": "=="}, {"input": "hexagonal_num(3)", "output": "15", "ops": "=="}, {"input": "hexagonal_num(.1)", "output": "-0.08000000000000002", "ops": "=="}, {"input": "hexagonal_num(334)", "output": "222778", "ops": "=="}, {"input": "hexagonal_num(7353)", "output": "108125865", "ops": "=="}], "178": [{"input": "is_num_keith(178)", "output": "False", "ops": "=="}, {"input": "is_num_keith(8)", "output": "True", "ops": "=="}, {"input": "is_num_keith(25)", "output": "False", "ops": "=="}, {"input": "is_num_keith(7)", "output": "True", "ops": "=="}, {"input": "is_num_keith(2000)", "output": "False", "ops": "=="}, {"input": "is_num_keith(204)", "output": "False", "ops": "=="}, {"input": "is_num_keith(121) is None", "output": "False", "ops": "=="}, {"input": "is_num_keith(240)", "output": "False", "ops": "=="}, {"input": "is_num_keith(0xDEADBEEFC1234AB)", "output": "False", "ops": "=="}, {"input": "is_num_keith(190)", "output": "False", "ops": "=="}, {"input": "is_num_keith(6)", "output": "True", "ops": "=="}], "34": [{"input": "find_rect_num(12)", "output": "156", "ops": "=="}, {"input": "find_rect_num(7)", "output": "56", "ops": "=="}, {"input": "find_rect_num(7)", "output": "56", "ops": "=="}, {"input": "find_rect_num(8)", "output": "72", "ops": "=="}, {"input": "find_rect_num(7)", "output": "56", "ops": "=="}, {"input": "find_rect_num(8)", "output": "72", "ops": "=="}, {"input": "find_rect_num(7)", "output": "56", "ops": "=="}, {"input": "find_rect_num(10)", "output": "110", "ops": "=="}, {"input": "find_rect_num(14)", "output": "210", "ops": "=="}, {"input": "find_rect_num(19)", "output": "380", "ops": "=="}, {"input": "find_rect_num(7)", "output": "56", "ops": "=="}, {"input": "find_rect_num(8)", "output": "72", "ops": "=="}, {"input": "find_rect_num(16)", "output": "272", "ops": "=="}, {"input": "find_rect_num(7)", "output": "56", "ops": "=="}, {"input": "find_rect_num(10)", "output": "110", "ops": "=="}, {"input": "find_rect_num(7)", "output": "56", "ops": "=="}], "267": [{"input": "find_star_num(6)", "output": "181", "ops": "=="}, {"input": "find_star_num(62)", "output": "22693", "ops": "=="}, {"input": "find_star_num(10000000)", "output": "599999940000001", "ops": "=="}, {"input": "find_star_num(10001)", "output": "600060001", "ops": "=="}, {"input": "find_star_num(10)", "output": "541", "ops": "=="}, {"input": "find_star_num(30000)", "output": "5399820001", "ops": "=="}, {"input": "find_star_num(6)", "output": "181", "ops": "=="}, {"input": "find_star_num(6)", "output": "181", "ops": "=="}, {"input": "find_star_num(7)", "output": "253", "ops": "=="}, {"input": "find_star_num(6)", "output": "181", "ops": "=="}, {"input": "find_star_num(1)", "output": "1", "ops": "=="}, {"input": "find_star_num(19)", "output": "2053", "ops": "=="}, {"input": "find_star_num(25)", "output": "3601", "ops": "=="}, {"input": "find_star_num(6)", "output": "181", "ops": "=="}], "2": [{"input": "is_not_prime(3537)", "output": "True", "ops": "=="}, {"input": "is_not_prime(749)", "output": "True", "ops": "=="}, {"input": "is_not_prime(53)", "output": "False", "ops": "=="}, {"input": "is_not_prime(97)", "output": "False", "ops": "=="}, {"input": "is_not_prime(14)", "output": "True", "ops": "=="}, {"input": "is_not_prime(42)", "output": "True", "ops": "=="}, {"input": "is_not_prime(370)", "output": "True", "ops": "=="}, {"input": "is_not_prime(562)", "output": "True", "ops": "=="}, {"input": "is_not_prime(7911 + 35 + 1)", "output": "True", "ops": "=="}, {"input": "is_not_prime(37007)", "output": "True", "ops": "=="}, {"input": "is_not_prime(100)", "output": "True", "ops": "=="}, {"input": "is_not_prime(97)", "output": "False", "ops": "=="}], "58": [{"input": "is_octagonal(20)", "output": "1160", "ops": "=="}, {"input": "is_octagonal(21)", "output": "1281", "ops": "=="}, {"input": "is_octagonal(23)", "output": "1541", "ops": "=="}, {"input": "is_octagonal(30)", "output": "2640", "ops": "=="}, {"input": "is_octagonal(27)", "output": "2133", "ops": "=="}, {"input": "is_octagonal(45)", "output": "5985", "ops": "=="}, {"input": "is_octagonal(45)", "output": "5985", "ops": "=="}, {"input": "is_octagonal(45 - 0.5)", "output": "5851.75", "ops": "=="}, {"input": "is_octagonal(36)", "output": "3816", "ops": "=="}, {"input": "is_octagonal(25)", "output": "1825", "ops": "=="}, {"input": "is_octagonal(20)", "output": "1160", "ops": "=="}, {"input": "is_octagonal(25)", "output": "1825", "ops": "=="}, {"input": "is_octagonal(20)", "output": "1160", "ops": "=="}, {"input": "is_octagonal(30)", "output": "2640", "ops": "=="}, {"input": "is_octagonal(35)", "output": "3605", "ops": "=="}, {"input": "is_octagonal(45)", "output": "5985", "ops": "=="}, {"input": "is_octagonal(48)", "output": "6816", "ops": "=="}, {"input": "is_octagonal(52)", "output": "8008", "ops": "=="}, {"input": "is_octagonal(51)", "output": "7701", "ops": "=="}, {"input": "is_octagonal(25)", "output": "1825", "ops": "=="}, {"input": "is_octagonal(20)", "output": "1160", "ops": "=="}, {"input": "is_octagonal(20)", "output": "1160", "ops": "=="}, {"input": "is_octagonal(24)", "output": "1680", "ops": "=="}, {"input": "is_octagonal(25)", "output": "1825", "ops": "=="}, {"input": "is_octagonal(-1)", "output": "5", "ops": "=="}, {"input": "is_octagonal(6)", "output": "96", "ops": "=="}], "452": [{"input": "sumofFactors(31)", "output": "0", "ops": "=="}, {"input": "sumofFactors(13)", "output": "0", "ops": "=="}, {"input": "sumofFactors(8)", "output": "14", "ops": "=="}, {"input": "sumofFactors(50)", "output": "62", "ops": "=="}, {"input": "sumofFactors(8)", "output": "14", "ops": "=="}, {"input": "sumofFactors(4)", "output": "6", "ops": "=="}, {"input": "sumofFactors(32)", "output": "62", "ops": "=="}, {"input": "sumofFactors(64)", "output": "126", "ops": "=="}, {"input": "sumofFactors(828998497395223464165831195854675)", "output": "0", "ops": "=="}, {"input": "sumofFactors(12)", "output": "24", "ops": "=="}, {"input": "sumofFactors(7)", "output": "0", "ops": "=="}, {"input": "sumofFactors(7)", "output": "0", "ops": "=="}, {"input": "sumofFactors(100)", "output": "186", "ops": "=="}, {"input": "sumofFactors(7)", "output": "0", "ops": "=="}], "478": [{"input": "first_Digit(321)", "output": "3", "ops": "=="}, {"input": "first_Digit(6)", "output": "6", "ops": "=="}, {"input": "first_Digit(3)", "output": "3", "ops": "=="}, {"input": "first_Digit(2)", "output": "2", "ops": "=="}, {"input": "first_Digit(22)", "output": "2", "ops": "=="}, {"input": "first_Digit(1)", "output": "1", "ops": "=="}, {"input": "first_Digit(73)", "output": "7", "ops": "=="}, {"input": "first_Digit(872)", "output": "8", "ops": "=="}, {"input": "first_Digit(15)", "output": "1", "ops": "=="}, {"input": "first_Digit(6)", "output": "6", "ops": "=="}, {"input": "first_Digit(0)", "output": "0", "ops": "=="}, {"input": "first_Digit(7)", "output": "7", "ops": "=="}, {"input": "first_Digit(99)", "output": "9", "ops": "=="}], "247": [{"input": "harmonic_sum(1)", "output": "1", "ops": "=="}, {"input": "harmonic_sum(0)", "output": "1", "ops": "=="}], "348": [{"input": "check('foo')", "output": "'No'", "ops": "=="}, {"input": "check('1112229998')", "output": "'No'", "ops": "=="}, {"input": "check('aaa111aa11a')", "output": "'No'", "ops": "=="}, {"input": "check(('101', 'name0'))", "output": "'No'", "ops": "=="}, {"input": "check(('%c', '0101', 'name01'))", "output": "'No'", "ops": "=="}, {"input": "check('201')", "output": "'No'", "ops": "=="}, {"input": "check({'name': 'value0'}) is False", "output": "False", "ops": "=="}, {"input": "check(u'\u3072 \u3044 \u3046')", "output": "'No'", "ops": "=="}, {"input": "check('111')", "output": "'Yes'", "ops": "=="}], "111": [{"input": "perimeter(4, 2)", "output": "12", "ops": "=="}, {"input": "perimeter(6, 2)", "output": "16", "ops": "=="}, {"input": "perimeter(2, 0)", "output": "4", "ops": "=="}, {"input": "perimeter(9, 10)", "output": "38", "ops": "=="}, {"input": "perimeter(3, 6)", "output": "18", "ops": "=="}, {"input": "perimeter(3, 0)", "output": "6", "ops": "=="}, {"input": "perimeter(5, 4)", "output": "18", "ops": "=="}, {"input": "perimeter(3, 2)", "output": "10", "ops": "=="}, {"input": "perimeter(3, 12)", "output": "30", "ops": "=="}, {"input": "perimeter(4, 1)", "output": "10", "ops": "=="}, {"input": "perimeter(12, 18)", "output": "60", "ops": "=="}], "187": [{"input": "prod_Square(22)", "output": "False", "ops": "=="}, {"input": "prod_Square(34)", "output": "False", "ops": "=="}, {"input": "prod_Square(23)", "output": "False", "ops": "=="}, {"input": "prod_Square(20)", "output": "False", "ops": "=="}, {"input": "prod_Square(21)", "output": "False", "ops": "=="}, {"input": "prod_Square(10)", "output": "False", "ops": "=="}, {"input": "prod_Square(0)", "output": "False", "ops": "=="}, {"input": "prod_Square(10)", "output": "False", "ops": "=="}, {"input": "prod_Square(5)", "output": "False", "ops": "=="}, {"input": "prod_Square(22)", "output": "False", "ops": "=="}, {"input": "prod_Square(1000)", "output": "False", "ops": "=="}], "259": [{"input": "newman_prime(1)", "output": "1", "ops": "=="}], "334": [{"input": "ap_sum(3, 6, 6)", "output": "108.0", "ops": "=="}, {"input": "ap_sum(3, 4, 0)", "output": "12.0", "ops": "=="}, {"input": "ap_sum(5, 11, 13)", "output": "770.0", "ops": "=="}, {"input": "ap_sum(4, 5, 7)", "output": "90.0", "ops": "=="}, {"input": "ap_sum(3, 6, 6)", "output": "108.0", "ops": "=="}, {"input": "ap_sum(5, 5, 5)", "output": "75.0", "ops": "=="}, {"input": "ap_sum(2, 2, 12)", "output": "16.0", "ops": "=="}, {"input": "ap_sum(5, 3, 4)", "output": "27.0", "ops": "=="}, {"input": "ap_sum(2, 6, 7)", "output": "117.0", "ops": "=="}, {"input": "ap_sum(0, 5, 5)", "output": "50.0", "ops": "=="}, {"input": "ap_sum(3, 2, 12)", "output": "18.0", "ops": "=="}, {"input": "ap_sum(-2, 2, 4)", "output": "0.0", "ops": "=="}, {"input": "ap_sum(2, 4, 5)", "output": "38.0", "ops": "=="}, {"input": "ap_sum(9, 3, 1)", "output": "30.0", "ops": "=="}, {"input": "ap_sum(3, 9, 3)", "output": "135.0", "ops": "=="}], "490": [{"input": "sum_gp(2, 6, 4)", "output": "2730.0", "ops": "=="}, {"input": "sum_gp(2, 3, 8)", "output": "146.0", "ops": "=="}, {"input": "sum_gp(4, 5, 10)", "output": "44444.0", "ops": "=="}, {"input": "sum_gp(2, 6, 4)", "output": "2730.0", "ops": "=="}, {"input": "sum_gp(9, 33, 11)", "output": "2.090263897789903e+34", "ops": "=="}, {"input": "sum_gp(5, 20, 16)", "output": "4.029752732048764e+23", "ops": "=="}, {"input": "sum_gp(20, 36, 8)", "output": "9.27195867595505e+32", "ops": "=="}, {"input": "sum_gp(3, 6, 10)", "output": "333333.0", "ops": "=="}, {"input": "sum_gp(2, 10, 5)", "output": "4882812.0", "ops": "=="}, {"input": "sum_gp(20, 100, 70)", "output": "9.3752942307964e+183", "ops": "=="}, {"input": "sum_gp(11, 12, 13)", "output": "21356578028940.0", "ops": "=="}, {"input": "sum_gp(11, 15, 17)", "output": "1.9679158479129984e+18", "ops": "=="}, {"input": "sum_gp(4, 7, 3)", "output": "4372.0", "ops": "=="}, {"input": "sum_gp(5, 8, 3)", "output": "16400.0", "ops": "=="}, {"input": "sum_gp(20, 30, 32)", "output": "9.208049630361031e+44", "ops": "=="}, {"input": "sum_gp(16, 16, 2)", "output": "1048560.0", "ops": "=="}, {"input": "sum_gp(16, 16, 3)", "output": "344373760.0", "ops": "=="}, {"input": "sum_gp(15, 15, 8)", "output": "75395083047495.0", "ops": "=="}, {"input": "sum_gp(15, 15, 18)", "output": "5.952918191009522e+18", "ops": "=="}, {"input": "sum_gp(3, 24, 14)", "output": "7.41738392404094e+26", "ops": "=="}, {"input": "sum_gp(2, 4, 3)", "output": "80.0", "ops": "=="}], "66": [{"input": "bell_number(19)", "output": "5832742205057", "ops": "=="}, {"input": "bell_number(4)", "output": "15", "ops": "=="}, {"input": "bell_number(17)", "output": "82864869804", "ops": "=="}, {"input": "bell_number(54)", "output": "19317287589145618265728950069285503257349832850302011", "ops": "=="}, {"input": "bell_number(100)", "output": "47585391276764833658790768841387207826363669686825611466616334637559114497892442622672724044217756306953557882560751", "ops": "=="}, {"input": "bell_number(3)", "output": "5", "ops": "=="}, {"input": "bell_number(37)", "output": "52868366208550447901945575624941", "ops": "=="}, {"input": "bell_number(25)", "output": "4638590332229999353", "ops": "=="}], "82": [{"input": "get_Char.__doc__", "output": "None", "ops": "=="}, {"input": "get_Char(\"\")", "output": "122", "ops": "=="}, {"input": "get_Char(chr(0xde) + chr(0x0b))", "output": "'o'", "ops": "=="}, {"input": "get_Char(chr(0x0536))", "output": "'p'", "ops": "=="}, {"input": "get_Char('a123z')", "output": "'s'", "ops": "=="}], "88": [{"input": "closest_num(4)", "output": "3", "ops": "=="}, {"input": "closest_num(18)", "output": "17", "ops": "=="}, {"input": "closest_num(21)", "output": "20", "ops": "=="}, {"input": "closest_num(8)", "output": "7", "ops": "=="}, {"input": "closest_num(6)", "output": "5", "ops": "=="}, {"input": "closest_num(291)", "output": "290", "ops": "=="}, {"input": "closest_num(5)", "output": "4", "ops": "=="}, {"input": "closest_num(2)", "output": "1", "ops": "=="}, {"input": "closest_num(8)", "output": "7", "ops": "=="}, {"input": "closest_num(3)", "output": "2", "ops": "=="}, {"input": "closest_num(1)", "output": "0", "ops": "=="}, {"input": "closest_num(15)", "output": "14", "ops": "=="}, {"input": "closest_num(18)", "output": "17", "ops": "=="}, {"input": "closest_num(24)", "output": "23", "ops": "=="}, {"input": "closest_num(2)", "output": "1", "ops": "=="}, {"input": "closest_num(23)", "output": "22", "ops": "=="}, {"input": "closest_num(50)", "output": "49", "ops": "=="}, {"input": "closest_num(14)", "output": "13", "ops": "=="}, {"input": "closest_num(100)", "output": "99", "ops": "=="}], "391": [{"input": "get_max_sum(1500)", "output": "5377", "ops": "=="}, {"input": "get_max_sum(2500)", "output": "10005", "ops": "=="}, {"input": "get_max_sum(7000)", "output": "35573", "ops": "=="}, {"input": "get_max_sum(2000)", "output": "7742", "ops": "=="}, {"input": "get_max_sum(1000)", "output": "3300", "ops": "=="}, {"input": "get_max_sum(100)", "output": "200", "ops": "=="}, {"input": "get_max_sum(500)", "output": "1404", "ops": "=="}, {"input": "get_max_sum(12)", "output": "16", "ops": "=="}, {"input": "get_max_sum(8)", "output": "9", "ops": "=="}, {"input": "get_max_sum(1)", "output": "1", "ops": "=="}, {"input": "get_max_sum(12)", "output": "16", "ops": "=="}, {"input": "get_max_sum(1)", "output": "1", "ops": "=="}, {"input": "get_max_sum(15)", "output": "18", "ops": "=="}, {"input": "get_max_sum(17)", "output": "21", "ops": "=="}, {"input": "sum(map(get_max_sum, [1,2,3,10]))", "output": "18", "ops": "=="}, {"input": "get_max_sum(0)", "output": "0", "ops": "=="}, {"input": "get_max_sum(453589)", "output": "6037008", "ops": "=="}], "405": [{"input": "find_Parity(25)", "output": "'Odd Parity'", "ops": "=="}, {"input": "find_Parity(0)", "output": "'Even Parity'", "ops": "=="}, {"input": "find_Parity(14)", "output": "'Odd Parity'", "ops": "=="}, {"input": "find_Parity(19)", "output": "'Odd Parity'", "ops": "=="}, {"input": "find_Parity(14)", "output": "'Odd Parity'", "ops": "=="}, {"input": "find_Parity(11)", "output": "'Odd Parity'", "ops": "=="}, {"input": "find_Parity(0)", "output": "'Even Parity'", "ops": "=="}, {"input": "find_Parity(-15)", "output": "'Odd Parity'", "ops": "=="}, {"input": "find_Parity(33)", "output": "'Even Parity'", "ops": "=="}, {"input": "find_Parity(22)", "output": "'Odd Parity'", "ops": "=="}, {"input": "find_Parity(26)", "output": "'Odd Parity'", "ops": "=="}, {"input": "find_Parity(14)", "output": "'Odd Parity'", "ops": "=="}, {"input": "find_Parity(5)", "output": "'Even Parity'", "ops": "=="}, {"input": "find_Parity(4)", "output": "'Odd Parity'", "ops": "=="}, {"input": "find_Parity(3)", "output": "'Even Parity'", "ops": "=="}, {"input": "find_Parity(15)", "output": "'Even Parity'", "ops": "=="}, {"input": "find_Parity(1)", "output": "'Odd Parity'", "ops": "=="}, {"input": "find_Parity(0)", "output": "'Even Parity'", "ops": "=="}, {"input": "find_Parity(43)", "output": "'Even Parity'", "ops": "=="}, {"input": "find_Parity(55)", "output": "'Odd Parity'", "ops": "=="}, {"input": "find_Parity(3)", "output": "'Even Parity'", "ops": "=="}, {"input": "find_Parity(0)", "output": "'Even Parity'", "ops": "=="}], "76": [{"input": "is_Diff(122)", "output": "False", "ops": "=="}, {"input": "is_Diff(1234)", "output": "False", "ops": "=="}, {"input": "is_Diff(12312454)", "output": "True", "ops": "=="}, {"input": "is_Diff(12312)", "output": "False", "ops": "=="}, {"input": "is_Diff(12345631235)", "output": "False", "ops": "=="}, {"input": "is_Diff(12)", "output": "False", "ops": "=="}, {"input": "is_Diff(3456.1215)", "output": "False", "ops": "=="}, {"input": "is_Diff(1111211)", "output": "False", "ops": "=="}, {"input": "is_Diff(1111112)", "output": "False", "ops": "=="}, {"input": "is_Diff(12211212)", "output": "False", "ops": "=="}, {"input": "is_Diff(12)", "output": "False", "ops": "=="}, {"input": "is_Diff(1)", "output": "False", "ops": "=="}, {"input": "is_Diff(4351)", "output": "False", "ops": "=="}, {"input": "is_Diff(1121)", "output": "False", "ops": "=="}], "434": [{"input": "last_Digit(49)", "output": "9", "ops": "=="}, {"input": "last_Digit(49)", "output": "9", "ops": "=="}, {"input": "last_Digit(64)", "output": "4", "ops": "=="}, {"input": "last_Digit(429497)", "output": "7", "ops": "=="}, {"input": "last_Digit(27)", "output": "7", "ops": "=="}, {"input": "last_Digit(29)", "output": "9", "ops": "=="}, {"input": "last_Digit(100)", "output": "0", "ops": "=="}, {"input": "last_Digit(10001)", "output": "1", "ops": "=="}, {"input": "last_Digit(38)", "output": "8", "ops": "=="}, {"input": "last_Digit(72)", "output": "2", "ops": "=="}, {"input": "last_Digit(12)", "output": "2", "ops": "=="}, {"input": "last_Digit(100)", "output": "0", "ops": "=="}, {"input": "last_Digit(-4)", "output": "6", "ops": "=="}, {"input": "last_Digit(29)", "output": "9", "ops": "=="}, {"input": "last_Digit(15)", "output": "5", "ops": "=="}, {"input": "last_Digit(373)", "output": "3", "ops": "=="}, {"input": "last_Digit(38)", "output": "8", "ops": "=="}, {"input": "last_Digit(20)", "output": "0", "ops": "=="}, {"input": "last_Digit(1)", "output": "1", "ops": "=="}], "54": [{"input": "tn_gp(2, 3, -1)", "output": "2.0", "ops": "=="}, {"input": "tn_gp(2, 6, 4)", "output": "2048.0", "ops": "=="}, {"input": "tn_gp(3, 7, 2)", "output": "192.0", "ops": "=="}, {"input": "tn_gp(2, 5, 6)", "output": "2592.0", "ops": "=="}, {"input": "tn_gp(3, 6, 8)", "output": "98304.0", "ops": "=="}, {"input": "tn_gp(3, 1, 0)", "output": "3.0", "ops": "=="}, {"input": "tn_gp(2, 6, 0)", "output": "0.0", "ops": "=="}, {"input": "tn_gp(9, 12, 0)", "output": "0.0", "ops": "=="}, {"input": "tn_gp(2, 2, 2)", "output": "4.0", "ops": "=="}, {"input": "tn_gp(2, 3, 6)", "output": "72.0", "ops": "=="}, {"input": "tn_gp(1, 2, 7)", "output": "7.0", "ops": "=="}, {"input": "tn_gp(2, 6, 4)", "output": "2048.0", "ops": "=="}, {"input": "(tn_gp(2, 6, 1) == 1)", "output": "False", "ops": "=="}, {"input": "tn_gp(13, 16, 13)", "output": "6.654166091831799e+17", "ops": "=="}, {"input": "tn_gp(16, 13, 17)", "output": "9321955795676176.0", "ops": "=="}], "233": [{"input": "volume_cube(8)", "output": "512", "ops": "=="}, {"input": "volume_cube(9)", "output": "729", "ops": "=="}, {"input": "volume_cube(30)", "output": "27000", "ops": "=="}, {"input": "volume_cube(100)", "output": "1000000", "ops": "=="}, {"input": "volume_cube(0)", "output": "0", "ops": "=="}, {"input": "volume_cube(6)", "output": "216", "ops": "=="}, {"input": "volume_cube(8)", "output": "512", "ops": "=="}, {"input": "volume_cube(10)", "output": "1000", "ops": "=="}, {"input": "volume_cube(8)", "output": "512", "ops": "=="}, {"input": "volume_cube(10)", "output": "1000", "ops": "=="}, {"input": "volume_cube(15)", "output": "3375", "ops": "=="}, {"input": "volume_cube(7)", "output": "343", "ops": "=="}, {"input": "volume_cube(105)", "output": "1157625", "ops": "=="}, {"input": "volume_cube(10)", "output": "1000", "ops": "=="}, {"input": "volume_cube(1000)", "output": "1000000000", "ops": "=="}, {"input": "volume_cube(10)", "output": "1000", "ops": "=="}, {"input": "print(volume_cube)", "output": "None", "ops": "=="}, {"input": "volume_cube(0)", "output": "0", "ops": "=="}], "282": [{"input": "validate(1)", "output": "True", "ops": "=="}, {"input": "validate(4)", "output": "True", "ops": "=="}, {"input": "validate(12)", "output": "True", "ops": "=="}, {"input": "validate(12)", "output": "True", "ops": "=="}, {"input": "validate(3)", "output": "True", "ops": "=="}, {"input": "validate(32121234512)", "output": "False", "ops": "=="}, {"input": "validate(21431)", "output": "False", "ops": "=="}, {"input": "validate('')", "output": "True", "ops": "=="}, {"input": "validate(42)", "output": "True", "ops": "=="}, {"input": "validate(124)", "output": "True", "ops": "=="}, {"input": "validate(123455555000000)", "output": "False", "ops": "=="}, {"input": "validate(12341234123421)", "output": "False", "ops": "=="}, {"input": "validate(1100)", "output": "False", "ops": "=="}, {"input": "validate(0)", "output": "True", "ops": "=="}], "308": [{"input": "maximum(10, 7)", "output": "10", "ops": "=="}, {"input": "maximum(9.342, 3.5)", "output": "9.342", "ops": "=="}, {"input": "maximum(10.5, 100.1)", "output": "100.1", "ops": "=="}, {"input": "maximum(9, -7)", "output": "9", "ops": "=="}, {"input": "maximum('c', 'a')", "output": "'c'", "ops": "=="}, {"input": "maximum(-float('inf'), 6)", "output": "6", "ops": "=="}, {"input": "maximum(float('inf'), -10)", "output": "inf", "ops": "=="}, {"input": "maximum(9.93, 7.881)", "output": "9.93", "ops": "=="}, {"input": "maximum(23, 0)", "output": "23", "ops": "=="}, {"input": "maximum(-1, 3)", "output": "3", "ops": "=="}, {"input": "maximum(7, 6)", "output": "7", "ops": "=="}, {"input": "maximum(-8, -5)", "output": "-5", "ops": "=="}], "353": [{"input": "tn_ap(8, 10, 15)", "output": "143", "ops": "=="}, {"input": "tn_ap(7, 4, 5)", "output": "22", "ops": "=="}, {"input": "tn_ap(40, 44, 24)", "output": "1072", "ops": "=="}, {"input": "tn_ap(3, 4, 7)", "output": "24", "ops": "=="}, {"input": "tn_ap(7, 4, 5)", "output": "22", "ops": "=="}, {"input": "tn_ap(6, 5, 7)", "output": "34", "ops": "=="}, {"input": "tn_ap(10000, 1, 1)", "output": "10000", "ops": "=="}, {"input": "tn_ap(6, 5, 1)", "output": "10", "ops": "=="}, {"input": "tn_ap(8, 9, 13)", "output": "112", "ops": "=="}, {"input": "tn_ap(1, 23, 33)", "output": "727", "ops": "=="}, {"input": "tn_ap(16, 36, 65)", "output": "2291", "ops": "=="}, {"input": "tn_ap(1, 67, 105)", "output": "6931", "ops": "=="}, {"input": "tn_ap(8, 64, 120)", "output": "7568", "ops": "=="}, {"input": "tn_ap(6, 7, 9)", "output": "60", "ops": "=="}, {"input": "tn_ap(3, 5, 6)", "output": "27", "ops": "=="}], "71": [{"input": "dif_Square(100)", "output": "True", "ops": "=="}, {"input": "dif_Square(25)", "output": "True", "ops": "=="}, {"input": "dif_Square(25)", "output": "True", "ops": "=="}, {"input": "dif_Square(20)", "output": "True", "ops": "=="}, {"input": "dif_Square(19)", "output": "True", "ops": "=="}, {"input": "dif_Square(20)", "output": "True", "ops": "=="}, {"input": "dif_Square(14)", "output": "False", "ops": "=="}, {"input": "dif_Square(17) == 2925139400143416395212170715747251", "output": "False", "ops": "=="}, {"input": "dif_Square(30)", "output": "False", "ops": "=="}, {"input": "dif_Square(20)", "output": "True", "ops": "=="}, {"input": "dif_Square(25)", "output": "True", "ops": "=="}], "403": [{"input": "minimum(30, 10)", "output": "10", "ops": "=="}, {"input": "minimum(100, 4)", "output": "4", "ops": "=="}, {"input": "minimum(18, -14)", "output": "-14", "ops": "=="}, {"input": "minimum(10000, 0)", "output": "0", "ops": "=="}, {"input": "minimum(-10000, -10000)", "output": "-10000", "ops": "=="}, {"input": "minimum(34, 24)", "output": "24", "ops": "=="}, {"input": "minimum(34, 231)", "output": "34", "ops": "=="}], "4": [{"input": "count_ways(24)", "output": "5757961", "ops": "=="}, {"input": "count_ways(3)", "output": "0", "ops": "=="}, {"input": "count_ways(4)", "output": "11", "ops": "=="}, {"input": "count_ways(25)", "output": "0", "ops": "=="}, {"input": "count_ways(6)", "output": "41", "ops": "=="}, {"input": "count_ways(24)", "output": "5757961", "ops": "=="}, {"input": "count_ways(16)", "output": "29681", "ops": "=="}, {"input": "count_ways(200)", "output": "1234960030599837928682339736709998512373739432964939784153", "ops": "=="}, {"input": "(count_ways(8) == 15 or count_ways(8) == 20)", "output": "False", "ops": "=="}, {"input": "count_ways(100)", "output": "31208688988045323113527764971", "ops": "=="}, {"input": "count_ways(8)**4", "output": "547981281", "ops": "=="}], "161": [{"input": "sum_series(0)", "output": "0", "ops": "=="}], "522": [{"input": "strlen(b'sdasa')", "output": "5", "ops": "=="}, {"input": "strlen(u'teste')", "output": "5", "ops": "=="}, {"input": "strlen(u'\u4f46\u4ee5\u9619\u8bf2\u7a0b\u5927\u53d1\u7eed\u53d1\u4f18\u8d2d\u8d4c\u594e\u4f17\u9041\u9986')", "output": "16", "ops": "=="}, {"input": "strlen(9*'ksjaerj3')", "output": "72", "ops": "=="}, {"input": "strlen('foo:bar')", "output": "7", "ops": "=="}, {"input": "strlen(b'x')", "output": "1", "ops": "=="}, {"input": "strlen(b'xxxxxxxx')", "output": "8", "ops": "=="}], "266": [{"input": "square_Sum(20)", "output": "10660", "ops": "=="}, {"input": "square_Sum(10000)", "output": "1333333330000", "ops": "=="}, {"input": "square_Sum(-5)", "output": "-165", "ops": "=="}, {"input": "square_Sum(5000000000000)", "output": "166666666666666662914683039093390049280", "ops": "=="}, {"input": "square_Sum(4.0)", "output": "84", "ops": "=="}, {"input": "square_Sum(5)", "output": "165", "ops": "=="}, {"input": "square_Sum(7)", "output": "455", "ops": "=="}, {"input": "square_Sum(20)", "output": "10660", "ops": "=="}, {"input": "square_Sum(10)", "output": "1330", "ops": "=="}, {"input": "square_Sum(10)", "output": "1330", "ops": "=="}, {"input": "square_Sum(100)", "output": "1333300", "ops": "=="}, {"input": "square_Sum(11)", "output": "1771", "ops": "=="}], "286": [{"input": "square_Sum(2.4)", "output": "31", "ops": "=="}, {"input": "square_Sum(25)", "output": "22100", "ops": "=="}, {"input": "square_Sum(100)", "output": "1353400", "ops": "=="}, {"input": "square_Sum(15)", "output": "4960", "ops": "=="}, {"input": "square_Sum(1000)", "output": "1335334000", "ops": "=="}, {"input": "square_Sum(6)", "output": "364", "ops": "=="}, {"input": "square_Sum(12)", "output": "2600", "ops": "=="}, {"input": "square_Sum(50)", "output": "171700", "ops": "=="}, {"input": "square_Sum(25)", "output": "22100", "ops": "=="}, {"input": "square_Sum(10)", "output": "1540", "ops": "=="}], "317": [{"input": "max_volume(12)", "output": "64", "ops": "=="}, {"input": "max_volume(99)", "output": "35937", "ops": "=="}], "384": [{"input": "get_perrin = 10", "output": "10", "ops": "=="}], "388": [{"input": "find_lucas(0)", "output": "2", "ops": "=="}], "288": [{"input": "odd_Days(24)", "output": "2", "ops": "=="}, {"input": "odd_Days(23)", "output": "0", "ops": "=="}, {"input": "odd_Days(22)", "output": "6", "ops": "=="}, {"input": "odd_Days(2)", "output": "2", "ops": "=="}, {"input": "odd_Days(3)", "output": "3", "ops": "=="}, {"input": "odd_Days(555)", "output": "3", "ops": "=="}, {"input": "odd_Days(30)", "output": "2", "ops": "=="}, {"input": "odd_Days(119)", "output": "0", "ops": "=="}, {"input": "odd_Days(2)", "output": "2", "ops": "=="}, {"input": "odd_Days(365)", "output": "5", "ops": "=="}, {"input": "odd_Days(3)", "output": "3", "ops": "=="}], "176": [{"input": "answer(1, 5)", "output": "(1, 2)", "ops": "=="}, {"input": "answer(12, 17)", "output": "-1", "ops": "=="}, {"input": "answer(1, 2)", "output": "(1, 2)", "ops": "=="}, {"input": "answer(1, 1)", "output": "-1", "ops": "=="}, {"input": "answer(0, 0)", "output": "(0, 0)", "ops": "=="}, {"input": "answer(9, 2)", "output": "-1", "ops": "=="}, {"input": "answer(2, 3)", "output": "-1", "ops": "=="}, {"input": "answer(8, 2)", "output": "-1", "ops": "=="}, {"input": "answer(3, 3)", "output": "-1", "ops": "=="}, {"input": "answer(0, 1)", "output": "(0, 0)", "ops": "=="}, {"input": "answer(3, 9)", "output": "(3, 6)", "ops": "=="}, {"input": "answer(0, 0)", "output": "(0, 0)", "ops": "=="}], "210": [{"input": "count_Num(9)", "output": "128", "ops": "=="}, {"input": "count_Num(333)", "output": "4374501449566023848745004454235242730706338861786424872851541212819905998398751846447026354046107648", "ops": "=="}, {"input": "count_Num(-1)", "output": "0.125", "ops": "=="}, {"input": "count_Num(10) ** 7", "output": "72057594037927936", "ops": "=="}, {"input": "count_Num(0)", "output": "0.25", "ops": "=="}, {"input": "count_Num(99+100)", "output": "200867255532373784442745261542645325315275374222849104412672", "ops": "=="}, {"input": "count_Num(0)", "output": "0.25", "ops": "=="}, {"input": "count_Num(22)", "output": "1048576", "ops": "=="}, {"input": "count_Num(23)", "output": "2097152", "ops": "=="}, {"input": "count_Num(30)", "output": "268435456", "ops": "=="}, {"input": "count_Num(-42)", "output": "5.684341886080802e-14", "ops": "=="}, {"input": "count_Num(-1000)", "output": "2.3331590462580472e-302", "ops": "=="}], "345": [{"input": "zigzag(1, 0)", "output": "0", "ops": "=="}], "359": [{"input": "get_carol(6)", "output": "3967", "ops": "=="}, {"input": "get_carol(6)", "output": "3967", "ops": "=="}, {"input": "get_carol(7999) == None", "output": "False", "ops": "=="}, {"input": "get_carol(10)", "output": "1046527", "ops": "=="}, {"input": "get_carol(6)", "output": "3967", "ops": "=="}, {"input": "get_carol(7)", "output": "16127", "ops": "=="}, {"input": "get_carol(-10000)", "output": "-1.0", "ops": "=="}, {"input": "get_carol(10)", "output": "1046527", "ops": "=="}, {"input": "get_carol(11)", "output": "4190207", "ops": "=="}, {"input": "get_carol(8)", "output": "65023", "ops": "=="}], "415": [{"input": "breakSum(32)", "output": "35", "ops": "=="}, {"input": "breakSum(11)", "output": "11", "ops": "=="}, {"input": "breakSum(48)", "output": "57", "ops": "=="}, {"input": "breakSum(26)", "output": "27", "ops": "=="}, {"input": "breakSum(994)", "output": "1370", "ops": "=="}, {"input": "breakSum(100)", "output": "120", "ops": "=="}, {"input": "breakSum(33)", "output": "36", "ops": "=="}, {"input": "breakSum(36)", "output": "41", "ops": "=="}, {"input": "breakSum(25)", "output": "27", "ops": "=="}, {"input": "breakSum(22)", "output": "23", "ops": "=="}, {"input": "breakSum(26)", "output": "27", "ops": "=="}, {"input": "breakSum(30)", "output": "32", "ops": "=="}, {"input": "breakSum(461565)", "output": "1082195", "ops": "=="}, {"input": "breakSum(25)", "output": "27", "ops": "=="}], "83": [{"input": "sequence(1)", "output": "1", "ops": "=="}], "92": [{"input": "power(5, 0)", "output": "1", "ops": "=="}], "125": [{"input": "sum(6, 42)", "output": "6", "ops": "=="}, {"input": "sum(6, 9)", "output": "4", "ops": "=="}, {"input": "sum(6, 10)", "output": "3", "ops": "=="}, {"input": "sum(10, -15)", "output": "0", "ops": "=="}, {"input": "sum(1, 6)", "output": "0", "ops": "=="}], "168": [{"input": "get_pell(29)", "output": "44560482149", "ops": "=="}, {"input": "get_pell(80)", "output": "1480845785007705294702019308528", "ops": "=="}, {"input": "get_pell(9)", "output": "985", "ops": "=="}, {"input": "get_pell(10)", "output": "2378", "ops": "=="}, {"input": "get_pell(11) >> 11", "output": "2", "ops": "=="}, {"input": "get_pell(11)", "output": "5741", "ops": "=="}, {"input": "get_pell(3)", "output": "5", "ops": "=="}, {"input": "get_pell(12)", "output": "13860", "ops": "=="}, {"input": "get_pell(-12)", "output": "-12", "ops": "=="}, {"input": "get_pell(8)**12", "output": "21277566527603448314936306958336", "ops": "=="}, {"input": "get_pell(282)", "output": "309883371058054256099440978596294213516777518757166802195151767036743405501171947074413439422637275033059290", "ops": "=="}, {"input": "get_pell(9)", "output": "985", "ops": "=="}, {"input": "get_pell(13)", "output": "33461", "ops": "=="}, {"input": "get_pell(19)", "output": "6625109", "ops": "=="}, {"input": "get_pell(10)", "output": "2378", "ops": "=="}, {"input": "get_pell(12)", "output": "13860", "ops": "=="}], "263": [{"input": "dog_age(61)", "output": "257", "ops": "=="}, {"input": "dog_age(25)", "output": "113", "ops": "=="}, {"input": "dog_age(26)", "output": "117", "ops": "=="}, {"input": "dog_age(39)", "output": "169", "ops": "=="}, {"input": "dog_age(50)", "output": "213", "ops": "=="}, {"input": "dog_age(42)", "output": "181", "ops": "=="}, {"input": "dog_age(25)", "output": "113", "ops": "=="}, {"input": "dog_age(345)", "output": "1393", "ops": "=="}, {"input": "dog_age(32)", "output": "141", "ops": "=="}, {"input": "dog_age(27)", "output": "121", "ops": "=="}, {"input": "dog_age(37)", "output": "161", "ops": "=="}, {"input": "dog_age(25)", "output": "113", "ops": "=="}], "419": [{"input": "cube_Sum(100)", "output": "204020000", "ops": "=="}, {"input": "cube_Sum(9)", "output": "16200", "ops": "=="}, {"input": "cube_Sum(0xFF)", "output": "8522956800", "ops": "=="}, {"input": "cube_Sum(0x100)", "output": "8657174528", "ops": "=="}, {"input": "cube_Sum(100)", "output": "204020000", "ops": "=="}, {"input": "cube_Sum(5)", "output": "1800", "ops": "=="}, {"input": "cube_Sum(23)", "output": "609408", "ops": "=="}, {"input": "cube_Sum(10)", "output": "24200", "ops": "=="}, {"input": "cube_Sum(-10)", "output": "0", "ops": "=="}, {"input": "cube_Sum(50)", "output": "13005000", "ops": "=="}, {"input": "cube_Sum(200)", "output": "3232080000", "ops": "=="}], "95": [{"input": "divisor(27)", "output": "4", "ops": "=="}, {"input": "divisor(25)", "output": "3", "ops": "=="}, {"input": "divisor(6)", "output": "4", "ops": "=="}, {"input": "divisor(8)", "output": "4", "ops": "=="}, {"input": "divisor(21)", "output": "4", "ops": "=="}, {"input": "divisor(32)", "output": "6", "ops": "=="}, {"input": "divisor(10)", "output": "4", "ops": "=="}, {"input": "divisor(11)", "output": "2", "ops": "=="}, {"input": "divisor(5)", "output": "2", "ops": "=="}, {"input": "divisor(18)", "output": "6", "ops": "=="}, {"input": "divisor(3)", "output": "2", "ops": "=="}, {"input": "divisor(7)", "output": "2", "ops": "=="}, {"input": "divisor(6)", "output": "4", "ops": "=="}, {"input": "divisor(4)", "output": "3", "ops": "=="}, {"input": "divisor(24)", "output": "8", "ops": "=="}, {"input": "divisor(23)", "output": "2", "ops": "=="}], "291": [{"input": "find(3, 6)", "output": "0", "ops": "=="}, {"input": "find(16, 7)", "output": "2", "ops": "=="}, {"input": "find(7, 1)", "output": "7", "ops": "=="}, {"input": "find(16, 10)", "output": "1", "ops": "=="}, {"input": "find(10, 10)", "output": "1", "ops": "=="}, {"input": "find(3, 18)", "output": "0", "ops": "=="}, {"input": "find(3, 18)", "output": "0", "ops": "=="}, {"input": "find(6, 6)", "output": "1", "ops": "=="}, {"input": "find(5, 3)", "output": "1", "ops": "=="}, {"input": "find(30, 2)", "output": "15", "ops": "=="}, {"input": "find(5, 20)", "output": "0", "ops": "=="}, {"input": "find(7, 9)", "output": "0", "ops": "=="}, {"input": "find(0, 10)", "output": "0", "ops": "=="}, {"input": "find(8, 1)", "output": "8", "ops": "=="}], "447": [{"input": "cal_sum(12) == 13 + 21 + 22", "output": "False", "ops": "=="}, {"input": "cal_sum(13)", "output": "156", "ops": "=="}, {"input": "cal_sum(13)", "output": "156", "ops": "=="}, {"input": "cal_sum(12)", "output": "117", "ops": "=="}, {"input": "cal_sum(13)", "output": "156", "ops": "=="}, {"input": "cal_sum(14)", "output": "207", "ops": "=="}, {"input": "cal_sum(15)", "output": "275", "ops": "=="}, {"input": "cal_sum(18)", "output": "642", "ops": "=="}, {"input": "cal_sum(21)", "output": "1495", "ops": "=="}, {"input": "cal_sum(12)", "output": "117", "ops": "=="}, {"input": "cal_sum(12)", "output": "117", "ops": "=="}, {"input": "cal_sum(12)", "output": "117", "ops": "=="}, {"input": "cal_sum(13)", "output": "156", "ops": "=="}, {"input": "cal_sum(14)", "output": "207", "ops": "=="}, {"input": "cal_sum(15)", "output": "275", "ops": "=="}, {"input": "cal_sum(16)", "output": "365", "ops": "=="}, {"input": "cal_sum(17)", "output": "484", "ops": "=="}, {"input": "cal_sum(18)", "output": "642", "ops": "=="}, {"input": "cal_sum(19)", "output": "851", "ops": "=="}, {"input": "cal_sum(20)", "output": "1128", "ops": "=="}, {"input": "cal_sum(21)", "output": "1495", "ops": "=="}, {"input": "cal_sum(22)", "output": "1981", "ops": "=="}, {"input": "cal_sum(23)", "output": "2625", "ops": "=="}, {"input": "cal_sum(24)", "output": "3478", "ops": "=="}, {"input": "cal_sum(362)", "output": "659623930782545381513275172684951539608912505", "ops": "=="}, {"input": "cal_sum(15)", "output": "275", "ops": "=="}, {"input": "cal_sum(12)", "output": "117", "ops": "=="}, {"input": "cal_sum(100)", "output": "6652110601405", "ops": "=="}, {"input": "cal_sum(100)", "output": "6652110601405", "ops": "=="}], "294": [{"input": "sum_div(9)", "output": "4", "ops": "=="}, {"input": "sum_div(14)", "output": "10", "ops": "=="}, {"input": "sum_div(6)", "output": "6", "ops": "=="}, {"input": "sum_div(17)", "output": "1", "ops": "=="}, {"input": "sum_div(17)", "output": "1", "ops": "=="}, {"input": "sum_div(10)", "output": "8", "ops": "=="}, {"input": "sum_div(5)", "output": "1", "ops": "=="}, {"input": "sum_div(9)", "output": "4", "ops": "=="}, {"input": "sum_div(3)", "output": "1", "ops": "=="}, {"input": "sum_div(4)", "output": "3", "ops": "=="}, {"input": "sum_div(6)", "output": "6", "ops": "=="}, {"input": "sum_div(14)", "output": "10", "ops": "=="}, {"input": "sum_div(1)", "output": "1", "ops": "=="}, {"input": "sum_div(5)", "output": "1", "ops": "=="}, {"input": "sum_div(2)", "output": "1", "ops": "=="}, {"input": "sum_div(6)", "output": "6", "ops": "=="}, {"input": "sum_div(1)", "output": "1", "ops": "=="}, {"input": "sum_div(495577)", "output": "26103", "ops": "=="}, {"input": "sum_div(14)", "output": "10", "ops": "=="}, {"input": "sum_div(0)", "output": "1", "ops": "=="}, {"input": "sum_div(21)", "output": "11", "ops": "=="}, {"input": "sum_div(6)", "output": "6", "ops": "=="}, {"input": "sum_div(37)", "output": "1", "ops": "=="}, {"input": "sum_div(63)", "output": "41", "ops": "=="}, {"input": "sum_div(18)", "output": "21", "ops": "=="}, {"input": "sum_div(32)", "output": "31", "ops": "=="}, {"input": "sum_div(3)", "output": "1", "ops": "=="}, {"input": "sum_div(30)", "output": "42", "ops": "=="}, {"input": "sum_div(14)", "output": "10", "ops": "=="}], "544": [{"input": "fib4(55)", "output": "694842876205932", "ops": "=="}, {"input": "fib4(20)", "output": "73552", "ops": "=="}, {"input": "fib4(6)", "output": "8", "ops": "=="}, {"input": "fib4(14)", "output": "1434", "ops": "=="}, {"input": "fib4(17)", "output": "10270", "ops": "=="}, {"input": "fib4(20)", "output": "73552", "ops": "=="}, {"input": "fib4(16)", "output": "5328", "ops": "=="}, {"input": "fib4(30)", "output": "52080824", "ops": "=="}, {"input": "fib4(18)", "output": "19796", "ops": "=="}, {"input": "fib4(20)", "output": "73552", "ops": "=="}, {"input": "fib4(30)", "output": "52080824", "ops": "=="}, {"input": "fib4(15)", "output": "2764", "ops": "=="}, {"input": "fib4(15)", "output": "2764", "ops": "=="}, {"input": "fib4(15)", "output": "2764", "ops": "=="}, {"input": "fib4(14)", "output": "1434", "ops": "=="}], "497": [{"input": "gcd(9, 4)", "output": "1", "ops": "=="}, {"input": "gcd(15, 4)", "output": "1", "ops": "=="}, {"input": "gcd(12, 1)", "output": "1", "ops": "=="}, {"input": "gcd(12 * 10**9, 7)", "output": "1", "ops": "=="}, {"input": "gcd(120000007, 7)", "output": "1", "ops": "=="}, {"input": "gcd(100, 7)", "output": "1", "ops": "=="}, {"input": "gcd(3, 12)", "output": "3", "ops": "=="}, {"input": "gcd(31, 2438)", "output": "1", "ops": "=="}, {"input": "gcd(7, 13)", "output": "1", "ops": "=="}, {"input": "gcd(20, 49)", "output": "1", "ops": "=="}, {"input": "gcd(2, 99)", "output": "1", "ops": "=="}, {"input": "gcd(12, 18)", "output": "6", "ops": "=="}, {"input": "gcd(12, 34)", "output": "2", "ops": "=="}, {"input": "gcd(16, 74)", "output": "2", "ops": "=="}], "601": [{"input": "f(4)", "output": "[1, 2, 6, 24]", "ops": "=="}, {"input": "f(6)", "output": "[1, 2, 6, 24, 15, 720]", "ops": "=="}, {"input": "f(2)", "output": "[1, 2]", "ops": "=="}, {"input": "f(-1)", "output": "[]", "ops": "=="}, {"input": "f(2)", "output": "[1, 2]", "ops": "=="}, {"input": "f(4)", "output": "[1, 2, 6, 24]", "ops": "=="}, {"input": "f(4)", "output": "[1, 2, 6, 24]", "ops": "=="}, {"input": "f(6)", "output": "[1, 2, 6, 24, 15, 720]", "ops": "=="}, {"input": "f(11)", "output": "[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66]", "ops": "=="}]}