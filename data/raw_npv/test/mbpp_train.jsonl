{"text": "Write a python function to find minimum sum of factors of a given number.", "code": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum", "task_id": 511, "test_setup_code": "", "test_list": ["assert find_Min_Sum(12) == 7", "assert find_Min_Sum(105) == 15", "assert find_Min_Sum(2) == 2"], "challenge_test_list": []}
{"text": "Write a function to count the element frequency in the mixed nested tuple.", "code": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) ", "task_id": 512, "test_setup_code": "", "test_list": ["assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}", "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}", "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"], "challenge_test_list": []}
{"text": "Write a function to convert tuple into list by adding the given string after every element.", "code": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) ", "task_id": 513, "test_setup_code": "", "test_list": ["assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']", "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']", "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"], "challenge_test_list": []}
{"text": "Write a function to find the summation of tuple elements in the given tuple list.", "code": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) ", "task_id": 514, "test_setup_code": "", "test_list": ["assert sum_elements((7, 8, 9, 1, 10, 7)) == 42", "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21", "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"], "challenge_test_list": []}
{"text": "Write a function to check if there is a subset with sum divisible by m.", "code": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]", "task_id": 515, "test_setup_code": "", "test_list": ["assert modular_sum([3, 1, 7, 5], 4, 6) == True", "assert modular_sum([1, 7], 2, 5) == False", "assert modular_sum([1, 6], 2, 5) == False"], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using radix sort.", "code": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums", "task_id": 516, "test_setup_code": "", "test_list": ["assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]", "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]", "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"], "challenge_test_list": []}
{"text": "Write a python function to find the largest postive number from the given list.", "code": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max", "task_id": 517, "test_setup_code": "", "test_list": ["assert largest_pos([1,2,3,4,-1]) == 4", "assert largest_pos([0,1,2,-5,-1,6]) == 6", "assert largest_pos([0,0,1,0]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the square root of a perfect number.", "code": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root ", "task_id": 518, "test_setup_code": "", "test_list": ["assert sqrt_root(4)==2", "assert sqrt_root(16)==4", "assert sqrt_root(400)==20"], "challenge_test_list": []}
{"text": "Write a function to calculate volume of a tetrahedron.", "code": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)", "task_id": 519, "test_setup_code": "", "test_list": ["assert volume_tetrahedron(10)==117.85", "assert volume_tetrahedron(15)==397.75", "assert volume_tetrahedron(20)==942.81"], "challenge_test_list": []}
{"text": "Write a function to find the lcm of the given array elements.", "code": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm ", "task_id": 520, "test_setup_code": "", "test_list": ["assert get_lcm([2, 7, 3, 9, 4]) == 252", "assert get_lcm([1, 2, 8, 3]) == 24", "assert get_lcm([3, 8, 4, 10, 5]) == 120"], "challenge_test_list": []}
{"text": "Write a function to print check if the triangle is scalene or not.", "code": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False", "task_id": 521, "test_setup_code": "", "test_list": ["assert check_isosceles(6,8,12)==True", "assert check_isosceles(6,6,12)==False", "assert check_isosceles(6,15,20)==True"], "challenge_test_list": []}
{"text": "Write a function to find the longest bitonic subsequence for the given array.", "code": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum", "task_id": 522, "test_setup_code": "", "test_list": ["assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7", "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6", "assert lbs([80, 60, 30, 40, 20, 10]) == 5"], "challenge_test_list": []}
{"text": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.", "code": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  ", "task_id": 523, "test_setup_code": "", "test_list": ["assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']", "assert check_string('123python')==['String must have 1 upper case character.']", "assert check_string('123Python')==['Valid string.']"], "challenge_test_list": []}
{"text": "Write a function to find the sum of maximum increasing subsequence of the given array.", "code": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max", "task_id": 524, "test_setup_code": "", "test_list": ["assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106", "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22", "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"], "challenge_test_list": []}
{"text": "Write a python function to check whether two given lines are parallel or not.", "code": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]", "task_id": 525, "test_setup_code": "", "test_list": ["assert parallel_lines([2,3,4], [2,3,8]) == True", "assert parallel_lines([2,3,4], [4,-3,8]) == False", "assert parallel_lines([3,3],[5,5]) == True"], "challenge_test_list": []}
{"text": "Write a python function to capitalize first and last letters of each word of a given string.", "code": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  ", "task_id": 526, "test_setup_code": "", "test_list": ["assert capitalize_first_last_letters(\"python\") == \"PythoN\"", "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"", "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""], "challenge_test_list": []}
{"text": "Write a function to find all pairs in an integer array whose sum is equal to a given number.", "code": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count", "task_id": 527, "test_setup_code": "", "test_list": ["assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3", "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2", "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with minimum length.", "code": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     ", "task_id": 528, "test_setup_code": "", "test_list": ["assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])", "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])", "assert min_length([[5], [15,20,25]])==(1, [5])"], "challenge_test_list": []}
{"text": "Write a function to find the nth jacobsthal-lucas number.", "code": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]", "task_id": 529, "test_setup_code": "", "test_list": ["assert jacobsthal_lucas(5) == 31", "assert jacobsthal_lucas(2) == 5", "assert jacobsthal_lucas(4) == 17"], "challenge_test_list": []}
{"text": "Write a function to find the ration of negative numbers in an array of integers.", "code": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "task_id": 530, "test_setup_code": "", "test_list": ["assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31", "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31", "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"], "challenge_test_list": []}
{"text": "Write a function to find minimum number of coins that make a given value.", "code": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res ", "task_id": 531, "test_setup_code": "", "test_list": ["assert min_coins([9, 6, 5, 1] ,4,11)==2", "assert min_coins([4,5,6,7,8,9],6,9)==1", "assert min_coins([1, 2, 3],3,4)==2"], "challenge_test_list": []}
{"text": "Write a function to check if the two given strings are permutations of each other.", "code": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True", "task_id": 532, "test_setup_code": "", "test_list": ["assert check_permutation(\"abc\", \"cba\") == True", "assert check_permutation(\"test\", \"ttew\") == False", "assert check_permutation(\"xxyz\", \"yxzx\") == True"], "challenge_test_list": []}
{"text": "Write a function to remove particular data type elements from the given tuple.", "code": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) ", "task_id": 533, "test_setup_code": "", "test_list": ["assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]", "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]", "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"], "challenge_test_list": []}
{"text": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.", "code": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)", "task_id": 534, "test_setup_code": "", "test_list": ["assert search_literal('python','python programming language')==(0,6)", "assert search_literal('programming','python programming language')==(7,18)", "assert search_literal('language','python programming language')==(19,27)"], "challenge_test_list": []}
{"text": "Write a function to find the top or bottom surface area of a cylinder.", "code": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea", "task_id": 535, "test_setup_code": "", "test_list": ["assert topbottom_surfacearea(10)==314.15000000000003", "assert topbottom_surfacearea(5)==78.53750000000001", "assert topbottom_surfacearea(4)==50.264"], "challenge_test_list": []}
{"text": "Write a function to select the nth items of a list.", "code": "def nth_items(list,n):\r\n return list[::n]", "task_id": 536, "test_setup_code": "", "test_list": ["assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ", "assert nth_items([10,15,19,17,16,18],3)==[10,17] ", "assert nth_items([14,16,19,15,17],4)==[14,17]"], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated word in a given string.", "code": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'", "task_id": 537, "test_setup_code": "", "test_list": ["assert first_repeated_word(\"ab ca bc ab\") == \"ab\"", "assert first_repeated_word(\"ab ca bc\") == 'None'", "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""], "challenge_test_list": []}
{"text": "Write a python function to convert a given string list to a tuple.", "code": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result", "task_id": 538, "test_setup_code": "", "test_list": ["assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')", "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"], "challenge_test_list": []}
{"text": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.", "code": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result", "task_id": 539, "test_setup_code": "", "test_list": ["assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]", "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]", "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"], "challenge_test_list": []}
{"text": "Write a python function to find the difference between highest and least frequencies in a given array.", "code": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count ", "task_id": 540, "test_setup_code": "", "test_list": ["assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2", "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3", "assert find_Diff([1,2,1,2],4) == 0"], "challenge_test_list": []}
{"text": "Write a function to find if the given number is abundant or not.", "code": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False", "task_id": 541, "test_setup_code": "", "test_list": ["assert check_abundant(12) == True", "assert check_abundant(15) == False", "assert check_abundant(18) == True"], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.", "code": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))", "task_id": 542, "test_setup_code": "", "test_list": ["assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'", "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'", "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"], "challenge_test_list": []}
{"text": "Write a function to add two numbers and print number of digits of sum.", "code": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count", "task_id": 543, "test_setup_code": "", "test_list": ["assert count_digits(9875,10)==(4)", "assert count_digits(98759853034,100)==(11)", "assert count_digits(1234567,500)==(7)"], "challenge_test_list": []}
{"text": "Write a function to flatten the tuple list to a string.", "code": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) ", "task_id": 544, "test_setup_code": "", "test_list": ["assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'", "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'", "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"], "challenge_test_list": []}
{"text": "Write a python function to toggle only first and last bits of a given number.", "code": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) ", "task_id": 545, "test_setup_code": "", "test_list": ["assert toggle_F_and_L_bits(10) == 3", "assert toggle_F_and_L_bits(15) == 6", "assert toggle_F_and_L_bits(20) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the last occurrence of a character in a string.", "code": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1", "task_id": 546, "test_setup_code": "", "test_list": ["assert last_occurence_char(\"hello world\",'l')==10", "assert last_occurence_char(\"language\",'g')==7", "assert last_occurence_char(\"little\",'y')==None"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.", "code": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum", "task_id": 547, "test_setup_code": "", "test_list": ["assert Total_Hamming_Distance(4) == 7", "assert Total_Hamming_Distance(2) == 3", "assert Total_Hamming_Distance(5) == 8"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence of the given sequence.", "code": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum", "task_id": 548, "test_setup_code": "", "test_list": ["assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5", "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3", "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fifth power of first n odd natural numbers.", "code": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm ", "task_id": 549, "test_setup_code": "", "test_list": ["assert odd_Num_Sum(1) == 1", "assert odd_Num_Sum(2) == 244", "assert odd_Num_Sum(3) == 3369"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in a sorted and rotated array.", "code": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) ", "task_id": 550, "test_setup_code": "", "test_list": ["assert find_Max([2,3,5,6,9],0,4) == 9", "assert find_Max([3,4,5,2,1],0,4) == 5", "assert find_Max([1,2,3],0,2) == 3"], "challenge_test_list": []}
{"text": "Write a function to extract a specified column from a given nested list.", "code": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result ", "task_id": 551, "test_setup_code": "", "test_list": ["assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]", "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]", "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"], "challenge_test_list": []}
{"text": "Write a python function to check whether a given sequence is linear or not.", "code": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\"", "task_id": 552, "test_setup_code": "", "test_list": ["assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"", "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"", "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""], "challenge_test_list": []}
{"text": "Write a function to convert the given tuple to a floating-point number.", "code": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) ", "task_id": 553, "test_setup_code": "", "test_list": ["assert tuple_to_float((4, 56)) == 4.56", "assert tuple_to_float((7, 256)) == 7.256", "assert tuple_to_float((8, 123)) == 8.123"], "challenge_test_list": []}
{"text": "Write a python function to find odd numbers from a mixed list.", "code": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li", "task_id": 554, "test_setup_code": "", "test_list": ["assert Split([1,2,3,4,5,6]) == [1,3,5]", "assert Split([10,11,12,13]) == [11,13]", "assert Split([7,8,9,1]) == [7,9,1]"], "challenge_test_list": []}
{"text": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.", "code": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  ", "task_id": 555, "test_setup_code": "", "test_list": ["assert difference(3) == 30", "assert difference(5) == 210", "assert difference(2) == 6"], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with xor as an odd number.", "code": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  ", "task_id": 556, "test_setup_code": "", "test_list": ["assert find_Odd_Pair([5,4,7,2,1],5) == 6", "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12", "assert find_Odd_Pair([1,2,3],3) == 2"], "challenge_test_list": []}
{"text": "Write a function to toggle characters case in a string.", "code": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1", "task_id": 557, "test_setup_code": "", "test_list": ["assert toggle_string(\"Python\")==(\"pYTHON\")", "assert toggle_string(\"Pangram\")==(\"pANGRAM\")", "assert toggle_string(\"LIttLE\")==(\"liTTle\")"], "challenge_test_list": []}
{"text": "Write a python function to find the digit distance between two integers.", "code": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))", "task_id": 558, "test_setup_code": "", "test_list": ["assert digit_distance_nums(1,2) == 1", "assert digit_distance_nums(23,56) == 6", "assert digit_distance_nums(123,256) == 7"], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the given array.", "code": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far", "task_id": 559, "test_setup_code": "", "test_list": ["assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7", "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8", "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the union of elements of the given tuples.", "code": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) ", "task_id": 560, "test_setup_code": "", "test_list": ["assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)", "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)", "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"], "challenge_test_list": []}
{"text": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.", "code": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) ", "task_id": 561, "test_setup_code": "", "test_list": ["assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}", "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}", "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum length of sublist.", "code": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength ", "task_id": 562, "test_setup_code": "", "test_list": ["assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4", "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3", "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"], "challenge_test_list": []}
{"text": "Write a function to extract values between quotation marks of a string.", "code": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))", "task_id": 563, "test_setup_code": "", "test_list": ["assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']", "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']", "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"], "challenge_test_list": []}
{"text": "Write a python function to count unequal element pairs from the given array.", "code": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; ", "task_id": 564, "test_setup_code": "", "test_list": ["assert count_Pairs([1,2,1],3) == 2", "assert count_Pairs([1,1,1,1],4) == 0", "assert count_Pairs([1,2,3,4,5],5) == 10"], "challenge_test_list": []}
{"text": "Write a python function to split a string into characters.", "code": "def split(word): \r\n    return [char for char in word] ", "task_id": 565, "test_setup_code": "", "test_list": ["assert split('python') == ['p','y','t','h','o','n']", "assert split('Name') == ['N','a','m','e']", "assert split('program') == ['p','r','o','g','r','a','m']"], "challenge_test_list": []}
{"text": "Write a function to get the sum of a non-negative integer.", "code": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))", "task_id": 566, "test_setup_code": "", "test_list": ["assert sum_digits(345)==12", "assert sum_digits(12)==3", "assert sum_digits(97)==16"], "challenge_test_list": []}
{"text": "Write a function to check whether a specified list is sorted or not.", "code": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result", "task_id": 567, "test_setup_code": "", "test_list": ["assert issort_list([1,2,4,6,8,10,12,14,16,17])==True", "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False", "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"], "challenge_test_list": []}
{"text": "Write a function to create a list of empty dictionaries.", "code": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list", "task_id": 568, "test_setup_code": "", "test_list": ["assert empty_list(5)==[{},{},{},{},{}]", "assert empty_list(6)==[{},{},{},{},{},{}]", "assert empty_list(7)==[{},{},{},{},{},{},{}]"], "challenge_test_list": []}
{"text": "Write a function to sort each sublist of strings in a given list of lists.", "code": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result", "task_id": 569, "test_setup_code": "", "test_list": ["assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]", "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"], "challenge_test_list": []}
{"text": "Write a function to remove words from a given list of strings containing a character or string.", "code": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list", "task_id": 570, "test_setup_code": "", "test_list": ["assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']", "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']", "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"], "challenge_test_list": []}
{"text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.", "code": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]", "task_id": 571, "test_setup_code": "", "test_list": ["assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62", "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25", "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"], "challenge_test_list": []}
{"text": "Write a python function to remove two duplicate numbers from a given number of lists.", "code": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]", "task_id": 572, "test_setup_code": "", "test_list": ["assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]", "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a python function to calculate the product of the unique numbers of a given list.", "code": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p", "task_id": 573, "test_setup_code": "", "test_list": ["assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000", "assert unique_product([1, 2, 3, 1,]) == 6", "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder.", "code": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea", "task_id": 574, "test_setup_code": "", "test_list": ["assert surfacearea_cylinder(10,5)==942.45", "assert surfacearea_cylinder(4,5)==226.18800000000002", "assert surfacearea_cylinder(4,10)==351.848"], "challenge_test_list": []}
{"text": "Write a python function to find nth number in a sequence which is not a multiple of a given number.", "code": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) ", "task_id": 575, "test_setup_code": "", "test_list": ["assert count_no(2,3,1,10) == 5", "assert count_no(3,6,4,20) == 11", "assert count_no(5,10,4,20) == 16"], "challenge_test_list": []}
{"text": "Write a python function to check whether an array is subarray of another or not.", "code": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; ", "task_id": 576, "test_setup_code": "", "test_list": ["assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False", "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True", "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"], "challenge_test_list": []}
{"text": "Write a python function to find the last digit in factorial of a given number.", "code": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0", "task_id": 577, "test_setup_code": "", "test_list": ["assert last_Digit_Factorial(4) == 4", "assert last_Digit_Factorial(21) == 0", "assert last_Digit_Factorial(30) == 0"], "challenge_test_list": []}
{"text": "Write a function to interleave lists of the same length.", "code": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result", "task_id": 578, "test_setup_code": "", "test_list": ["assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]", "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]", "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"], "challenge_test_list": []}
{"text": "Write a function to find the dissimilar elements in the given two tuples.", "code": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) ", "task_id": 579, "test_setup_code": "", "test_list": ["assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)", "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)", "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"], "challenge_test_list": []}
{"text": "Write a function to extract the even elements in the nested mixed tuple.", "code": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) ", "task_id": 580, "test_setup_code": "", "test_list": ["assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)", "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))", "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of the square pyramid.", "code": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) ", "task_id": 581, "test_setup_code": "", "test_list": ["assert surface_Area(3,4) == 33", "assert surface_Area(4,5) == 56", "assert surface_Area(1,2) == 5"], "challenge_test_list": []}
{"text": "Write a function to check if a dictionary is empty or not.", "code": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True", "task_id": 582, "test_setup_code": "", "test_list": ["assert my_dict({10})==False", "assert my_dict({11})==False", "assert my_dict({})==True"], "challenge_test_list": []}
{"text": "Write a function for nth catalan number.", "code": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num", "task_id": 583, "test_setup_code": "", "test_list": ["assert catalan_number(10)==16796", "assert catalan_number(9)==4862", "assert catalan_number(7)==429"], "challenge_test_list": []}
{"text": "Write a function to find all adverbs and their positions in a given sentence by using regex.", "code": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))", "task_id": 584, "test_setup_code": "", "test_list": ["assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'", "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'", "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"], "challenge_test_list": []}
{"text": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.", "code": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items", "task_id": 585, "test_setup_code": "", "test_list": ["assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]", "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]", "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"], "challenge_test_list": []}
{"text": "Write a python function to split the array and add the first part to the end.", "code": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) ", "task_id": 586, "test_setup_code": "", "test_list": ["assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]", "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]", "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"], "challenge_test_list": []}
{"text": "Write a function to convert a list to a tuple.", "code": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex", "task_id": 587, "test_setup_code": "", "test_list": ["assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)", "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)", "assert list_tuple([58,44,56])==(58,44,56)"], "challenge_test_list": []}
{"text": "Write a python function to find the difference between largest and smallest value in a given array.", "code": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff", "task_id": 588, "test_setup_code": "", "test_list": ["assert big_diff([1,2,3,4]) == 3", "assert big_diff([4,5,12]) == 8", "assert big_diff([9,2,3]) == 7"], "challenge_test_list": []}
{"text": "Write a function to find perfect squares between two given numbers.", "code": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists", "task_id": 589, "test_setup_code": "", "test_list": ["assert perfect_squares(1,30)==[1, 4, 9, 16, 25]", "assert perfect_squares(50,100)==[64, 81, 100]", "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"], "challenge_test_list": []}
{"text": "Write a function to convert polar coordinates to rectangular coordinates.", "code": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)", "task_id": 590, "test_setup_code": "", "test_list": ["assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))", "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))", "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"], "challenge_test_list": []}
{"text": "Write a python function to interchange the first and last elements in a list.", "code": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList ", "task_id": 591, "test_setup_code": "", "test_list": ["assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]", "assert swap_List([1, 2, 3]) == [3, 2, 1]", "assert swap_List([4, 5, 6]) == [6, 5, 4]"], "challenge_test_list": []}
{"text": "Write a python function to find sum of product of binomial co-efficients.", "code": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); ", "task_id": 592, "test_setup_code": "", "test_list": ["assert sum_Of_product(3) == 15", "assert sum_Of_product(4) == 56", "assert sum_Of_product(1) == 1"], "challenge_test_list": []}
{"text": "Write a function to remove leading zeroes from an ip address.", "code": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r", "task_id": 593, "test_setup_code": "", "test_list": ["assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ", "assert removezero_ip(\"12.01.024\")==('12.1.24') ", "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "], "challenge_test_list": []}
{"text": "Write a function to find the difference of first even and odd number of a given list.", "code": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)", "task_id": 594, "test_setup_code": "", "test_list": ["assert diff_even_odd([1,3,5,7,4,1,6,8])==3", "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1", "assert diff_even_odd([1,5,7,9,10])==9"], "challenge_test_list": []}
{"text": "Write a python function to count minimum number of swaps required to convert one binary string to another.", "code": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ", "task_id": 595, "test_setup_code": "", "test_list": ["assert min_Swaps(\"1101\",\"1110\") == 1", "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"", "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""], "challenge_test_list": []}
{"text": "Write a function to find the size of the given tuple.", "code": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) ", "task_id": 596, "test_setup_code": "", "test_list": ["assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == 104", "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == 104", "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == 88"], "challenge_test_list": []}
{"text": "Write a function to find kth element from the given two sorted arrays.", "code": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]", "task_id": 597, "test_setup_code": "", "test_list": ["assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6", "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256", "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is armstrong or not.", "code": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False", "task_id": 598, "test_setup_code": "", "test_list": ["assert armstrong_number(153)==True", "assert armstrong_number(259)==False", "assert armstrong_number(4458)==False"], "challenge_test_list": []}
{"text": "Write a function to find sum and average of first n natural numbers.", "code": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)", "task_id": 599, "test_setup_code": "", "test_list": ["assert sum_average(10)==(55, 5.5)", "assert sum_average(15)==(120, 8.0)", "assert sum_average(20)==(210, 10.5)"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is even or not using bitwise operator.", "code": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; ", "task_id": 600, "test_setup_code": "", "test_list": ["assert is_Even(1) == False", "assert is_Even(2) == True", "assert is_Even(3) == False"], "challenge_test_list": []}
{"text": "Write a function to find the longest chain which can be formed from the given set of pairs.", "code": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max", "task_id": 601, "test_setup_code": "", "test_list": ["assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3", "assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4", "assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5"], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated character in a given string.", "code": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\"", "task_id": 602, "test_setup_code": "", "test_list": ["assert first_repeated_char(\"abcabc\") == \"a\"", "assert first_repeated_char(\"abc\") == \"None\"", "assert first_repeated_char(\"123123\") == \"1\""], "challenge_test_list": []}
{"text": "Write a function to get a lucid number smaller than or equal to n.", "code": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics", "task_id": 603, "test_setup_code": "", "test_list": ["assert get_ludic(10) == [1, 2, 3, 5, 7]", "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]", "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"], "challenge_test_list": []}
{"text": "Write a function to reverse words in a given string.", "code": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))", "task_id": 604, "test_setup_code": "", "test_list": ["assert reverse_words(\"python program\")==(\"program python\")", "assert reverse_words(\"java language\")==(\"language java\")", "assert reverse_words(\"indian man\")==(\"man indian\")"], "challenge_test_list": []}
{"text": "Write a function to check if the given integer is a prime number.", "code": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False", "task_id": 605, "test_setup_code": "", "test_list": ["assert prime_num(13)==True", "assert prime_num(7)==True", "assert prime_num(-1010)==False"], "challenge_test_list": []}
{"text": "Write a function to convert degrees to radians.", "code": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian", "task_id": 606, "test_setup_code": "", "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953"], "challenge_test_list": []}
{"text": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "code": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)", "task_id": 607, "test_setup_code": "", "test_list": ["assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)", "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)", "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"], "challenge_test_list": []}
{"text": "Write a python function to find nth bell number.", "code": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] ", "task_id": 608, "test_setup_code": "", "test_list": ["assert bell_Number(2) == 2", "assert bell_Number(3) == 5", "assert bell_Number(4) == 15"], "challenge_test_list": []}
{"text": "Write a python function to find minimum possible value for the given periodic function.", "code": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B", "task_id": 609, "test_setup_code": "", "test_list": ["assert floor_Min(10,20,30) == 15", "assert floor_Min(1,2,1) == 0", "assert floor_Min(11,10,9) == 9"], "challenge_test_list": []}
{"text": "Write a python function to remove the k'th element from a given list.", "code": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]", "task_id": 610, "test_setup_code": "", "test_list": ["assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]", "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]", "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"], "challenge_test_list": []}
{"text": "Write a function to find the maximum of nth column from the given tuple list.", "code": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) ", "task_id": 611, "test_setup_code": "", "test_list": ["assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19", "assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10", "assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11"], "challenge_test_list": []}
{"text": "Write a python function to merge the first and last elements separately in a list of lists.", "code": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] ", "task_id": 612, "test_setup_code": "", "test_list": ["assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]", "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]", "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"], "challenge_test_list": []}
{"text": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "code": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) ", "task_id": 613, "test_setup_code": "", "test_list": ["assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]", "assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]", "assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]"], "challenge_test_list": []}
{"text": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "code": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)", "task_id": 614, "test_setup_code": "", "test_list": ["assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30", "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37", "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"], "challenge_test_list": []}
{"text": "Write a function to find average value of the numbers in a given tuple of tuples.", "code": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result", "task_id": 615, "test_setup_code": "", "test_list": ["assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]", "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]", "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"], "challenge_test_list": []}
{"text": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "code": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) ", "task_id": 616, "test_setup_code": "", "test_list": ["assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)", "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)", "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"], "challenge_test_list": []}
{"text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "code": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2", "task_id": 617, "test_setup_code": "", "test_list": ["assert min_Jumps(3,4,11)==3.5", "assert min_Jumps(3,4,0)==0", "assert min_Jumps(11,14,11)==1"], "challenge_test_list": []}
{"text": "Write a function to divide two lists using map and lambda function.", "code": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)", "task_id": 618, "test_setup_code": "", "test_list": ["assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]", "assert div_list([3,2],[1,4])==[3.0, 0.5]", "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"], "challenge_test_list": []}
{"text": "Write a function to move all the numbers in it to the given string.", "code": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) ", "task_id": 619, "test_setup_code": "", "test_list": ["assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'", "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'", "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"], "challenge_test_list": []}
{"text": "Write a function to find the largest subset where each pair is divisible.", "code": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)", "task_id": 620, "test_setup_code": "", "test_list": ["assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4", "assert largest_subset([10, 5, 3, 15, 20], 5) == 3", "assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4"], "challenge_test_list": []}
{"text": "Write a function to increment the numeric values in the given strings by k.", "code": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res ", "task_id": 621, "test_setup_code": "", "test_list": ["assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']", "assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']", "assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"], "challenge_test_list": []}
{"text": "Write a function to find the median of two sorted arrays of same size.", "code": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2", "task_id": 622, "test_setup_code": "", "test_list": ["assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0", "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5", "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"], "challenge_test_list": []}
{"text": "Write a function to find the n-th power of individual elements in a list using lambda function.", "code": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums", "task_id": 623, "test_setup_code": "", "test_list": ["assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])", "assert nth_nums([12,15],5)==([248832, 759375])"], "challenge_test_list": []}
{"text": "Write a python function to convert the given string to upper case.", "code": "def is_upper(string):\r\n  return (string.upper())", "task_id": 624, "test_setup_code": "", "test_list": ["assert is_upper(\"person\") ==\"PERSON\"", "assert is_upper(\"final\") == \"FINAL\"", "assert is_upper(\"Valid\") == \"VALID\""], "challenge_test_list": []}
{"text": "Write a python function to interchange first and last elements in a given list.", "code": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList ", "task_id": 625, "test_setup_code": "", "test_list": ["assert swap_List([1,2,3]) == [3,2,1]", "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]", "assert swap_List([4,5,6]) == [6,5,4]"], "challenge_test_list": []}
{"text": "Write a python function to find the largest triangle that can be inscribed in the semicircle.", "code": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r ", "task_id": 626, "test_setup_code": "", "test_list": ["assert triangle_area(0) == 0", "assert triangle_area(-1) == -1", "assert triangle_area(2) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest missing number from the given array.", "code": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) ", "task_id": 627, "test_setup_code": "", "test_list": ["assert find_First_Missing([0,1,2,3],0,3) == 4", "assert find_First_Missing([0,1,2,6,9],0,4) == 3", "assert find_First_Missing([2,3,5,8,9],0,4) == 0"], "challenge_test_list": []}
{"text": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "code": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)", "task_id": 628, "test_setup_code": "", "test_list": ["assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'", "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'", "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"], "challenge_test_list": []}
{"text": "Write a python function to find even numbers from a mixed list.", "code": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li", "task_id": 629, "test_setup_code": "", "test_list": ["assert Split([1,2,3,4,5]) == [2,4]", "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]", "assert Split ([8,12,15,19]) == [8,12]"], "challenge_test_list": []}
{"text": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "code": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) ", "task_id": 630, "test_setup_code": "", "test_list": ["assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"], "challenge_test_list": []}
{"text": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "code": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)", "task_id": 631, "test_setup_code": "", "test_list": ["assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'", "assert replace_spaces('The Avengers') == 'The_Avengers'", "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"], "challenge_test_list": []}
{"text": "Write a python function to move all zeroes to the end of the given list.", "code": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)", "task_id": 632, "test_setup_code": "", "test_list": ["assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]", "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]", "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of xor of all pairs of numbers in the given array.", "code": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans ", "task_id": 633, "test_setup_code": "", "test_list": ["assert pair_OR_Sum([5,9,7,6],4) == 47", "assert pair_OR_Sum([7,3,5],3) == 12", "assert pair_OR_Sum([7,3],2) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fourth power of first n even natural numbers.", "code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; ", "task_id": 634, "test_setup_code": "", "test_list": ["assert even_Power_Sum(2) == 272", "assert even_Power_Sum(3) == 1568", "assert even_Power_Sum(4) == 5664"], "challenge_test_list": []}
{"text": "Write a function to push all values into a heap and then pop off the smallest values one at a time.", "code": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]", "task_id": 635, "test_setup_code": "", "test_list": ["assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]", "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"], "challenge_test_list": []}
{"text": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.", "code": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "task_id": 636, "test_setup_code": "", "test_list": ["assert Check_Solution(2,0,2) == \"Yes\"", "assert Check_Solution(2,-5,2) == \"Yes\"", "assert Check_Solution(1,2,3) == \"No\""], "challenge_test_list": []}
{"text": "Write a function to check whether the given amount has no profit and no loss", "code": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False", "task_id": 637, "test_setup_code": "", "test_list": ["assert noprofit_noloss(1500,1200)==False", "assert noprofit_noloss(100,100)==True", "assert noprofit_noloss(2000,5000)==False"], "challenge_test_list": []}
{"text": "Write a function to calculate wind chill index.", "code": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))", "task_id": 638, "test_setup_code": "", "test_list": ["assert wind_chill(120,35)==40", "assert wind_chill(40,70)==86", "assert wind_chill(10,100)==116"], "challenge_test_list": []}
{"text": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "code": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))", "task_id": 639, "test_setup_code": "", "test_list": ["assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16", "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10", "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"], "challenge_test_list": []}
{"text": "Write a function to remove the parenthesis area in a string.", "code": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "task_id": 640, "test_setup_code": "", "test_list": ["assert remove_parenthesis([\"python (chrome)\"])==(\"python\")", "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")", "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"], "challenge_test_list": []}
{"text": "Write a function to find the nth nonagonal number.", "code": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) ", "task_id": 641, "test_setup_code": "", "test_list": ["assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(18) == 1089"], "challenge_test_list": []}
{"text": "Write a function to remove similar rows from the given tuple matrix.", "code": "def remove_similar_row(test_list):\r\n  res = set([tuple(set(sub)) for sub in test_list])\r\n  return (res) ", "task_id": 642, "test_setup_code": "", "test_list": ["assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((4, 6), (2, 2)), ((4, 5), (3, 2))}", "assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((5, 6), (4, 3)), ((5, 7), (3, 3))}", "assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((5, 4), (6, 7)), ((4, 4), (6, 8))}"], "challenge_test_list": []}
{"text": "Write a function that matches a word containing 'z', not at the start or end of the word.", "code": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "task_id": 643, "test_setup_code": "", "test_list": ["assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')", "assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')", "assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')"], "challenge_test_list": []}
{"text": "Write a python function to reverse an array upto a given position.", "code": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) ", "task_id": 644, "test_setup_code": "", "test_list": ["assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]", "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]", "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"], "challenge_test_list": []}
{"text": "Write a function to find the product of it\u2019s kth index in the given tuples.", "code": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) ", "task_id": 645, "test_setup_code": "", "test_list": ["assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665", "assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280", "assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210"], "challenge_test_list": []}
{"text": "Write a python function to count number of cubes of size k in a cube of size n.", "code": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No", "task_id": 646, "test_setup_code": "", "test_list": ["assert No_of_cubes(2,1) == 8", "assert No_of_cubes(5,2) == 64", "assert No_of_cubes(1,1) == 1"], "challenge_test_list": []}
{"text": "Write a function to split a string at uppercase letters.", "code": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))", "task_id": 647, "test_setup_code": "", "test_list": ["assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']", "assert split_upperstring(\"PythonProgram\")==['Python','Program']", "assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']"], "challenge_test_list": []}
{"text": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.", "code": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))", "task_id": 648, "test_setup_code": "", "test_list": ["assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] ", "assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] ", "assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] "], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.", "code": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "task_id": 649, "test_setup_code": "", "test_list": ["assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29", "assert sum_Range_list([1,2,3,4,5],1,2) == 5", "assert sum_Range_list([1,0,1,2,5,6],4,5) == 11"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given two arrays are equal or not.", "code": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True", "task_id": 650, "test_setup_code": "", "test_list": ["assert are_Equal([1,2,3],[3,2,1],3,3) == True", "assert are_Equal([1,1,1],[2,2,2],3,3) == False", "assert are_Equal([8,9],[4,5,6],2,3) == False"], "challenge_test_list": []}
{"text": "Write a function to check if one tuple is a subset of another tuple.", "code": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) ", "task_id": 651, "test_setup_code": "", "test_list": ["assert check_subset((10, 4, 5, 6), (5, 10)) == True", "assert check_subset((1, 2, 3, 4), (5, 6)) == False", "assert check_subset((7, 8, 9, 10), (10, 8)) == True"], "challenge_test_list": []}
{"text": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "code": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))", "task_id": 652, "test_setup_code": "", "test_list": ["assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'", "assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'", "assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'"], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.", "code": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d", "task_id": 653, "test_setup_code": "", "test_list": ["assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})", "assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})", "assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter", "task_id": 654, "test_setup_code": "", "test_list": ["assert rectangle_perimeter(10,20)==60", "assert rectangle_perimeter(10,5)==30", "assert rectangle_perimeter(4,2)==12"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fifth power of n natural numbers.", "code": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm ", "task_id": 655, "test_setup_code": "", "test_list": ["assert fifth_Power_Sum(2) == 33", "assert fifth_Power_Sum(4) == 1300", "assert fifth_Power_Sum(3) == 276"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum sum of absolute differences of two arrays.", "code": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum", "task_id": 656, "test_setup_code": "", "test_list": ["assert find_Min_Sum([3,2,1],[2,1,3],3) == 0", "assert find_Min_Sum([1,2,3],[4,5,6],3) == 9", "assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6"], "challenge_test_list": []}
{"text": "Write a python function to find the first digit in factorial of a given number.", "code": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) ", "task_id": 657, "test_setup_code": "", "test_list": ["assert first_Digit(5) == 1", "assert first_Digit(10) == 3", "assert first_Digit(7) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the item with maximum occurrences in a given list.", "code": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "task_id": 658, "test_setup_code": "", "test_list": ["assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2", "assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1", "assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1"], "challenge_test_list": []}
{"text": "Write a python function to print duplicants from a list of integers.", "code": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated ", "task_id": 659, "test_setup_code": "", "test_list": ["assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]", "assert Repeat([-1, 1, -1, 8]) == [-1]", "assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]"], "challenge_test_list": []}
{"text": "Write a python function to choose points from two ranges such that no point lies in both the ranges.", "code": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)", "task_id": 660, "test_setup_code": "", "test_list": ["assert find_Points(5,10,1,5) == (1,10)", "assert find_Points(3,5,7,9) == (3,9)", "assert find_Points(1,5,2,8) == (1,8)"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "code": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]", "task_id": 661, "test_setup_code": "", "test_list": ["assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101", "assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013", "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27"], "challenge_test_list": []}
{"text": "Write a function to sort a list in a dictionary.", "code": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict", "task_id": 662, "test_setup_code": "", "test_list": ["assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}", "assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}", "assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}"], "challenge_test_list": []}
{"text": "Write a function to find the largest possible value of k such that k modulo x is y.", "code": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) ", "task_id": 663, "test_setup_code": "", "test_list": ["assert find_max_val(15, 10, 5) == 15", "assert find_max_val(187, 10, 5) == 185", "assert find_max_val(16, 11, 1) == 12"], "challenge_test_list": []}
{"text": "Write a python function to find the average of even numbers till a given even number.", "code": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count ", "task_id": 664, "test_setup_code": "", "test_list": ["assert average_Even(2) == 2", "assert average_Even(4) == 3", "assert average_Even(100) == 51"], "challenge_test_list": []}
{"text": "Write a python function to shift first element to the end of given list.", "code": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)", "task_id": 665, "test_setup_code": "", "test_list": ["assert move_last([1,2,3,4]) == [2,3,4,1]", "assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]", "assert move_last([5,4,3,2,1]) == [4,3,2,1,5]"], "challenge_test_list": []}
{"text": "Write a function to count occurrence of a character in a string.", "code": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count", "task_id": 666, "test_setup_code": "", "test_list": ["assert count_char(\"Python\",'o')==1", "assert count_char(\"little\",'t')==2", "assert count_char(\"assert\",'s')==2"], "challenge_test_list": []}
{"text": "Write a python function to count number of vowels in the string.", "code": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n", "task_id": 667, "test_setup_code": "", "test_list": ["assert Check_Vow('corner','AaEeIiOoUu') == 2", "assert Check_Vow('yay','AaEeIiOoUu') == 1", "assert Check_Vow('Checking_Vow','AaEeIiOoUu') ==3"], "challenge_test_list": []}
{"text": "Write a python function to replace multiple occurence of character by single.", "code": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string ", "task_id": 668, "test_setup_code": "", "test_list": ["assert replace('peep','e') == 'pep'", "assert replace('Greek','e') == 'Grek'", "assert replace('Moon','o') == 'Mon'"], "challenge_test_list": []}
{"text": "Write a function to check whether the given ip address is valid or not using regex.", "code": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") ", "task_id": 669, "test_setup_code": "", "test_list": ["assert check_IP(\"192.168.0.1\") == 'Valid IP address'", "assert check_IP(\"110.234.52.124\") == 'Valid IP address'", "assert check_IP(\"366.1.2.2\") == 'Invalid IP address'"], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.", "code": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False", "task_id": 670, "test_setup_code": "", "test_list": ["assert decreasing_trend([-4,-3,-2,-1]) == True", "assert decreasing_trend([1,2,3]) == True", "assert decreasing_trend([3,2,1]) == False"], "challenge_test_list": []}
{"text": "Write a python function to set the right most unset bit.", "code": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) ", "task_id": 671, "test_setup_code": "", "test_list": ["assert set_Right_most_Unset_Bit(21) == 23", "assert set_Right_most_Unset_Bit(11) == 15", "assert set_Right_most_Unset_Bit(15) == 15"], "challenge_test_list": []}
{"text": "Write a function to find maximum of three numbers.", "code": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum", "task_id": 672, "test_setup_code": "", "test_list": ["assert max_of_three(10,20,30)==30", "assert max_of_three(55,47,39)==55", "assert max_of_three(10,49,30)==49"], "challenge_test_list": []}
{"text": "Write a python function to convert a list of multiple integers into a single integer.", "code": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) ", "task_id": 673, "test_setup_code": "", "test_list": ["assert convert([1,2,3]) == 123", "assert convert([4,5,6]) == 456", "assert convert([7,8,9]) == 789"], "challenge_test_list": []}
{"text": "Write a function to remove duplicate words from a given string using collections module.", "code": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result", "task_id": 674, "test_setup_code": "", "test_list": ["assert remove_duplicate(\"Python Exercises Exercises\")==(\"Python Exercises\")", "assert remove_duplicate(\"This is a test\")==(\"This is a test\")", "assert remove_duplicate(\"Python Exercises Practice Exercises Solution Practice Solution\")==(\"Python Exercises Practice Solution\")"], "challenge_test_list": []}
{"text": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "code": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums", "task_id": 675, "test_setup_code": "", "test_list": ["assert sum_nums(2,10,11,20)==20", "assert sum_nums(15,17,1,10)==32", "assert sum_nums(10,15,5,30)==20"], "challenge_test_list": []}
{"text": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "code": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))", "task_id": 676, "test_setup_code": "", "test_list": ["assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'", "assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'", "assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'"], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is valid or not.", "code": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False", "task_id": 677, "test_setup_code": "", "test_list": ["assert validity_triangle(60,50,90)==False", "assert validity_triangle(45,75,60)==True", "assert validity_triangle(30,50,100)==True"], "challenge_test_list": []}
{"text": "Write a python function to remove spaces from a given string.", "code": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1", "task_id": 678, "test_setup_code": "", "test_list": ["assert remove_spaces(\"a b c\") == \"abc\"", "assert remove_spaces(\"1 2 3\") == \"123\"", "assert remove_spaces(\" b c\") == \"bc\""], "challenge_test_list": []}
{"text": "Write a function to access dictionary key\u2019s element by index.", "code": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]", "task_id": 679, "test_setup_code": "", "test_list": ["assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'", "assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'", "assert access_key({'program':15,'computer':45},1)== 'computer'"], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers has an increasing trend or not.", "code": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False", "task_id": 680, "test_setup_code": "", "test_list": ["assert increasing_trend([1,2,3,4]) == True", "assert increasing_trend([4,3,2,1]) == False", "assert increasing_trend([0,1,4,9]) == True"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest prime divisor of a number.", "code": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; ", "task_id": 681, "test_setup_code": "", "test_list": ["assert smallest_Divisor(10) == 2", "assert smallest_Divisor(25) == 5", "assert smallest_Divisor(31) == 31"], "challenge_test_list": []}
{"text": "Write a function to multiply two lists using map and lambda function.", "code": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)", "task_id": 682, "test_setup_code": "", "test_list": ["assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]", "assert mul_list([1,2],[3,4])==[3,8]", "assert mul_list([90,120],[50,70])==[4500,8400]"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented by sum of two squares or not.", "code": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False", "task_id": 683, "test_setup_code": "", "test_list": ["assert sum_Square(25) == True", "assert sum_Square(24) == False", "assert sum_Square(17) == True"], "challenge_test_list": []}
{"text": "Write a python function to count occurences of a character in a repeated string.", "code": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  ", "task_id": 684, "test_setup_code": "", "test_list": ["assert count_Char(\"abcac\",'a') == 4", "assert count_Char(\"abca\",'c') == 2", "assert count_Char(\"aba\",'a') == 7"], "challenge_test_list": []}
{"text": "Write a python function to find sum of prime numbers between 1 to n.", "code": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum", "task_id": 685, "test_setup_code": "", "test_list": ["assert sum_Of_Primes(10) == 17", "assert sum_Of_Primes(20) == 77", "assert sum_Of_Primes(5) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the frequency of each element in the given list.", "code": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) ", "task_id": 686, "test_setup_code": "", "test_list": ["assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'", "assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'", "assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'"], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "code": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)", "task_id": 687, "test_setup_code": "", "test_list": ["assert recur_gcd(12,14) == 2", "assert recur_gcd(13,17) == 1", "assert recur_gcd(9, 3) == 3"], "challenge_test_list": []}
{"text": "Write a function to get the length of a complex number.", "code": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length", "task_id": 688, "test_setup_code": "", "test_list": ["assert len_complex(3,4)==5.0", "assert len_complex(9,10)==13.45362404707371", "assert len_complex(7,9)==11.40175425099138"], "challenge_test_list": []}
{"text": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "code": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]", "task_id": 689, "test_setup_code": "", "test_list": ["assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3", "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3", "assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10"], "challenge_test_list": []}
{"text": "Write a function to multiply consecutive numbers of a given list.", "code": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "task_id": 690, "test_setup_code": "", "test_list": ["assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]", "assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]", "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]"], "challenge_test_list": []}
{"text": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "code": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n", "task_id": 691, "test_setup_code": "", "test_list": ["assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}", "assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}", "assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}"], "challenge_test_list": []}
{"text": "Write a python function to find the last two digits in factorial of a given number.", "code": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) ", "task_id": 692, "test_setup_code": "", "test_list": ["assert last_Two_Digits(7) == 40", "assert last_Two_Digits(5) == 20", "assert last_Two_Digits(2) == 2"], "challenge_test_list": []}
{"text": "Write a function to remove multiple spaces in a string by using regex.", "code": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))", "task_id": 693, "test_setup_code": "", "test_list": ["assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'", "assert remove_multiple_spaces('Quad      Core') == 'Quad Core'", "assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'"], "challenge_test_list": []}
{"text": "Write a function to extract unique values from the given dictionary values.", "code": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res", "task_id": 694, "test_setup_code": "", "test_list": ["assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]", "assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]", "assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"], "challenge_test_list": []}
{"text": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "code": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 695, "test_setup_code": "", "test_list": ["assert check_greater((10, 4, 5), (13, 5, 18)) == True", "assert check_greater((1, 2, 3), (2, 1, 4)) == False", "assert check_greater((4, 5, 6), (5, 6, 7)) == True"], "challenge_test_list": []}
{"text": "Write a function to zip two given lists of lists.", "code": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result", "task_id": 696, "test_setup_code": "", "test_list": ["assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]", "assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]", "assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]"], "challenge_test_list": []}
{"text": "Write a function to find number of even elements in the given list using lambda function.", "code": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even", "task_id": 697, "test_setup_code": "", "test_list": ["assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3", "assert count_even([10,15,14,13,-18,12,-20])==5", "assert count_even([1, 2, 4, 8, 9])==3"], "challenge_test_list": []}
{"text": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.", "code": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n", "task_id": 698, "test_setup_code": "", "test_list": ["assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}", "assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}", "assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of swaps required to convert one binary string to another.", "code": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ", "task_id": 699, "test_setup_code": "", "test_list": ["assert min_Swaps(\"1101\",\"1110\") == 1", "assert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"", "assert min_Swaps(\"1110000\",\"0001101\") == 3"], "challenge_test_list": []}
{"text": "Write a function to count the number of elements in a list which are within a specific range.", "code": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr", "task_id": 700, "test_setup_code": "", "test_list": ["assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6", "assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5", "assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3"], "challenge_test_list": []}
{"text": "Write a function to find the equilibrium index of the given array.", "code": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1", "task_id": 701, "test_setup_code": "", "test_list": ["assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3", "assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3", "assert equilibrium_index([1, 2, 3]) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "code": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans", "task_id": 702, "test_setup_code": "", "test_list": ["assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5", "assert removals([1, 5, 6, 2, 8], 5, 2) == 3", "assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2"], "challenge_test_list": []}
{"text": "Write a function to check whether the given key is present in the dictionary or not.", "code": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False", "task_id": 703, "test_setup_code": "", "test_list": ["assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True", "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True", "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False"], "challenge_test_list": []}
{"text": "Write a function to calculate the harmonic sum of n-1.", "code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))", "task_id": 704, "test_setup_code": "", "test_list": ["assert harmonic_sum(10)==2.9289682539682538", "assert harmonic_sum(4)==2.083333333333333", "assert harmonic_sum(7)==2.5928571428571425 "], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by length and value.", "code": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1", "task_id": 705, "test_setup_code": "", "test_list": ["assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]", "assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]", "assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"], "challenge_test_list": []}
{"text": "Write a function to find whether an array is subset of another array.", "code": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t", "task_id": 706, "test_setup_code": "", "test_list": ["assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True", "assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True", "assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False"], "challenge_test_list": []}
{"text": "Write a python function to count the total set bits from 1 to n.", "code": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  ", "task_id": 707, "test_setup_code": "", "test_list": ["assert count_Set_Bits(16) == 33", "assert count_Set_Bits(2) == 2", "assert count_Set_Bits(14) == 28"], "challenge_test_list": []}
{"text": "Write a python function to convert a string to a list.", "code": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li ", "task_id": 708, "test_setup_code": "", "test_list": ["assert Convert('python program') == ['python','program']", "assert Convert('Data Analysis') ==['Data','Analysis']", "assert Convert('Hadoop Training') == ['Hadoop','Training']"], "challenge_test_list": []}
{"text": "Write a function to count unique keys for each value present in the tuple.", "code": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) ", "task_id": 709, "test_setup_code": "", "test_list": ["assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'", "assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'", "assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'"], "challenge_test_list": []}
{"text": "Write a function to access the initial and last data of the given tuple record.", "code": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) ", "task_id": 710, "test_setup_code": "", "test_list": ["assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)", "assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)", "assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)"], "challenge_test_list": []}
{"text": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.", "code": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False", "task_id": 711, "test_setup_code": "", "test_list": ["assert product_Equal(2841) == True", "assert product_Equal(1234) == False", "assert product_Equal(1212) == False"], "challenge_test_list": []}
{"text": "Write a function to remove duplicates from a list of lists.", "code": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate", "task_id": 712, "test_setup_code": "", "test_list": ["assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] ", "assert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]", "assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]"], "challenge_test_list": []}
{"text": "Write a function to check if the given tuple contains all valid values or not.", "code": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) ", "task_id": 713, "test_setup_code": "", "test_list": ["assert check_valid((True, True, True, True) ) == True", "assert check_valid((True, False, True, True) ) == False", "assert check_valid((True, True, True, True) ) == True"], "challenge_test_list": []}
{"text": "Write a python function to count the number of distinct power of prime factor of given number.", "code": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count ", "task_id": 714, "test_setup_code": "", "test_list": ["assert count_Fac(24) == 3", "assert count_Fac(12) == 2", "assert count_Fac(4) == 1"], "challenge_test_list": []}
{"text": "Write a function to convert the given string of integers into a tuple.", "code": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) ", "task_id": 715, "test_setup_code": "", "test_list": ["assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)", "assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)", "assert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rombus.", "code": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "task_id": 716, "test_setup_code": "", "test_list": ["assert rombus_perimeter(10)==40", "assert rombus_perimeter(5)==20", "assert rombus_perimeter(4)==16"], "challenge_test_list": []}
{"text": "Write a function to calculate the standard deviation.", "code": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean", "task_id": 717, "test_setup_code": "", "test_list": ["assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979", "assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287", "assert sd_calc([5,9,10,15,6,4])==4.070217029430577"], "challenge_test_list": []}
{"text": "Write a function to create a list taking alternate elements from another given list.", "code": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result ", "task_id": 718, "test_setup_code": "", "test_list": ["assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']", "assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]", "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by zero or more b's.", "code": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "task_id": 719, "test_setup_code": "", "test_list": ["assert text_match(\"ac\")==('Found a match!')", "assert text_match(\"dc\")==('Not matched!')", "assert text_match(\"abba\")==('Found a match!')"], "challenge_test_list": []}
{"text": "Write a function to add a dictionary to the tuple.", "code": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) ", "task_id": 720, "test_setup_code": "", "test_list": ["assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})", "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"], "challenge_test_list": []}
{"text": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.", "code": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)", "task_id": 721, "test_setup_code": "", "test_list": ["assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2", "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2", "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 "], "challenge_test_list": []}
{"text": "Write a function to filter the height and width of students which are stored in a dictionary.", "code": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    ", "task_id": 722, "test_setup_code": "", "test_list": ["assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"], "challenge_test_list": []}
{"text": "Write a function to count the same pair in two given lists using map function.", "code": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result", "task_id": 723, "test_setup_code": "", "test_list": ["assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4", "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11", "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all digits of the base to the specified power.", "code": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])", "task_id": 724, "test_setup_code": "", "test_list": ["assert power_base_sum(2,100)==115", "assert power_base_sum(8,10)==37", "assert power_base_sum(8,15)==62"], "challenge_test_list": []}
{"text": "Write a function to extract values between quotation marks of the given string by using regex.", "code": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))", "task_id": 725, "test_setup_code": "", "test_list": ["assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']", "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']", "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']"], "challenge_test_list": []}
{"text": "Write a function to multiply the adjacent elements of the given tuple.", "code": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "task_id": 726, "test_setup_code": "", "test_list": ["assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)", "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)", "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)"], "challenge_test_list": []}
{"text": "Write a function to remove all characters except letters and numbers using regex", "code": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result", "task_id": 727, "test_setup_code": "", "test_list": ["assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'", "assert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'", "assert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' "], "challenge_test_list": []}
{"text": "Write a function to sum elements in two lists.", "code": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list", "task_id": 728, "test_setup_code": "", "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"], "challenge_test_list": []}
{"text": "Write a function to add two lists using map and lambda function.", "code": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)", "task_id": 729, "test_setup_code": "", "test_list": ["assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]", "assert add_list([1,2],[3,4])==[4,6]", "assert add_list([10,20],[50,70])==[60,90]"], "challenge_test_list": []}
{"text": "Write a function to remove consecutive duplicates of a given list.", "code": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] ", "task_id": 730, "test_setup_code": "", "test_list": ["assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]", "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']"], "challenge_test_list": []}
{"text": "Write a function to find the lateral surface area of a cone.", "code": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA", "task_id": 731, "test_setup_code": "", "test_list": ["assert lateralsurface_cone(5,12)==204.20352248333654", "assert lateralsurface_cone(10,15)==566.3586699569488", "assert lateralsurface_cone(19,17)==1521.8090132193388"], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "code": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r", "task_id": 732, "test_setup_code": "", "test_list": ["assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')", "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')", "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"], "challenge_test_list": []}
{"text": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "code": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result", "task_id": 733, "test_setup_code": "", "test_list": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find sum of products of all possible subarrays.", "code": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)", "task_id": 734, "test_setup_code": "", "test_list": ["assert sum_Of_Subarray_Prod([1,2,3],3) == 20", "assert sum_Of_Subarray_Prod([1,2],2) == 5", "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"], "challenge_test_list": []}
{"text": "Write a python function to toggle bits of the number except the first and the last bit.", "code": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ", "task_id": 735, "test_setup_code": "", "test_list": ["assert toggle_middle_bits(9) == 15", "assert toggle_middle_bits(10) == 12", "assert toggle_middle_bits(11) == 13"], "challenge_test_list": []}
{"text": "Write a function to locate the left insertion point for a specified value in sorted order.", "code": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i", "task_id": 736, "test_setup_code": "", "test_list": ["assert left_insertion([1,2,4,5],6)==4", "assert left_insertion([1,2,4,5],3)==2", "assert left_insertion([1,2,4,5],7)==4"], "challenge_test_list": []}
{"text": "Write a function to check whether the given string is starting with a vowel or not using regex.", "code": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") ", "task_id": 737, "test_setup_code": "", "test_list": ["assert check_str(\"annie\") == 'Valid'", "assert check_str(\"dawood\") == 'Invalid'", "assert check_str(\"Else\") == 'Valid'"], "challenge_test_list": []}
{"text": "Write a function to calculate the geometric sum of n-1.", "code": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "task_id": 738, "test_setup_code": "", "test_list": ["assert geometric_sum(7) == 1.9921875", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(8) == 1.99609375"], "challenge_test_list": []}
{"text": "Write a python function to find the index of smallest triangular number with n digits.", "code": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); ", "task_id": 739, "test_setup_code": "", "test_list": ["assert find_Index(2) == 4", "assert find_Index(3) == 14", "assert find_Index(4) == 45"], "challenge_test_list": []}
{"text": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "code": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) ", "task_id": 740, "test_setup_code": "", "test_list": ["assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}", "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}", "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters are same or not.", "code": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True", "task_id": 741, "test_setup_code": "", "test_list": ["assert all_Characters_Same(\"python\") == False", "assert all_Characters_Same(\"aaa\") == True", "assert all_Characters_Same(\"data\") == False"], "challenge_test_list": []}
{"text": "Write a function to caluclate the area of a tetrahedron.", "code": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area", "task_id": 742, "test_setup_code": "", "test_list": ["assert area_tetrahedron(3)==15.588457268119894", "assert area_tetrahedron(20)==692.8203230275509", "assert area_tetrahedron(10)==173.20508075688772"], "challenge_test_list": []}
{"text": "Write a function to rotate a given list by specified number of items to the right direction.", "code": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result", "task_id": 743, "test_setup_code": "", "test_list": ["assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"], "challenge_test_list": []}
{"text": "Write a function to check if the given tuple has any none value or not.", "code": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) ", "task_id": 744, "test_setup_code": "", "test_list": ["assert check_none((10, 4, 5, 6, None)) == True", "assert check_none((7, 8, 9, 11, 14)) == False", "assert check_none((1, 2, 3, 4, None)) == True"], "challenge_test_list": []}
{"text": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "code": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "task_id": 745, "test_setup_code": "", "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]"], "challenge_test_list": []}
{"text": "Write a function to find area of a sector.", "code": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea", "task_id": 746, "test_setup_code": "", "test_list": ["assert sector_area(4,45)==6.285714285714286", "assert sector_area(9,45)==31.82142857142857", "assert sector_area(9,360)==None"], "challenge_test_list": []}
{"text": "Write a function to find the longest common subsequence for the given three string sequence.", "code": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]", "task_id": 747, "test_setup_code": "", "test_list": ["assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2", "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 ", "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3"], "challenge_test_list": []}
{"text": "Write a function to put spaces between words starting with capital letters in a given string by using regex.", "code": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "task_id": 748, "test_setup_code": "", "test_list": ["assert capital_words_spaces(\"Python\") == 'Python'", "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'", "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"], "challenge_test_list": []}
{"text": "Write a function to sort a given list of strings of numbers numerically.", "code": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result", "task_id": 749, "test_setup_code": "", "test_list": ["assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]", "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]", "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"], "challenge_test_list": []}
{"text": "Write a function to add the given tuple to the given list.", "code": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) ", "task_id": 750, "test_setup_code": "", "test_list": ["assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]", "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]", "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"], "challenge_test_list": []}
{"text": "Write a function to check if the given array represents min heap or not.", "code": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child", "task_id": 751, "test_setup_code": "", "test_list": ["assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True", "assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True", "assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False"], "challenge_test_list": []}
{"text": "Write a function to find the nth jacobsthal number.", "code": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]", "task_id": 752, "test_setup_code": "", "test_list": ["assert jacobsthal_num(5) == 11", "assert jacobsthal_num(2) == 1", "assert jacobsthal_num(4) == 5"], "challenge_test_list": []}
{"text": "Write a function to find minimum k records from tuple list.", "code": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) ", "task_id": 753, "test_setup_code": "", "test_list": ["assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]", "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]", "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"], "challenge_test_list": []}
{"text": "Write a function to find common index elements from three lists.", "code": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result", "task_id": 754, "test_setup_code": "", "test_list": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]"], "challenge_test_list": []}
{"text": "Write a function to find the second smallest number in a list.", "code": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] ", "task_id": 755, "test_setup_code": "", "test_list": ["assert second_smallest([1, 2, -8, -2, 0, -2])==-2", "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5", "assert second_smallest([2,2])==None"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by zero or one 'b'.", "code": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "task_id": 756, "test_setup_code": "", "test_list": ["assert text_match_zero_one(\"ac\")==('Found a match!')", "assert text_match_zero_one(\"dc\")==('Not matched!')", "assert text_match_zero_one(\"abbbba\")==('Found a match!')"], "challenge_test_list": []}
{"text": "Write a function to count the pairs of reverse strings in the given string list.", "code": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)", "task_id": 757, "test_setup_code": "", "test_list": ["assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'", "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'", "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' "], "challenge_test_list": []}
{"text": "Write a function to count number of unique lists within a list.", "code": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "task_id": 758, "test_setup_code": "", "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}"], "challenge_test_list": []}
{"text": "Write a function to check a decimal with a precision of 2.", "code": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)", "task_id": 759, "test_setup_code": "", "test_list": ["assert is_decimal('123.11')==True", "assert is_decimal('e666.86')==False", "assert is_decimal('3.124587')==False"], "challenge_test_list": []}
{"text": "Write a python function to check whether an array contains only one distinct element or not.", "code": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')", "task_id": 760, "test_setup_code": "", "test_list": ["assert unique_Element([1,1,1],3) == 'YES'", "assert unique_Element([1,2,1,2],4) == 'NO'", "assert unique_Element([1,2,3,4,5],5) == 'NO'"], "challenge_test_list": []}
{"text": "Write a function to caluclate arc length of an angle.", "code": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength", "task_id": 761, "test_setup_code": "", "test_list": ["assert arc_length(9,45)==3.5357142857142856", "assert arc_length(9,480)==None", "assert arc_length(5,270)==11.785714285714285"], "challenge_test_list": []}
{"text": "Write a function to check whether the given month number contains 30 days or not.", "code": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False", "task_id": 762, "test_setup_code": "", "test_list": ["assert check_monthnumber_number(6)==True", "assert check_monthnumber_number(2)==False", "assert check_monthnumber_number(12)==False"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum difference between any two elements in a given array.", "code": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff ", "task_id": 763, "test_setup_code": "", "test_list": ["assert find_Min_Diff((1,5,3,19,18,25),6) == 1", "assert find_Min_Diff((4,3,2,6),4) == 1", "assert find_Min_Diff((30,5,20,9),4) == 4"], "challenge_test_list": []}
{"text": "Write a python function to count numeric values in a given string.", "code": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr", "task_id": 764, "test_setup_code": "", "test_list": ["assert number_ctr('program2bedone') == 1", "assert number_ctr('3wonders') ==1", "assert number_ctr('123') == 3"], "challenge_test_list": []}
{"text": "Write a function to find nth polite number.", "code": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "task_id": 765, "test_setup_code": "", "test_list": ["assert is_polite(7) == 11", "assert is_polite(4) == 7", "assert is_polite(9) == 13"], "challenge_test_list": []}
{"text": "Write a function to iterate over all pairs of consecutive items in a given list.", "code": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp", "task_id": 766, "test_setup_code": "", "test_list": ["assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]", "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"], "challenge_test_list": []}
{"text": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.", "code": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count", "task_id": 767, "test_setup_code": "", "test_list": ["assert get_Pairs_Count([1,1,1,1],4,2) == 6", "assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3", "assert get_Pairs_Count([1,-2,3],3,1) == 1"], "challenge_test_list": []}
{"text": "Write a python function to check for odd parity of a given number.", "code": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False", "task_id": 768, "test_setup_code": "", "test_list": ["assert check_Odd_Parity(13) == True", "assert check_Odd_Parity(21) == True", "assert check_Odd_Parity(18) == False"], "challenge_test_list": []}
{"text": "Write a python function to get the difference between two lists.", "code": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n ", "task_id": 769, "test_setup_code": "", "test_list": ["assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]", "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]", "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "code": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm ", "task_id": 770, "test_setup_code": "", "test_list": ["assert odd_Num_Sum(2) == 82", "assert odd_Num_Sum(3) == 707", "assert odd_Num_Sum(4) == 3108"], "challenge_test_list": []}
{"text": "Write a function to check if the given expression is balanced or not.", "code": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack", "task_id": 771, "test_setup_code": "", "test_list": ["assert check_expression(\"{()}[{}]\") == True", "assert check_expression(\"{()}[{]\") == False", "assert check_expression(\"{()}[{}][]({})\") == True"], "challenge_test_list": []}
{"text": "Write a function to remove all the words with k length in the given string.", "code": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) ", "task_id": 772, "test_setup_code": "", "test_list": ["assert remove_length('The person is most value tet', 3) == 'person is most value'", "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'", "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"], "challenge_test_list": []}
{"text": "Write a function to find the occurrence and position of the substrings within a string.", "code": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)", "task_id": 773, "test_setup_code": "", "test_list": ["assert occurance_substring('python programming, python language','python')==('python', 0, 6)", "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)", "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)"], "challenge_test_list": []}
{"text": "Write a function to check if the string is a valid email address or not using regex.", "code": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") ", "task_id": 774, "test_setup_code": "", "test_list": ["assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'", "assert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'", "assert check_email(\"ankitaoie326.com\") == 'Invalid Email'"], "challenge_test_list": []}
{"text": "Write a python function to check whether every odd index contains odd numbers of a given list.", "code": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "task_id": 775, "test_setup_code": "", "test_list": ["assert odd_position([2,1,4,3,6,7,6,3]) == True", "assert odd_position([4,1,2]) == True", "assert odd_position([1,2,3]) == False"], "challenge_test_list": []}
{"text": "Write a function to count those characters which have vowels as their neighbors in the given string.", "code": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) ", "task_id": 776, "test_setup_code": "", "test_list": ["assert count_vowels('bestinstareels') == 7", "assert count_vowels('partofthejourneyistheend') == 12", "assert count_vowels('amazonprime') == 5"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of non-repeated elements in a given array.", "code": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum", "task_id": 777, "test_setup_code": "", "test_list": ["assert find_Sum([1,2,3,1,1,4,5,6],8) == 21", "assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71", "assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78"], "challenge_test_list": []}
{"text": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "code": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]", "task_id": 778, "test_setup_code": "", "test_list": ["assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]", "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"], "challenge_test_list": []}
{"text": "Write a function to count the number of unique lists within a list.", "code": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "task_id": 779, "test_setup_code": "", "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"], "challenge_test_list": []}
{"text": "Write a function to find the combinations of sums with tuples in the given tuple list.", "code": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) ", "task_id": 780, "test_setup_code": "", "test_list": ["assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]", "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"], "challenge_test_list": []}
{"text": "Write a python function to check whether the count of divisors is even or odd.", "code": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") ", "task_id": 781, "test_setup_code": "", "test_list": ["assert count_Divisors(10) == \"Even\"", "assert count_Divisors(100) == \"Odd\"", "assert count_Divisors(125) == \"Even\""], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all odd length subarrays.", "code": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum", "task_id": 782, "test_setup_code": "", "test_list": ["assert Odd_Length_Sum([1,2,4]) == 14", "assert Odd_Length_Sum([1,2,1,2]) == 15", "assert Odd_Length_Sum([1,7]) == 8"], "challenge_test_list": []}
{"text": "Write a function to convert rgb color to hsv color.", "code": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v", "task_id": 783, "test_setup_code": "", "test_list": ["assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)", "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)", "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"], "challenge_test_list": []}
{"text": "Write a function to find the product of first even and odd number of a given list.", "code": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)", "task_id": 784, "test_setup_code": "", "test_list": ["assert mul_even_odd([1,3,5,7,4,1,6,8])==4", "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2", "assert mul_even_odd([1,5,7,9,10])==10"], "challenge_test_list": []}
{"text": "Write a function to convert tuple string to integer tuple.", "code": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) ", "task_id": 785, "test_setup_code": "", "test_list": ["assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)", "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)", "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)"], "challenge_test_list": []}
{"text": "Write a function to locate the right insertion point for a specified value in sorted order.", "code": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i", "task_id": 786, "test_setup_code": "", "test_list": ["assert right_insertion([1,2,4,5],6)==4", "assert right_insertion([1,2,4,5],3)==2", "assert right_insertion([1,2,4,5],7)==4"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by three 'b'.", "code": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "task_id": 787, "test_setup_code": "", "test_list": ["assert text_match_three(\"ac\")==('Not matched!')", "assert text_match_three(\"dc\")==('Not matched!')", "assert text_match_three(\"abbbba\")==('Found a match!')"], "challenge_test_list": []}
{"text": "Write a function to create a new tuple from the given string and list.", "code": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) ", "task_id": 788, "test_setup_code": "", "test_list": ["assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')", "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')", "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a regular polygon.", "code": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter", "task_id": 789, "test_setup_code": "", "test_list": ["assert perimeter_polygon(4,20)==80", "assert perimeter_polygon(10,15)==150", "assert perimeter_polygon(9,7)==63"], "challenge_test_list": []}
{"text": "Write a python function to check whether every even index contains even numbers of a given list.", "code": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "task_id": 790, "test_setup_code": "", "test_list": ["assert even_position([3,2,1]) == False", "assert even_position([1,2,3]) == False", "assert even_position([2,1,4]) == True"], "challenge_test_list": []}
{"text": "Write a function to remove the nested record from the given tuple.", "code": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) ", "task_id": 791, "test_setup_code": "", "test_list": ["assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)", "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)", "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)"], "challenge_test_list": []}
{"text": "Write a python function to count the number of lists in a given number of lists.", "code": "def count_list(input_list): \r\n    return len(input_list)", "task_id": 792, "test_setup_code": "", "test_list": ["assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4", "assert count_list([[1,2],[2,3],[4,5]]) == 3", "assert count_list([[1,0],[2,0]]) == 2"], "challenge_test_list": []}
{"text": "Write a python function to find the last position of an element in a sorted array.", "code": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res", "task_id": 793, "test_setup_code": "", "test_list": ["assert last([1,2,3],1,3) == 0", "assert last([1,1,1,2,3,4],1,6) == 2", "assert last([2,3,2,3,6,8,9],3,8) == 3"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "code": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "task_id": 794, "test_setup_code": "", "test_list": ["assert text_starta_endb(\"aabbbb\")==('Found a match!')", "assert text_starta_endb(\"aabAbbbc\")==('Not matched!')", "assert text_starta_endb(\"accddbbjjj\")==('Not matched!')"], "challenge_test_list": []}
{"text": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.", "code": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items", "task_id": 795, "test_setup_code": "", "test_list": ["assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]", "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]", "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]"], "challenge_test_list": []}
{"text": "Write function to find the sum of all items in the given dictionary.", "code": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum", "task_id": 796, "test_setup_code": "", "test_list": ["assert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88", "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "code": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)", "task_id": 797, "test_setup_code": "", "test_list": ["assert sum_in_Range(2,5) == 8", "assert sum_in_Range(5,7) == 12", "assert sum_in_Range(7,13) == 40"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of an array.", "code": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  ", "task_id": 798, "test_setup_code": "", "test_list": ["assert _sum([1, 2, 3]) == 6", "assert _sum([15, 12, 13, 10]) == 50", "assert _sum([0, 1, 2]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to left rotate the bits of a given number.", "code": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  ", "task_id": 799, "test_setup_code": "", "test_list": ["assert left_Rotate(16,2) == 64", "assert left_Rotate(10,2) == 40", "assert left_Rotate(99,3) == 792"], "challenge_test_list": []}
{"text": "Write a function to remove all whitespaces from a string.", "code": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))", "task_id": 800, "test_setup_code": "", "test_list": ["assert remove_all_spaces('python  program')==('pythonprogram')", "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')", "assert remove_all_spaces('python                     program')==('pythonprogram')"], "challenge_test_list": []}
{"text": "Write a python function to count the number of equal numbers from three given integers.", "code": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))", "task_id": 801, "test_setup_code": "", "test_list": ["assert test_three_equal(1,1,1) == 3", "assert test_three_equal(-1,-2,-3) == 0", "assert test_three_equal(1,2,2) == 2"], "challenge_test_list": []}
{"text": "Write a python function to count the number of rotations required to generate a sorted array.", "code": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0", "task_id": 802, "test_setup_code": "", "test_list": ["assert count_Rotation([3,2,1],3) == 1", "assert count_Rotation([4,5,1,2,3],5) == 2", "assert count_Rotation([7,8,9,1,2,3],6) == 3"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a perfect square or not.", "code": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False", "task_id": 803, "test_setup_code": "", "test_list": ["assert is_Perfect_Square(10) == False", "assert is_Perfect_Square(36) == True", "assert is_Perfect_Square(14) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether the product of numbers is even or not.", "code": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False", "task_id": 804, "test_setup_code": "", "test_list": ["assert is_Product_Even([1,2,3],3) == True", "assert is_Product_Even([1,2,1,4],4) == True", "assert is_Product_Even([1,1],2) == False"], "challenge_test_list": []}
{"text": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "code": "def max_sum_list(lists):\r\n return max(lists, key=sum)", "task_id": 805, "test_setup_code": "", "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "assert max_sum_list([[2,3,1]])==[2,3,1] "], "challenge_test_list": []}
{"text": "Write a function to find maximum run of uppercase characters in the given string.", "code": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)", "task_id": 806, "test_setup_code": "", "test_list": ["assert max_run_uppercase('GeMKSForGERksISBESt') == 5", "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6", "assert max_run_uppercase('GooGLEFluTTER') == 4"], "challenge_test_list": []}
{"text": "Write a python function to find the first odd number in a given list of numbers.", "code": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd", "task_id": 807, "test_setup_code": "", "test_list": ["assert first_odd([1,3,5]) == 1", "assert first_odd([2,4,1,3]) == 1", "assert first_odd ([8,9,1]) == 9"], "challenge_test_list": []}
{"text": "Write a function to check if the given tuples contain the k or not.", "code": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) ", "task_id": 808, "test_setup_code": "", "test_list": ["assert check_K((10, 4, 5, 6, 8), 6) == True", "assert check_K((1, 2, 3, 4, 5, 6), 7) == False", "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"], "challenge_test_list": []}
{"text": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "code": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 809, "test_setup_code": "", "test_list": ["assert check_smaller((1, 2, 3), (2, 3, 4)) == False", "assert check_smaller((4, 5, 6), (3, 4, 5)) == True", "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"], "challenge_test_list": []}
{"text": "Write a function to iterate over elements repeating each as many times as its count.", "code": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())", "task_id": 810, "test_setup_code": "", "test_list": ["assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] ", "assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] ", "assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"], "challenge_test_list": []}
{"text": "Write a function to check if two lists of tuples are identical or not.", "code": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) ", "task_id": 811, "test_setup_code": "", "test_list": ["assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True", "assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False", "assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True"], "challenge_test_list": []}
{"text": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "code": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))", "task_id": 812, "test_setup_code": "", "test_list": ["assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')", "assert road_rd(\"palnadu Road\")==('palnadu Rd.')", "assert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')"], "challenge_test_list": []}
{"text": "Write a function to find length of the string.", "code": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count", "task_id": 813, "test_setup_code": "", "test_list": ["assert string_length('python')==6", "assert string_length('program')==7", "assert string_length('language')==8"], "challenge_test_list": []}
{"text": "Write a function to find the area of a rombus.", "code": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area", "task_id": 814, "test_setup_code": "", "test_list": ["assert rombus_area(10,20)==100", "assert rombus_area(10,5)==25", "assert rombus_area(4,2)==4"], "challenge_test_list": []}
{"text": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "code": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr", "task_id": 815, "test_setup_code": "", "test_list": ["assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]", "assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]", "assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"], "challenge_test_list": []}
{"text": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result", "task_id": 817, "test_setup_code": "", "test_list": ["assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]", "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]", "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]"], "challenge_test_list": []}
{"text": "Write a python function to count lower case letters in a given string.", "code": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr", "task_id": 818, "test_setup_code": "", "test_list": ["assert lower_ctr('abc') == 3", "assert lower_ctr('string') == 6", "assert lower_ctr('Python') == 5"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "code": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n", "task_id": 819, "test_setup_code": "", "test_list": ["assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])", "assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])", "assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"], "challenge_test_list": []}
{"text": "Write a function to check whether the given month number contains 28 days or not.", "code": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False", "task_id": 820, "test_setup_code": "", "test_list": ["assert check_monthnum_number(2)==True", "assert check_monthnum_number(1)==False", "assert check_monthnum_number(3)==False"], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries into a single expression.", "code": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict", "task_id": 821, "test_setup_code": "", "test_list": ["assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}", "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}", "assert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"], "challenge_test_list": []}
{"text": "Write a function to return true if the password is valid.", "code": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False", "task_id": 822, "test_setup_code": "", "test_list": ["assert pass_validity(\"password\")==False", "assert pass_validity(\"Password@10\")==True", "assert pass_validity(\"password@10\")==False"], "challenge_test_list": []}
{"text": "Write a function to check if the given string starts with a substring using regex.", "code": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")", "task_id": 823, "test_setup_code": "", "test_list": ["assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'", "assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'", "assert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'"], "challenge_test_list": []}
{"text": "Write a python function to remove even numbers from a given list.", "code": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l", "task_id": 824, "test_setup_code": "", "test_list": ["assert remove_even([1,3,5,2]) == [1,3,5]", "assert remove_even([5,6,7]) == [5,7]", "assert remove_even([1,2,3,4]) == [1,3]"], "challenge_test_list": []}
{"text": "Write a python function to access multiple elements of specified index from a given list.", "code": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result", "task_id": 825, "test_setup_code": "", "test_list": ["assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]", "assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]", "assert access_elements([1,0,2,3],[0,1]) == [1,0]"], "challenge_test_list": []}
{"text": "Write a python function to find the type of triangle from the given sides.", "code": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") ", "task_id": 826, "test_setup_code": "", "test_list": ["assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"", "assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"", "assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\""], "challenge_test_list": []}
{"text": "Write a function to sum a specific column of a list in a given list of lists.", "code": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result", "task_id": 827, "test_setup_code": "", "test_list": ["assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12", "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15", "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9"], "challenge_test_list": []}
{"text": "Write a function to count alphabets,digits and special charactes in a given string.", "code": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   ", "task_id": 828, "test_setup_code": "", "test_list": ["assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)", "assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)", "assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)"], "challenge_test_list": []}
{"text": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "code": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) ", "task_id": 829, "test_setup_code": "", "test_list": ["assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'", "assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'", "assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'"], "challenge_test_list": []}
{"text": "Write a function to round up a number to specific digits.", "code": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)", "task_id": 830, "test_setup_code": "", "test_list": ["assert round_up(123.01247,0)==124", "assert round_up(123.01247,1)==123.1", "assert round_up(123.01247,2)==123.02"], "challenge_test_list": []}
{"text": "Write a python function to count equal element pairs from the given array.", "code": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; ", "task_id": 831, "test_setup_code": "", "test_list": ["assert count_Pairs([1,1,1,1],4) == 6", "assert count_Pairs([1,5,1],3) == 1", "assert count_Pairs([3,2,1,7,8,9],6) == 0"], "challenge_test_list": []}
{"text": "Write a function to extract the maximum numeric value from a string by using regex.", "code": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)", "task_id": 832, "test_setup_code": "", "test_list": ["assert extract_max('100klh564abc365bg') == 564", "assert extract_max('hello300how546mer231') == 546", "assert extract_max('its233beenalong343journey234') == 343"], "challenge_test_list": []}
{"text": "Write a function to get dictionary keys as a list.", "code": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list", "task_id": 833, "test_setup_code": "", "test_list": ["assert get_key({1:'python',2:'java'})==[1,2]", "assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]", "assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]"], "challenge_test_list": []}
{"text": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "code": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix", "task_id": 834, "test_setup_code": "", "test_list": ["assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ", "assert generate_matrix(2)==[[1,2],[4,3]]", "assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]"], "challenge_test_list": []}
{"text": "Write a python function to find the slope of a line.", "code": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  ", "task_id": 835, "test_setup_code": "", "test_list": ["assert slope(4,2,2,5) == -1.5", "assert slope(2,4,4,6) == 1", "assert slope(1,2,4,2) == 0"], "challenge_test_list": []}
{"text": "Write a function to find length of the subarray having maximum sum.", "code": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)", "task_id": 836, "test_setup_code": "", "test_list": ["assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5", "assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2", "assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the cube sum of first n odd natural numbers.", "code": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum", "task_id": 837, "test_setup_code": "", "test_list": ["assert cube_Sum(2) == 28", "assert cube_Sum(3) == 153", "assert cube_Sum(4) == 496"], "challenge_test_list": []}
{"text": "Write a python function to find minimum number swaps required to make two binary strings equal.", "code": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  ", "task_id": 838, "test_setup_code": "", "test_list": ["assert min_Swaps(\"0011\",\"1111\") == 1", "assert min_Swaps(\"00011\",\"01001\") == 2", "assert min_Swaps(\"111\",\"111\") == 0"], "challenge_test_list": []}
{"text": "Write a function to sort the tuples alphabetically by the first item of each tuple.", "code": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup", "task_id": 839, "test_setup_code": "", "test_list": ["assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]", "assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]", "assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]"], "challenge_test_list": []}
{"text": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "code": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  ", "task_id": 840, "test_setup_code": "", "test_list": ["assert Check_Solution(2,0,-1) == \"Yes\"", "assert Check_Solution(1,-5,6) == \"No\"", "assert Check_Solution(2,0,2) == \"Yes\""], "challenge_test_list": []}
{"text": "Write a function to count the number of inversions in the given array.", "code": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count ", "task_id": 841, "test_setup_code": "", "test_list": ["assert get_inv_count([1, 20, 6, 4, 5], 5) == 5", "assert get_inv_count([8, 4, 2, 1], 4) == 6", "assert get_inv_count([3, 1, 2], 3) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the number which occurs for odd number of times in the given array.", "code": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1", "task_id": 842, "test_setup_code": "", "test_list": ["assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5", "assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3", "assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "code": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]", "task_id": 843, "test_setup_code": "", "test_list": ["assert nth_super_ugly_number(12,[2,7,13,19])==32", "assert nth_super_ugly_number(10,[2,7,13,19])==26", "assert nth_super_ugly_number(100,[2,7,13,19])==5408"], "challenge_test_list": []}
{"text": "Write a python function to find the kth element in an array containing odd elements first and then even elements.", "code": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; ", "task_id": 844, "test_setup_code": "", "test_list": ["assert get_Number(8,5) == 2", "assert get_Number(7,2) == 3", "assert get_Number(5,2) == 3"], "challenge_test_list": []}
{"text": "Write a python function to count the number of digits in factorial of a given number.", "code": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; ", "task_id": 845, "test_setup_code": "", "test_list": ["assert find_Digits(7) == 4", "assert find_Digits(5) == 3", "assert find_Digits(4) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of platforms required for a railway/bus station.", "code": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result", "task_id": 846, "test_setup_code": "", "test_list": ["assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3", "assert find_platform([100,200,300,400],[700,800,900,1000],4)==4", "assert find_platform([5,6,7,8],[4,3,2,1],4)==1"], "challenge_test_list": []}
{"text": "Write a python function to copy a list from a singleton tuple.", "code": "def lcopy(xs):\n  return xs[:]\n", "task_id": 847, "test_setup_code": "", "test_list": ["assert lcopy([1, 2, 3]) == [1, 2, 3]", "assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]", "assert lcopy([4, 5, 6]) == [4, 5, 6]\n"], "challenge_test_list": []}
{"text": "Write a function to find the area of a trapezium.", "code": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area", "task_id": 848, "test_setup_code": "", "test_list": ["assert area_trapezium(6,9,4)==30", "assert area_trapezium(10,20,30)==450", "assert area_trapezium(15,25,35)==700"], "challenge_test_list": []}
{"text": "Write a python function to find sum of all prime divisors of a given number.", "code": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] ", "task_id": 849, "test_setup_code": "", "test_list": ["assert Sum(60) == 10", "assert Sum(39) == 16", "assert Sum(40) == 7"], "challenge_test_list": []}
{"text": "Write a function to check if a triangle of positive area is possible with the given angles.", "code": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False", "task_id": 850, "test_setup_code": "", "test_list": ["assert is_triangleexists(50,60,70)==True", "assert is_triangleexists(90,45,45)==True", "assert is_triangleexists(150,30,70)==False"], "challenge_test_list": []}
{"text": "Write a python function to find sum of inverse of divisors.", "code": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); ", "task_id": 851, "test_setup_code": "", "test_list": ["assert Sum_of_Inverse_Divisors(6,12) == 2", "assert Sum_of_Inverse_Divisors(9,13) == 1.44", "assert Sum_of_Inverse_Divisors(1,4) == 4"], "challenge_test_list": []}
{"text": "Write a python function to remove negative numbers from a list.", "code": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list", "task_id": 852, "test_setup_code": "", "test_list": ["assert remove_negs([1,-2,3,-4]) == [1,3]", "assert remove_negs([1,2,3,-4]) == [1,2,3]", "assert remove_negs([4,5,-6,7,-8]) == [4,5,7]"], "challenge_test_list": []}
{"text": "Write a python function to find sum of odd factors of a number.", "code": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res ", "task_id": 853, "test_setup_code": "", "test_list": ["assert sum_of_odd_Factors(30) == 24", "assert sum_of_odd_Factors(18) == 13", "assert sum_of_odd_Factors(2) == 1"], "challenge_test_list": []}
{"text": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "code": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap", "task_id": 854, "test_setup_code": "", "test_list": ["assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]", "assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]", "assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]"], "challenge_test_list": []}
{"text": "Write a python function to check for even parity of a given number.", "code": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False", "task_id": 855, "test_setup_code": "", "test_list": ["assert check_Even_Parity(10) == True", "assert check_Even_Parity(11) == False", "assert check_Even_Parity(18) == True"], "challenge_test_list": []}
{"text": "Write a python function to find minimum adjacent swaps required to sort binary array.", "code": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count ", "task_id": 856, "test_setup_code": "", "test_list": ["assert find_Min_Swaps([1,0,1,0],4) == 3", "assert find_Min_Swaps([0,1,0],3) == 1", "assert find_Min_Swaps([0,0,1,1,0],5) == 2"], "challenge_test_list": []}
{"text": "Write a function to list out the list of given strings individually using map function.", "code": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result ", "task_id": 857, "test_setup_code": "", "test_list": ["assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]", "assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]", "assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"], "challenge_test_list": []}
{"text": "Write a function to count number of lists in a given list of lists and square the count.", "code": "def count_list(input_list): \r\n    return (len(input_list))**2", "task_id": 858, "test_setup_code": "", "test_list": ["assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25", "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16", "assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9"], "challenge_test_list": []}
{"text": "Write a function to generate all sublists of a given list.", "code": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs", "task_id": 859, "test_setup_code": "", "test_list": ["assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]", "assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]", "assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]"], "challenge_test_list": []}
{"text": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "code": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") ", "task_id": 860, "test_setup_code": "", "test_list": ["assert check_alphanumeric(\"dawood@\") == 'Discard'", "assert check_alphanumeric(\"skdmsam326\") == 'Accept'", "assert check_alphanumeric(\"cooltricks@\") == 'Discard'"], "challenge_test_list": []}
{"text": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "code": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result", "task_id": 861, "test_setup_code": "", "test_list": ["assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']", "assert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]", "assert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]"], "challenge_test_list": []}
{"text": "Write a function to find the occurrences of n most common words in a given text.", "code": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)", "task_id": 862, "test_setup_code": "", "test_list": ["assert n_common_words(\"python is a programming language\",1)==[('python', 1)]", "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]", "assert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "code": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans ", "task_id": 863, "test_setup_code": "", "test_list": ["assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3", "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4", "assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5"], "challenge_test_list": []}
{"text": "Write a function to find palindromes in a given list of strings using lambda function.", "code": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result", "task_id": 864, "test_setup_code": "", "test_list": ["assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']", "assert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']", "assert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']"], "challenge_test_list": []}
{"text": "Write a function to print n-times a list using map function.", "code": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)", "task_id": 865, "test_setup_code": "", "test_list": ["assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]", "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]", "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]"], "challenge_test_list": []}
{"text": "Write a function to check whether the given month name contains 31 days or not.", "code": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False", "task_id": 866, "test_setup_code": "", "test_list": ["assert check_monthnumb(\"February\")==False", "assert check_monthnumb(\"January\")==True", "assert check_monthnumb(\"March\")==True"], "challenge_test_list": []}
{"text": "Write a python function to add a minimum number such that the sum of array becomes even.", "code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "task_id": 867, "test_setup_code": "", "test_list": ["assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1", "assert min_Num([1,2,3,4,5,6,7,8],8) == 2", "assert min_Num([1,2,3],3) == 2"], "challenge_test_list": []}
{"text": "Write a python function to find the length of the last word in a given string.", "code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "task_id": 868, "test_setup_code": "", "test_list": ["assert length_Of_Last_Word(\"python language\") == 8", "assert length_Of_Last_Word(\"PHP\") == 3", "assert length_Of_Last_Word(\"\") == 0"], "challenge_test_list": []}
{"text": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "code": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result", "task_id": 869, "test_setup_code": "", "test_list": ["assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]", "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]", "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "code": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)", "task_id": 870, "test_setup_code": "", "test_list": ["assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48", "assert sum_positivenum([10,15,-14,13,-18,12,-20])==50", "assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given strings are rotations of each other or not.", "code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "task_id": 871, "test_setup_code": "", "test_list": ["assert are_Rotations(\"abc\",\"cba\") == False", "assert are_Rotations(\"abcd\",\"cdba\") == False", "assert are_Rotations(\"abacd\",\"cdaba\") == True"], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list.", "code": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) ", "task_id": 872, "test_setup_code": "", "test_list": ["assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True", "assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True", "assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False"], "challenge_test_list": []}
{"text": "Write a function to solve the fibonacci sequence using recursion.", "code": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "task_id": 873, "test_setup_code": "", "test_list": ["assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34"], "challenge_test_list": []}
{"text": "Write a python function to check if the string is a concatenation of another string.", "code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "task_id": 874, "test_setup_code": "", "test_list": ["assert check_Concat(\"abcabcabc\",\"abc\") == True", "assert check_Concat(\"abcab\",\"abc\") == False", "assert check_Concat(\"aba\",\"ab\") == False"], "challenge_test_list": []}
{"text": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "code": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) ", "task_id": 875, "test_setup_code": "", "test_list": ["assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1", "assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2", "assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6"], "challenge_test_list": []}
{"text": "Write a python function to find lcm of two positive integers.", "code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "task_id": 876, "test_setup_code": "", "test_list": ["assert lcm(4,6) == 12", "assert lcm(15,17) == 255", "assert lcm(2,6) == 6"], "challenge_test_list": []}
{"text": "Write a python function to sort the given string.", "code": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) ", "task_id": 877, "test_setup_code": "", "test_list": ["assert sort_String(\"cba\") == \"abc\"", "assert sort_String(\"data\") == \"aadt\"", "assert sort_String(\"zxy\") == \"xyz\""], "challenge_test_list": []}
{"text": "Write a function to check if the given tuple contains only k elements.", "code": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) ", "task_id": 878, "test_setup_code": "", "test_list": ["assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True", "assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True", "assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "code": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "task_id": 879, "test_setup_code": "", "test_list": ["assert text_match(\"aabbbbd\") == 'Not matched!'", "assert text_match(\"aabAbbbc\") == 'Not matched!'", "assert text_match(\"accddbbjjjb\") == 'Found a match!'"], "challenge_test_list": []}
{"text": "Write a python function to find number of solutions in quadratic equation.", "code": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") ", "task_id": 880, "test_setup_code": "", "test_list": ["assert Check_Solution(2,5,2) == \"2 solutions\"", "assert Check_Solution(1,1,1) == \"No solutions\"", "assert Check_Solution(1,2,1) == \"1 solution\""], "challenge_test_list": []}
{"text": "Write a function to find the sum of first even and odd number of a given list.", "code": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "task_id": 881, "test_setup_code": "", "test_list": ["assert sum_even_odd([1,3,5,7,4,1,6,8])==5", "assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3", "assert sum_even_odd([1,5,7,9,10])==11"], "challenge_test_list": []}
{"text": "Write a function to caluclate perimeter of a parallelogram.", "code": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter", "task_id": 882, "test_setup_code": "", "test_list": ["assert parallelogram_perimeter(10,20)==400", "assert parallelogram_perimeter(15,20)==600", "assert parallelogram_perimeter(8,9)==144"], "challenge_test_list": []}
{"text": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "task_id": 883, "test_setup_code": "", "test_list": ["assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]", "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]", "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the bits are within a given range or not.", "code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "task_id": 884, "test_setup_code": "", "test_list": ["assert all_Bits_Set_In_The_Given_Range(10,2,1) == True ", "assert all_Bits_Set_In_The_Given_Range(5,2,4) == False", "assert all_Bits_Set_In_The_Given_Range(22,2,3) == True "], "challenge_test_list": []}
