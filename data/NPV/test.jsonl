{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/4", "description": "For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0", "code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "input_output_pairs": [{"input": "abs(mean_absolute_deviation([1.0, 2.0, 3.0]) - 2.0 / 3.0)", "output": "1e-06", "ops": "<"}, {"input": "abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) - 1.0)", "output": "1e-06", "ops": "<"}, {"input": "abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0)", "output": "1e-06", "ops": "<"}], "context": "from typing import List", "instance_idx": 0, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/116", "description": "In this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]", "code": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "input_output_pairs": [{"input": "sort_array([1, 5, 2, 3, 4])", "output": "[1, 2, 4, 3, 5]", "ops": "=="}, {"input": "sort_array([-2, -3, -4, -5, -6])", "output": "[-4, -2, -6, -5, -3]", "ops": "=="}, {"input": "sort_array([1, 0, 2, 3, 4])", "output": "[0, 1, 2, 4, 3]", "ops": "=="}, {"input": "sort_array([])", "output": "[]", "ops": "=="}, {"input": "sort_array([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])", "output": "[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]", "ops": "=="}, {"input": "sort_array([3, 6, 44, 12, 32, 5])", "output": "[32, 3, 5, 6, 12, 44]", "ops": "=="}, {"input": "sort_array([2, 4, 8, 16, 32])", "output": "[2, 4, 8, 16, 32]", "ops": "=="}, {"input": "sort_array([2, 4, 8, 16, 32])", "output": "[2, 4, 8, 16, 32]", "ops": "=="}], "context": "", "instance_idx": 1, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 170, "description": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range", "input_output_pairs": [{"input": "sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)", "output": "29", "ops": "=="}, {"input": "sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)", "output": "16", "ops": "=="}, {"input": "sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)", "output": "38", "ops": "=="}], "context": "", "instance_idx": 2, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 357, "description": "Write a function to find the maximum element of all the given tuple records.", "code": "def find_max(test_list):\n  res = max(int(j) for i in test_list for j in i)\n  return (res)", "input_output_pairs": [{"input": "find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])", "output": "10", "ops": "=="}, {"input": "find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)])", "output": "11", "ops": "=="}, {"input": "find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)])", "output": "12", "ops": "=="}], "context": "", "instance_idx": 3, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/21", "description": "Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]", "code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]", "input_output_pairs": [{"input": "rescale_to_unit([2.0, 49.9])", "output": "[0.0, 1.0]", "ops": "=="}, {"input": "rescale_to_unit([100.0, 49.9])", "output": "[1.0, 0.0]", "ops": "=="}, {"input": "rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])", "output": "[0.0, 0.25, 0.5, 0.75, 1.0]", "ops": "=="}, {"input": "rescale_to_unit([2.0, 1.0, 5.0, 3.0, 4.0])", "output": "[0.25, 0.0, 1.0, 0.5, 0.75]", "ops": "=="}, {"input": "rescale_to_unit([12.0, 11.0, 15.0, 13.0, 14.0])", "output": "[0.25, 0.0, 1.0, 0.5, 0.75]", "ops": "=="}], "context": "from typing import List", "instance_idx": 4, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 120, "description": "Write a function to find the maximum product from the pairs of tuples within a given list.", "code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max", "input_output_pairs": [{"input": "max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])", "output": "36", "ops": "=="}, {"input": "max_product_tuple([(10, 20), (15, 2), (5, 10)])", "output": "200", "ops": "=="}, {"input": "max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)])", "output": "484", "ops": "=="}], "context": "", "instance_idx": 5, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 250, "description": "Write a python function to count the occcurences of an element in a tuple.", "code": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count", "input_output_pairs": [{"input": "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4)", "output": "0", "ops": "=="}, {"input": "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10)", "output": "3", "ops": "=="}, {"input": "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8)", "output": "4", "ops": "=="}], "context": "", "instance_idx": 6, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 431, "description": "Write a function that takes two lists and returns true if they have at least one common element.", "code": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result", "input_output_pairs": [{"input": "common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])", "output": "True", "ops": "=="}, {"input": "common_element([1, 2, 3, 4, 5], [6, 7, 8, 9])", "output": "None", "ops": "=="}, {"input": "common_element(['a', 'b', 'c'], ['d', 'b', 'e'])", "output": "True", "ops": "=="}], "context": "", "instance_idx": 7, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 224, "description": "Write a python function to count set bits of a given number.", "code": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count", "input_output_pairs": [{"input": "count_Set_Bits(2)", "output": "1", "ops": "=="}, {"input": "count_Set_Bits(4)", "output": "1", "ops": "=="}, {"input": "count_Set_Bits(6)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 8, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/132", "description": "Create a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested('[[]]') \u279e True\nis_nested('[]]]]]]][[[[[]') \u279e False\nis_nested('[][]') \u279e False\nis_nested('[]') \u279e False\nis_nested('[[][]]') \u279e True\nis_nested('[[]][[') \u279e True", "code": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2", "input_output_pairs": [{"input": "is_nested('[[]]')", "output": "True", "ops": "=="}, {"input": "is_nested('[]]]]]]][[[[[]')", "output": "False", "ops": "=="}, {"input": "is_nested('[][]')", "output": "False", "ops": "=="}, {"input": "is_nested('[]')", "output": "False", "ops": "=="}, {"input": "is_nested('[[[[]]]]')", "output": "True", "ops": "=="}, {"input": "is_nested('[]]]]]]]]]]')", "output": "False", "ops": "=="}, {"input": "is_nested('[][][[]]')", "output": "True", "ops": "=="}, {"input": "is_nested('[[]')", "output": "False", "ops": "=="}, {"input": "is_nested('[]]')", "output": "False", "ops": "=="}, {"input": "is_nested('[[]][[')", "output": "True", "ops": "=="}, {"input": "is_nested('[[][]]')", "output": "True", "ops": "=="}, {"input": "is_nested('')", "output": "False", "ops": "=="}, {"input": "is_nested('[[[[[[[[')", "output": "False", "ops": "=="}, {"input": "is_nested(']]]]]]]]')", "output": "False", "ops": "=="}], "context": "", "instance_idx": 9, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 305, "description": "Write a function to match two words from a list of words starting with letter 'p'.", "code": "def start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()", "input_output_pairs": [{"input": "start_withp(['Python PHP', 'Java JavaScript', 'c c++'])", "output": "('Python', 'PHP')", "ops": "=="}, {"input": "start_withp(['Python Programming', 'Java Programming'])", "output": "('Python', 'Programming')", "ops": "=="}, {"input": "start_withp(['Pqrst Pqr', 'qrstuv'])", "output": "('Pqrst', 'Pqr')", "ops": "=="}], "context": "import re", "instance_idx": 10, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 143, "description": "Write a function to find number of lists present in the given tuple.", "code": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input)", "input_output_pairs": [{"input": "find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))", "output": "2", "ops": "=="}, {"input": "find_lists(([1, 2], [3, 4], [5, 6]))", "output": "3", "ops": "=="}, {"input": "find_lists([9, 8, 7, 6, 5, 4, 3, 2, 1])", "output": "1", "ops": "=="}], "context": "", "instance_idx": 11, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 462, "description": "Write a function to find all possible combinations of the elements of a given list.", "code": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "input_output_pairs": [{"input": "combinations_list(['orange', 'red', 'green', 'blue'])", "output": "[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'],\n    ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue',\n    'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'\n    ], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue',\n    'green', 'red', 'orange']]", "ops": "=="}, {"input": "combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])", "output": "[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], [\n    'blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'],\n    ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], [\n    'white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue',\n    'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], [\n    'black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'],\n    ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black',\n    'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], [\n    'black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black',\n    'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black',\n    'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], [\n    'orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], [\n    'orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange',\n    'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'\n    ], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], [\n    'orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], [\n    'orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue',\n    'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], [\n    'orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], [\n    'orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], [\n    'orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue',\n    'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black',\n    'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange',\n    'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'],\n    ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black',\n    'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green',\n    'red']]", "ops": "=="}, {"input": "combinations_list(['red', 'green', 'black', 'orange'])", "output": "[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], [\n    'black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange',\n    'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange',\n    'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], [\n    'orange', 'black', 'green', 'red']]", "ops": "=="}], "context": "", "instance_idx": 12, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/111", "description": "Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}", "code": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1", "input_output_pairs": [{"input": "histogram('a b b a')", "output": "{'a': 2, 'b': 2}", "ops": "=="}, {"input": "histogram('a b c a b')", "output": "{'a': 2, 'b': 2}", "ops": "=="}, {"input": "histogram('a b c d g')", "output": "{'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}", "ops": "=="}, {"input": "histogram('r t g')", "output": "{'r': 1, 't': 1, 'g': 1}", "ops": "=="}, {"input": "histogram('b b b b a')", "output": "{'b': 4}", "ops": "=="}, {"input": "histogram('r t g')", "output": "{'r': 1, 't': 1, 'g': 1}", "ops": "=="}, {"input": "histogram('')", "output": "{}", "ops": "=="}, {"input": "histogram('a')", "output": "{'a': 1}", "ops": "=="}], "context": "", "instance_idx": 13, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/107", "description": "Given a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)", "input_output_pairs": [{"input": "even_odd_palindrome(123)", "output": "(8, 13)", "ops": "=="}, {"input": "even_odd_palindrome(12)", "output": "(4, 6)", "ops": "=="}, {"input": "even_odd_palindrome(3)", "output": "(1, 2)", "ops": "=="}, {"input": "even_odd_palindrome(63)", "output": "(6, 8)", "ops": "=="}, {"input": "even_odd_palindrome(25)", "output": "(5, 6)", "ops": "=="}, {"input": "even_odd_palindrome(19)", "output": "(4, 6)", "ops": "=="}, {"input": "even_odd_palindrome(9)", "output": "(4, 5)", "ops": "=="}, {"input": "even_odd_palindrome(1)", "output": "(0, 1)", "ops": "=="}], "context": "", "instance_idx": 14, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 104, "description": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "code": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result", "input_output_pairs": [{"input": "sort_sublists((['green', 'orange'], ['black', 'white'], ['white', 'black',\n    'orange']))", "output": "[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "ops": "=="}, {"input": "sort_sublists(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']))", "output": "[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]", "ops": "=="}, {"input": "sort_sublists((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel',\n    'bronze']))", "output": "[['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]", "ops": "=="}], "context": "", "instance_idx": 15, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 264, "description": "Write a function to calculate a dog's age in dog's years.", "code": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age", "input_output_pairs": [{"input": "dog_age(12)", "output": "61", "ops": "=="}, {"input": "dog_age(15)", "output": "73", "ops": "=="}, {"input": "dog_age(24)", "output": "109", "ops": "=="}], "context": "", "instance_idx": 16, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 434, "description": "Write a function that matches a string that has an a followed by one or more b's.", "code": "def text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "input_output_pairs": [{"input": "text_match_one('ac')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_one('dc')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_one('abba')", "output": "'Found a match!'", "ops": "=="}], "context": "import re", "instance_idx": 17, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 4, "description": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "code": "def heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums", "input_output_pairs": [{"input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)", "output": "[85, 75, 65]", "ops": "=="}, {"input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)", "output": "[85, 75]", "ops": "=="}, {"input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)", "output": "[85, 75, 65, 58, 35]", "ops": "=="}], "context": "import heapq as hq", "instance_idx": 18, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 268, "description": "Write a function to find the n'th star number.", "code": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1)", "input_output_pairs": [{"input": "find_star_num(3)", "output": "37", "ops": "=="}, {"input": "find_star_num(4)", "output": "73", "ops": "=="}, {"input": "find_star_num(5)", "output": "121", "ops": "=="}], "context": "", "instance_idx": 19, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 179, "description": "Write a function to find if the given number is a keith number or not.", "code": "def is_num_keith(x): \n\tterms = [] \n\ttemp = x \n\tn = 0 \n\twhile (temp > 0): \n\t\tterms.append(temp % 10) \n\t\ttemp = int(temp / 10) \n\t\tn+=1 \n\tterms.reverse() \n\tnext_term = 0 \n\ti = n \n\twhile (next_term < x): \n\t\tnext_term = 0 \n\t\tfor j in range(1,n+1): \n\t\t\tnext_term += terms[i - j] \n\t\tterms.append(next_term) \n\t\ti+=1 \n\treturn (next_term == x)", "input_output_pairs": [{"input": "is_num_keith(14)", "output": "True", "ops": "=="}, {"input": "is_num_keith(12)", "output": "False", "ops": "=="}, {"input": "is_num_keith(197)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 20, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/42", "description": "Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]", "code": "def incr_list(l: list):\n    return [(e + 1) for e in l]", "input_output_pairs": [{"input": "incr_list([])", "output": "[]", "ops": "=="}, {"input": "incr_list([3, 2, 1])", "output": "[4, 3, 2]", "ops": "=="}, {"input": "incr_list([5, 2, 5, 2, 3, 3, 9, 0, 123])", "output": "[6, 3, 6, 3, 4, 4, 10, 1, 124]", "ops": "=="}], "context": "", "instance_idx": 21, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 226, "description": "Write a python function to remove the characters which have odd index values of a given string.", "code": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result", "input_output_pairs": [{"input": "odd_values_string('abcdef')", "output": "'ace'", "ops": "=="}, {"input": "odd_values_string('python')", "output": "'pto'", "ops": "=="}, {"input": "odd_values_string('data')", "output": "'dt'", "ops": "=="}], "context": "", "instance_idx": 22, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 80, "description": "Write a function to find the nth tetrahedral number.", "code": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6", "input_output_pairs": [{"input": "tetrahedral_number(5)", "output": "35.0", "ops": "=="}, {"input": "tetrahedral_number(6)", "output": "56.0", "ops": "=="}, {"input": "tetrahedral_number(7)", "output": "84.0", "ops": "=="}], "context": "", "instance_idx": 23, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/29", "description": "Filter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']", "code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]", "input_output_pairs": [{"input": "filter_by_prefix([], 'john')", "output": "[]", "ops": "=="}, {"input": "filter_by_prefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')", "output": "['xxx', 'xxxAAA', 'xxx']", "ops": "=="}], "context": "from typing import List", "instance_idx": 24, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 134, "description": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.", "code": "def check_last (arr,n,p): \n    _sum = 0\n    for i in range(n): \n        _sum = _sum + arr[i] \n    if p == 1: \n        if _sum % 2 == 0: \n            return \"ODD\"\n        else: \n            return \"EVEN\"\n    return \"EVEN\"", "input_output_pairs": [{"input": "check_last([5, 7, 10], 3, 1)", "output": "'ODD'", "ops": "=="}, {"input": "check_last([2, 3], 2, 3)", "output": "'EVEN'", "ops": "=="}, {"input": "check_last([1, 2, 3], 3, 1)", "output": "'ODD'", "ops": "=="}], "context": "", "instance_idx": 25, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 371, "description": "Write a function to find the smallest missing element in a sorted array.", "code": "def smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)", "input_output_pairs": [{"input": "smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)", "output": "7", "ops": "=="}, {"input": "smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6)", "output": "3", "ops": "=="}, {"input": "smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)", "output": "0", "ops": "=="}], "context": "", "instance_idx": 26, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/48", "description": "Checks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse", "code": "def is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True", "input_output_pairs": [{"input": "is_palindrome('')", "output": "True", "ops": "=="}, {"input": "is_palindrome('aba')", "output": "True", "ops": "=="}, {"input": "is_palindrome('aaaaa')", "output": "True", "ops": "=="}, {"input": "is_palindrome('zbcd')", "output": "False", "ops": "=="}, {"input": "is_palindrome('xywyx')", "output": "True", "ops": "=="}, {"input": "is_palindrome('xywyz')", "output": "False", "ops": "=="}, {"input": "is_palindrome('xywzx')", "output": "False", "ops": "=="}], "context": "", "instance_idx": 27, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 406, "description": "Write a python function to find the parity of a given number.", "code": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return (\"Odd Parity\"); \n    return (\"Even Parity\");", "input_output_pairs": [{"input": "find_Parity(12)", "output": "'Even Parity'", "ops": "=="}, {"input": "find_Parity(7)", "output": "'Odd Parity'", "ops": "=="}, {"input": "find_Parity(10)", "output": "'Even Parity'", "ops": "=="}], "context": "", "instance_idx": 28, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 184, "description": "Write a function to find all the values in a list that are greater than a specified number.", "code": "def greater_specificnum(list,num):\n greater_specificnum=all(x >= num for x in list)\n return greater_specificnum", "input_output_pairs": [{"input": "greater_specificnum([220, 330, 500], 200)", "output": "True", "ops": "=="}, {"input": "greater_specificnum([12, 17, 21], 20)", "output": "False", "ops": "=="}, {"input": "greater_specificnum([1, 2, 3, 4], 10)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 29, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 416, "description": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "code": "def breakSum(n): \n\tdp = [0]*(n+1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \n\treturn dp[n]", "input_output_pairs": [{"input": "breakSum(12)", "output": "13", "ops": "=="}, {"input": "breakSum(24)", "output": "27", "ops": "=="}, {"input": "breakSum(23)", "output": "23", "ops": "=="}], "context": "MAX = 1000000", "instance_idx": 30, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 85, "description": "Write a function to find the surface area of a sphere.", "code": "def surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea", "input_output_pairs": [{"input": "surfacearea_sphere(10)", "output": "1256.6370614359173", "ops": "=="}, {"input": "surfacearea_sphere(15)", "output": "2827.4333882308138", "ops": "=="}, {"input": "surfacearea_sphere(20)", "output": "5026.548245743669", "ops": "=="}], "context": "import math", "instance_idx": 31, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 258, "description": "Write a function to find number of odd elements in the given list using lambda function.", "code": "def count_odd(array_nums):\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   return count_odd", "input_output_pairs": [{"input": "count_odd([1, 2, 3, 5, 7, 8, 10])", "output": "4", "ops": "=="}, {"input": "count_odd([10, 15, 14, 13, -18, 12, -20])", "output": "2", "ops": "=="}, {"input": "count_odd([1, 2, 4, 8, 9])", "output": "2", "ops": "=="}], "context": "", "instance_idx": 32, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 428, "description": "Write a function to sort the given array by using shell sort.", "code": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "input_output_pairs": [{"input": "shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])", "output": "[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "ops": "=="}, {"input": "shell_sort([24, 22, 39, 34, 87, 73, 68])", "output": "[22, 24, 34, 39, 68, 73, 87]", "ops": "=="}, {"input": "shell_sort([32, 30, 16, 96, 82, 83, 74])", "output": "[16, 30, 32, 74, 82, 83, 96]", "ops": "=="}], "context": "", "instance_idx": 33, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 135, "description": "Write a function to find the nth hexagonal number.", "code": "def hexagonal_num(n): \n\treturn n*(2*n - 1)", "input_output_pairs": [{"input": "hexagonal_num(10)", "output": "190", "ops": "=="}, {"input": "hexagonal_num(5)", "output": "45", "ops": "=="}, {"input": "hexagonal_num(7)", "output": "91", "ops": "=="}], "context": "", "instance_idx": 34, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 61, "description": "Write a python function to count number of substrings with the sum of digits equal to their length.", "code": "def count_Substrings(s,n):\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count", "input_output_pairs": [{"input": "count_Substrings('112112', 6)", "output": "6", "ops": "=="}, {"input": "count_Substrings('111', 3)", "output": "6", "ops": "=="}, {"input": "count_Substrings('1101112', 7)", "output": "12", "ops": "=="}], "context": "from collections import defaultdict", "instance_idx": 35, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 180, "description": "Write a function to calculate distance between two points using latitude and longitude.", "code": "def distance_lat_long(slat,slon,elat,elon):\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\n return dist", "input_output_pairs": [{"input": "distance_lat_long(23.5, 67.5, 25.5, 69.5)", "output": "12179.372041317429", "ops": "=="}, {"input": "distance_lat_long(10.5, 20.5, 30.5, 40.5)", "output": "6069.397933300514", "ops": "=="}, {"input": "distance_lat_long(10, 20, 30, 40)", "output": "6783.751974994595", "ops": "=="}], "context": "from math import radians, sin, cos, acos", "instance_idx": 36, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 242, "description": "Write a function to count total characters in a string.", "code": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total", "input_output_pairs": [{"input": "count_charac('python programming')", "output": "18", "ops": "=="}, {"input": "count_charac('language')", "output": "8", "ops": "=="}, {"input": "count_charac('words')", "output": "5", "ops": "=="}], "context": "", "instance_idx": 37, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/125", "description": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "input_output_pairs": [{"input": "split_words('Hello world!')", "output": "['Hello', 'world!']", "ops": "=="}, {"input": "split_words('Hello,world!')", "output": "['Hello', 'world!']", "ops": "=="}, {"input": "split_words('Hello world,!')", "output": "['Hello', 'world,!']", "ops": "=="}, {"input": "split_words('Hello,Hello,world !')", "output": "['Hello,Hello,world', '!']", "ops": "=="}, {"input": "split_words('abcdef')", "output": "3", "ops": "=="}, {"input": "split_words('aaabb')", "output": "2", "ops": "=="}, {"input": "split_words('aaaBb')", "output": "1", "ops": "=="}, {"input": "split_words('')", "output": "0", "ops": "=="}], "context": "", "instance_idx": 38, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/37", "description": "This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]", "code": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans", "input_output_pairs": [{"input": "tuple(sort_even([1, 2, 3]))", "output": "tuple([1, 2, 3])", "ops": "=="}, {"input": "tuple(sort_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "output": "tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])", "ops": "=="}, {"input": "tuple(sort_even([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))", "output": "tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])", "ops": "=="}], "context": "", "instance_idx": 39, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 271, "description": "Write a python function to find the sum of fifth power of first n even natural numbers.", "code": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum;", "input_output_pairs": [{"input": "even_Power_Sum(2)", "output": "1056", "ops": "=="}, {"input": "even_Power_Sum(3)", "output": "8832", "ops": "=="}, {"input": "even_Power_Sum(1)", "output": "32", "ops": "=="}], "context": "", "instance_idx": 40, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/23", "description": "Return length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3", "code": "def strlen(string: str) -> int:\n    return len(string)", "input_output_pairs": [{"input": "strlen('')", "output": "0", "ops": "=="}, {"input": "strlen('x')", "output": "1", "ops": "=="}, {"input": "strlen('asdasnakj')", "output": "9", "ops": "=="}], "context": "", "instance_idx": 41, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/131", "description": "Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15", "code": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product", "input_output_pairs": [{"input": "digits(5)", "output": "5", "ops": "=="}, {"input": "digits(54)", "output": "5", "ops": "=="}, {"input": "digits(120)", "output": "1", "ops": "=="}, {"input": "digits(5014)", "output": "5", "ops": "=="}, {"input": "digits(98765)", "output": "315", "ops": "=="}, {"input": "digits(5576543)", "output": "2625", "ops": "=="}, {"input": "digits(2468)", "output": "0", "ops": "=="}], "context": "", "instance_idx": 42, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 382, "description": "Write a function to find the number of rotations in a circularly sorted array.", "code": "def find_rotation_count(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "input_output_pairs": [{"input": "find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])", "output": "3", "ops": "=="}, {"input": "find_rotation_count([8, 9, 10, 2, 5, 6])", "output": "3", "ops": "=="}, {"input": "find_rotation_count([2, 5, 6, 8, 9, 10])", "output": "0", "ops": "=="}], "context": "", "instance_idx": 43, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 227, "description": "Write a function to find minimum of three numbers.", "code": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest", "input_output_pairs": [{"input": "min_of_three(10, 20, 0)", "output": "0", "ops": "=="}, {"input": "min_of_three(19, 15, 18)", "output": "15", "ops": "=="}, {"input": "min_of_three(-10, -20, -30)", "output": "-30", "ops": "=="}], "context": "", "instance_idx": 44, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 1, "description": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "code": "def min_cost(cost, m, n): \n\ttc = [[0 for x in range(C)] for x in range(R)] \n\ttc[0][0] = cost[0][0] \n\tfor i in range(1, m+1): \n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \n\tfor j in range(1, n+1): \n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \n\tfor i in range(1, m+1): \n\t\tfor j in range(1, n+1): \n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \n\treturn tc[m][n]", "input_output_pairs": [{"input": "min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)", "output": "8", "ops": "=="}, {"input": "min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)", "output": "12", "ops": "=="}, {"input": "min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)", "output": "16", "ops": "=="}], "context": "R = 3\nC = 3", "instance_idx": 45, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 154, "description": "Write a function to extract every specified element from a given two dimensional list.", "code": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result", "input_output_pairs": [{"input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)", "output": "[1, 4, 7]", "ops": "=="}, {"input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)", "output": "[3, 6, 9]", "ops": "=="}, {"input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)", "output": "[2, 2, 5]", "ops": "=="}], "context": "", "instance_idx": 46, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 453, "description": "Write a python function to find the sum of even factors of a number.", "code": "def sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res", "input_output_pairs": [{"input": "sumofFactors(18)", "output": "26", "ops": "=="}, {"input": "sumofFactors(30)", "output": "48", "ops": "=="}, {"input": "sumofFactors(6)", "output": "8", "ops": "=="}], "context": "import math", "instance_idx": 47, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/127", "description": "You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"", "code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"", "input_output_pairs": [{"input": "intersection((1, 2), (2, 3))", "output": "'NO'", "ops": "=="}, {"input": "intersection((-1, 1), (0, 4))", "output": "'NO'", "ops": "=="}, {"input": "intersection((-3, -1), (-5, 5))", "output": "'YES'", "ops": "=="}, {"input": "intersection((-2, 2), (-4, 0))", "output": "'YES'", "ops": "=="}, {"input": "intersection((-11, 2), (-1, -1))", "output": "'NO'", "ops": "=="}, {"input": "intersection((1, 2), (3, 5))", "output": "'NO'", "ops": "=="}, {"input": "intersection((1, 2), (1, 2))", "output": "'NO'", "ops": "=="}, {"input": "intersection((-2, -2), (-3, -2))", "output": "'NO'", "ops": "=="}], "context": "", "instance_idx": 48, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/142", "description": "\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126", "code": "def sum_squares(lst):\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)", "input_output_pairs": [{"input": "sum_squares([1, 2, 3])", "output": "6", "ops": "=="}, {"input": "sum_squares([1, 4, 9])", "output": "14", "ops": "=="}, {"input": "sum_squares([])", "output": "0", "ops": "=="}, {"input": "sum_squares([1, 1, 1, 1, 1, 1, 1, 1, 1])", "output": "9", "ops": "=="}, {"input": "sum_squares([-1, -1, -1, -1, -1, -1, -1, -1, -1])", "output": "-3", "ops": "=="}, {"input": "sum_squares([0])", "output": "0", "ops": "=="}, {"input": "sum_squares([-1, -5, 2, -1, -5])", "output": "-126", "ops": "=="}, {"input": "sum_squares([-56, -99, 1, 0, -2])", "output": "3030", "ops": "=="}, {"input": "sum_squares([-1, 0, 0, 0, 0, 0, 0, 0, -1])", "output": "0", "ops": "=="}, {"input": "sum_squares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])", "output": "-14196", "ops": "=="}, {"input": "sum_squares([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, \n    11, 16, 16, 4, 10])", "output": "-1448", "ops": "=="}], "context": "", "instance_idx": 49, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/148", "description": "There are eight planets in our solar system: the closerst to the Sun\nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2.\nThe function should return a tuple containing all planets whose orbits are\nlocated between the orbit of planet1 and the orbit of planet2, sorted by\nthe proximity to the sun.\nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names.\nExamples\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])", "input_output_pairs": [{"input": "bf('Jupiter', 'Neptune')", "output": "('Saturn', 'Uranus')", "ops": "=="}, {"input": "bf('Earth', 'Mercury')", "output": "('Venus',)", "ops": "=="}, {"input": "bf('Mercury', 'Uranus')", "output": "('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')", "ops": "=="}, {"input": "bf('Neptune', 'Venus')", "output": "('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')", "ops": "=="}, {"input": "bf('Earth', 'Earth')", "output": "()", "ops": "=="}, {"input": "bf('Mars', 'Earth')", "output": "()", "ops": "=="}, {"input": "bf('Jupiter', 'Makemake')", "output": "()", "ops": "=="}], "context": "", "instance_idx": 50, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 43, "description": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "code": "def text_match(text):\n  patterns = '^[a-z]+_[a-z]+$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')", "input_output_pairs": [{"input": "text_match('aab_cbbbc')", "output": "'Found a match!'", "ops": "=="}, {"input": "text_match('aab_Abbbc')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match('Aaab_abbbc')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match('aab-cbbbc')", "output": "'Not matched!'", "ops": "=="}], "context": "import re", "instance_idx": 51, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 479, "description": "Write a python function to find the first digit of a given number.", "code": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10; \n    return int(n)", "input_output_pairs": [{"input": "first_Digit(123)", "output": "1", "ops": "=="}, {"input": "first_Digit(456)", "output": "4", "ops": "=="}, {"input": "first_Digit(12)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 52, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 422, "description": "Write a python function to find the average of cubes of first n natural numbers.", "code": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6)", "input_output_pairs": [{"input": "find_Average_Of_Cube(2)", "output": "4.5", "ops": "=="}, {"input": "find_Average_Of_Cube(3)", "output": "12", "ops": "=="}, {"input": "find_Average_Of_Cube(1)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 53, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/76", "description": "Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false", "code": "def is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x)", "input_output_pairs": [{"input": "is_simple_power(16, 2)", "output": "True", "ops": "=="}, {"input": "is_simple_power(143214, 16)", "output": "False", "ops": "=="}, {"input": "is_simple_power(4, 2)", "output": "True", "ops": "=="}, {"input": "is_simple_power(9, 3)", "output": "True", "ops": "=="}, {"input": "is_simple_power(16, 4)", "output": "True", "ops": "=="}, {"input": "is_simple_power(24, 2)", "output": "False", "ops": "=="}, {"input": "is_simple_power(128, 4)", "output": "False", "ops": "=="}, {"input": "is_simple_power(12, 6)", "output": "False", "ops": "=="}, {"input": "is_simple_power(1, 1)", "output": "True", "ops": "=="}, {"input": "is_simple_power(1, 12)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 54, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 232, "description": "Write a function to get the n largest items from a dataset.", "code": "def larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest", "input_output_pairs": [{"input": "larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)", "output": "[100, 90]", "ops": "=="}, {"input": "larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)", "output": "[100, 90, 80, 70, 60]", "ops": "=="}, {"input": "larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)", "output": "[100, 90, 80]", "ops": "=="}], "context": "import heapq", "instance_idx": 55, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 448, "description": "Write a function to calculate the sum of perrin numbers.", "code": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum", "input_output_pairs": [{"input": "cal_sum(9)", "output": "49", "ops": "=="}, {"input": "cal_sum(10)", "output": "66", "ops": "=="}, {"input": "cal_sum(11)", "output": "88", "ops": "=="}], "context": "", "instance_idx": 56, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 325, "description": "Write a python function to find the minimum number of squares whose sum is equal to a given number.", "code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n;\n    res = n \n    for x in range(1,n + 1):\n        temp = x * x;\n        if temp > n:\n            break\n        else:\n            res = min(res,1 + get_Min_Squares(n  - temp)) \n    return res;", "input_output_pairs": [{"input": "get_Min_Squares(6)", "output": "3", "ops": "=="}, {"input": "get_Min_Squares(2)", "output": "2", "ops": "=="}, {"input": "get_Min_Squares(4)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 57, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 359, "description": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.", "code": "def Check_Solution(a,b,c): \n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n    else: \n        return (\"No\");", "input_output_pairs": [{"input": "Check_Solution(1, 3, 2)", "output": "'Yes'", "ops": "=="}, {"input": "Check_Solution(1, 2, 3)", "output": "'No'", "ops": "=="}, {"input": "Check_Solution(1, -5, 6)", "output": "'No'", "ops": "=="}], "context": "", "instance_idx": 58, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/140", "description": "Given a string text, replace all spaces in it with underscores,\nand if a string has more than 2 consecutive spaces,\nthen replace all consecutive spaces with -\n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"", "code": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text", "input_output_pairs": [{"input": "fix_spaces('Example')", "output": "'Example'", "ops": "=="}, {"input": "fix_spaces('Mudasir Hanif ')", "output": "'Mudasir_Hanif_'", "ops": "=="}, {"input": "fix_spaces('Yellow Yellow  Dirty  Fellow')", "output": "'Yellow_Yellow__Dirty__Fellow'", "ops": "=="}, {"input": "fix_spaces('Exa   mple')", "output": "'Exa-mple'", "ops": "=="}, {"input": "fix_spaces('   Exa 1 2 2 mple')", "output": "'-Exa_1_2_2_mple'", "ops": "=="}], "context": "", "instance_idx": 59, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 322, "description": "Write a function to find all index positions of the minimum values in a given list.", "code": "def position_min(list1):\n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result", "input_output_pairs": [{"input": "position_min([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])", "output": "[3, 11]", "ops": "=="}, {"input": "position_min([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])", "output": "[0]", "ops": "=="}, {"input": "position_min([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])", "output": "[1]", "ops": "=="}], "context": "", "instance_idx": 60, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 491, "description": "Write a function to find the sum of geometric progression series.", "code": "def sum_gp(a,n,r):\n total = (a * (1 - math.pow(r, n ))) / (1- r)\n return total", "input_output_pairs": [{"input": "sum_gp(1, 5, 2)", "output": "31", "ops": "=="}, {"input": "sum_gp(1, 5, 4)", "output": "341", "ops": "=="}, {"input": "sum_gp(2, 6, 3)", "output": "728", "ops": "=="}], "context": "import math", "instance_idx": 61, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/128", "description": "You are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\n\nExample:\n>>> prod_signs([1, 2, 2, -4]) == -9\n>>> prod_signs([0, 1]) == 0\n>>> prod_signs([]) == None", "code": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])", "input_output_pairs": [{"input": "prod_signs([1, 2, 2, -4])", "output": "-9", "ops": "=="}, {"input": "prod_signs([0, 1])", "output": "0", "ops": "=="}, {"input": "prod_signs([1, 1, 1, 2, 3, -1, 1])", "output": "-10", "ops": "=="}, {"input": "prod_signs([])", "output": "None", "ops": "=="}, {"input": "prod_signs([2, 4, 1, 2, -1, -1, 9])", "output": "20", "ops": "=="}, {"input": "prod_signs([-1, 1, -1, 1])", "output": "4", "ops": "=="}, {"input": "prod_signs([-1, 1, 1, 1])", "output": "-4", "ops": "=="}, {"input": "prod_signs([-1, 1, 1, 0])", "output": "0", "ops": "=="}], "context": "", "instance_idx": 62, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 499, "description": "Write a function to find the diameter of a circle.", "code": "def diameter_circle(r):\n  diameter=2*r\n  return diameter", "input_output_pairs": [{"input": "diameter_circle(10)", "output": "20", "ops": "=="}, {"input": "diameter_circle(40)", "output": "80", "ops": "=="}, {"input": "diameter_circle(15)", "output": "30", "ops": "=="}], "context": "", "instance_idx": 63, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 272, "description": "Write a function to perfom the rear element extraction from list of tuples records.", "code": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res)", "input_output_pairs": [{"input": "rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])", "output": "[21, 20, 19]", "ops": "=="}, {"input": "rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)])", "output": "[36, 25, 45]", "ops": "=="}, {"input": "rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)])", "output": "[14, 36, 56]", "ops": "=="}], "context": "", "instance_idx": 64, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 313, "description": "Write a python function to print positive numbers in a list.", "code": "def pos_nos(list1):\n  for num in list1: \n    if num >= 0: \n       return num", "input_output_pairs": [{"input": "pos_nos([-1, -2, 1, 2])", "output": "1", "ops": "=="}, {"input": "pos_nos([3, 4, -5])", "output": "3", "ops": "=="}, {"input": "pos_nos([-2, -3, 1])", "output": "1", "ops": "=="}], "context": "", "instance_idx": 65, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 218, "description": "Write a python function to find the minimum operations required to make two numbers equal.", "code": "def min_Operations(A,B):  \n    if (A > B): \n        swap(A,B)  \n    B = B // math.gcd(A,B);  \n    return B - 1", "input_output_pairs": [{"input": "min_Operations(2, 4)", "output": "1", "ops": "=="}, {"input": "min_Operations(4, 10)", "output": "4", "ops": "=="}, {"input": "min_Operations(1, 4)", "output": "3", "ops": "=="}], "context": "import math", "instance_idx": 66, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/13", "description": "Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5", "code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "input_output_pairs": [{"input": "greatest_common_divisor(3, 7)", "output": "1", "ops": "=="}, {"input": "greatest_common_divisor(10, 15)", "output": "5", "ops": "=="}, {"input": "greatest_common_divisor(49, 14)", "output": "7", "ops": "=="}, {"input": "greatest_common_divisor(144, 60)", "output": "12", "ops": "=="}], "context": "", "instance_idx": 67, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 426, "description": "Write a function to filter odd numbers using lambda function.", "code": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums", "input_output_pairs": [{"input": "filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "output": "[1, 3, 5, 7, 9]", "ops": "=="}, {"input": "filter_oddnumbers([10, 20, 45, 67, 84, 93])", "output": "[45, 67, 93]", "ops": "=="}, {"input": "filter_oddnumbers([5, 7, 9, 8, 6, 4, 3])", "output": "[5, 7, 9, 3]", "ops": "=="}], "context": "", "instance_idx": 68, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 459, "description": "Write a function to remove uppercase substrings from a given string by using regex.", "code": "def remove_uppercase(str1):\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\n  result =  remove_upper(str1)\n  return (result)", "input_output_pairs": [{"input": "remove_uppercase('cAstyoUrFavoRitETVshoWs')", "output": "'cstyoravoitshos'", "ops": "=="}, {"input": "remove_uppercase('wAtchTheinTernEtrAdIo')", "output": "'wtchheinerntrdo'", "ops": "=="}, {"input": "remove_uppercase('VoicESeaRchAndreComMendaTionS')", "output": "'oiceachndreomendaion'", "ops": "=="}], "context": "import re", "instance_idx": 69, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 417, "description": "Write a function to find common first element in given list of tuple.", "code": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()]", "input_output_pairs": [{"input": "group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])", "output": "[('x', 'y', 'z'), ('w', 't')]", "ops": "=="}, {"input": "group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')])", "output": "[('a', 'b', 'c'), ('d', 'e')]", "ops": "=="}, {"input": "group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')])", "output": "[('f', 'g', 'g'), ('h', 'i')]", "ops": "=="}], "context": "", "instance_idx": 70, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 320, "description": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "code": "def sum_difference(n):\n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n+1):\n        sumofsquares += num * num\n        squareofsum += num\n    squareofsum = squareofsum ** 2\n    return squareofsum - sumofsquares", "input_output_pairs": [{"input": "sum_difference(12)", "output": "5434", "ops": "=="}, {"input": "sum_difference(20)", "output": "41230", "ops": "=="}, {"input": "sum_difference(54)", "output": "2151270", "ops": "=="}], "context": "", "instance_idx": 71, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/59", "description": "Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2", "code": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest", "input_output_pairs": [{"input": "largest_prime_factor(15)", "output": "5", "ops": "=="}, {"input": "largest_prime_factor(27)", "output": "3", "ops": "=="}, {"input": "largest_prime_factor(63)", "output": "7", "ops": "=="}, {"input": "largest_prime_factor(330)", "output": "11", "ops": "=="}, {"input": "largest_prime_factor(13195)", "output": "29", "ops": "=="}], "context": "", "instance_idx": 72, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 101, "description": "Write a function to find the kth element in the given array.", "code": "def kth_element(arr, n, k):\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]", "input_output_pairs": [{"input": "kth_element([12, 3, 5, 7, 19], 5, 2)", "output": "3", "ops": "=="}, {"input": "kth_element([17, 24, 8, 23], 4, 3)", "output": "8", "ops": "=="}, {"input": "kth_element([16, 21, 25, 36, 4], 5, 4)", "output": "36", "ops": "=="}], "context": "", "instance_idx": 73, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 35, "description": "Write a function to find the n-th rectangular number.", "code": "def find_rect_num(n):\n  return n*(n + 1)", "input_output_pairs": [{"input": "find_rect_num(4)", "output": "20", "ops": "=="}, {"input": "find_rect_num(5)", "output": "30", "ops": "=="}, {"input": "find_rect_num(6)", "output": "42", "ops": "=="}], "context": "", "instance_idx": 74, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 128, "description": "Write a function to shortlist words that are longer than n from a given list of words.", "code": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len", "input_output_pairs": [{"input": "long_words(3, 'python is a programming language')", "output": "['python', 'programming', 'language']", "ops": "=="}, {"input": "long_words(2, 'writing a program')", "output": "['writing', 'program']", "ops": "=="}, {"input": "long_words(5, 'sorting list')", "output": "['sorting']", "ops": "=="}], "context": "", "instance_idx": 75, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 93, "description": "Write a function to calculate the value of 'a' to the power 'b'.", "code": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)", "input_output_pairs": [{"input": "power(3, 4)", "output": "81", "ops": "=="}, {"input": "power(2, 3)", "output": "8", "ops": "=="}, {"input": "power(5, 5)", "output": "3125", "ops": "=="}], "context": "", "instance_idx": 76, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 12, "description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "input_output_pairs": [{"input": "sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])", "output": "[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "ops": "=="}, {"input": "sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])", "output": "[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "ops": "=="}, {"input": "sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]])", "output": "[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "ops": "=="}], "context": "", "instance_idx": 77, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 68, "description": "Write a python function to check whether the given array is monotonic or not.", "code": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))", "input_output_pairs": [{"input": "is_Monotonic([6, 5, 4, 4])", "output": "True", "ops": "=="}, {"input": "is_Monotonic([1, 2, 2, 3])", "output": "True", "ops": "=="}, {"input": "is_Monotonic([1, 3, 2])", "output": "False", "ops": "=="}], "context": "", "instance_idx": 78, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 432, "description": "Write a function to find the median of a trapezium.", "code": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median", "input_output_pairs": [{"input": "median_trapezium(15, 25, 35)", "output": "20", "ops": "=="}, {"input": "median_trapezium(10, 20, 30)", "output": "15", "ops": "=="}, {"input": "median_trapezium(6, 9, 4)", "output": "7.5", "ops": "=="}], "context": "", "instance_idx": 79, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 360, "description": "Write a function to find the n\u2019th carol number.", "code": "def get_carol(n): \n\tresult = (2**n) - 1\n\treturn result * result - 2", "input_output_pairs": [{"input": "get_carol(2)", "output": "7", "ops": "=="}, {"input": "get_carol(4)", "output": "223", "ops": "=="}, {"input": "get_carol(5)", "output": "959", "ops": "=="}], "context": "", "instance_idx": 80, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 332, "description": "Write a function to count character frequency of a given string.", "code": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict", "input_output_pairs": [{"input": "char_frequency('python')", "output": "{'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}", "ops": "=="}, {"input": "char_frequency('program')", "output": "{'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}", "ops": "=="}, {"input": "char_frequency('language')", "output": "{'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}", "ops": "=="}], "context": "", "instance_idx": 81, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 364, "description": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "code": "def make_flip(ch): \n\treturn '1' if (ch == '0') else '0'\ndef get_flip_with_starting_charcter(str, expected): \n\tflip_count = 0\n\tfor i in range(len( str)): \n\t\tif (str[i] != expected): \n\t\t\tflip_count += 1\n\t\texpected = make_flip(expected) \n\treturn flip_count \ndef min_flip_to_make_string_alternate(str): \n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1'))", "input_output_pairs": [{"input": "min_flip_to_make_string_alternate('0001010111')", "output": "2", "ops": "=="}, {"input": "min_flip_to_make_string_alternate('001')", "output": "1", "ops": "=="}, {"input": "min_flip_to_make_string_alternate('010111011')", "output": "2", "ops": "=="}], "context": "", "instance_idx": 82, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/135", "description": "Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\n\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1", "code": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind", "input_output_pairs": [{"input": "can_arrange([1, 2, 4, 3, 5])", "output": "3", "ops": "=="}, {"input": "can_arrange([1, 2, 4, 5])", "output": "-1", "ops": "=="}, {"input": "can_arrange([1, 4, 2, 5, 6, 7, 8, 9, 10])", "output": "2", "ops": "=="}, {"input": "can_arrange([4, 8, 5, 7, 3])", "output": "4", "ops": "=="}, {"input": "can_arrange([])", "output": "-1", "ops": "=="}], "context": "", "instance_idx": 83, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 148, "description": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "code": "def sum_digits_single(x) : \n    ans = 0\n    while x : \n        ans += x % 10\n        x //= 10  \n    return ans \ndef closest(x) : \n    ans = 0\n    while (ans * 10 + 9 <= x) : \n        ans = ans * 10 + 9  \n    return ans   \ndef sum_digits_twoparts(N) : \n    A = closest(N)  \n    return sum_digits_single(A) + sum_digits_single(N - A)", "input_output_pairs": [{"input": "sum_digits_twoparts(35)", "output": "17", "ops": "=="}, {"input": "sum_digits_twoparts(7)", "output": "7", "ops": "=="}, {"input": "sum_digits_twoparts(100)", "output": "19", "ops": "=="}], "context": "", "instance_idx": 84, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/6", "description": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]", "code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]", "input_output_pairs": [{"input": "parse_nested_parens('(()()) ((())) () ((())()())')", "output": "[2, 3, 1, 3]", "ops": "=="}, {"input": "parse_nested_parens('() (()) ((())) (((())))')", "output": "[1, 2, 3, 4]", "ops": "=="}, {"input": "parse_nested_parens('(()(())((())))')", "output": "[4]", "ops": "=="}], "context": "from typing import List", "instance_idx": 85, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 421, "description": "Write a function to concatenate each element of tuple by the delimiter.", "code": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res))", "input_output_pairs": [{"input": "concatenate_tuple(('ID', 'is', 4, 'UTS'))", "output": "'ID-is-4-UTS'", "ops": "=="}, {"input": "concatenate_tuple(('QWE', 'is', 4, 'RTY'))", "output": "'QWE-is-4-RTY'", "ops": "=="}, {"input": "concatenate_tuple(('ZEN', 'is', 4, 'OP'))", "output": "'ZEN-is-4-OP'", "ops": "=="}], "context": "", "instance_idx": 86, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 246, "description": "Write a function for computing square roots using the babylonian method.", "code": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;", "input_output_pairs": [{"input": "babylonian_squareroot(10)", "output": "3.162277660168379", "ops": "=="}, {"input": "babylonian_squareroot(2)", "output": "1.414213562373095", "ops": "=="}, {"input": "babylonian_squareroot(9)", "output": "3.0", "ops": "=="}], "context": "", "instance_idx": 87, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/118", "description": "You are given a word. Your task is to find the closest vowel that stands between\ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition.\n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"", "code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"", "input_output_pairs": [{"input": "get_closest_vowel('yogurt')", "output": "'u'", "ops": "=="}, {"input": "get_closest_vowel('full')", "output": "'u'", "ops": "=="}, {"input": "get_closest_vowel('easy')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel('eAsy')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel('ali')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel('bad')", "output": "'a'", "ops": "=="}, {"input": "get_closest_vowel('most')", "output": "'o'", "ops": "=="}, {"input": "get_closest_vowel('ab')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel('ba')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel('quick')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel('anime')", "output": "'i'", "ops": "=="}, {"input": "get_closest_vowel('Asia')", "output": "''", "ops": "=="}, {"input": "get_closest_vowel('Above')", "output": "'o'", "ops": "=="}], "context": "", "instance_idx": 88, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/88", "description": "Given an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given array.\n\nExamples:\n* sort_array([]) => []\n* sort_array([5]) => [5]\n* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]", "code": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "input_output_pairs": [{"input": "sort_array([])", "output": "[]", "ops": "=="}, {"input": "sort_array([5])", "output": "[5]", "ops": "=="}, {"input": "sort_array([2, 4, 3, 0, 1, 5])", "output": "[0, 1, 2, 3, 4, 5]", "ops": "=="}, {"input": "sort_array([2, 4, 3, 0, 1, 5, 6])", "output": "[6, 5, 4, 3, 2, 1, 0]", "ops": "=="}, {"input": "sort_array([2, 1])", "output": "[1, 2]", "ops": "=="}, {"input": "sort_array([15, 42, 87, 32, 11, 0])", "output": "[0, 11, 15, 32, 42, 87]", "ops": "=="}, {"input": "sort_array([21, 14, 23, 11])", "output": "[23, 21, 14, 11]", "ops": "=="}], "context": "", "instance_idx": 89, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 208, "description": "Write a function to check the given decimal with a precision of 2 by using regex.", "code": "def is_decimal(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  result = num_fetch.search(num)\n  return bool(result)", "input_output_pairs": [{"input": "is_decimal('123.11')", "output": "True", "ops": "=="}, {"input": "is_decimal('0.21')", "output": "True", "ops": "=="}, {"input": "is_decimal('123.1214')", "output": "False", "ops": "=="}], "context": "import re", "instance_idx": 90, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 55, "description": "Write a function to find t-nth term of geometric series.", "code": "def tn_gp(a,n,r):\n  tn = a * (math.pow(r, n - 1))\n  return tn", "input_output_pairs": [{"input": "tn_gp(1, 5, 2)", "output": "16", "ops": "=="}, {"input": "tn_gp(1, 5, 4)", "output": "256", "ops": "=="}, {"input": "tn_gp(2, 6, 3)", "output": "486", "ops": "=="}], "context": "import math", "instance_idx": 91, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/43", "description": "pairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse", "code": "def pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False", "input_output_pairs": [{"input": "pairs_sum_to_zero([1, 3, 5, 0])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([1, 3, -2, 1])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([1, 2, 3, 7])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([2, 4, -5, 3, 5, 7])", "output": "True", "ops": "=="}, {"input": "pairs_sum_to_zero([1])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([-3, 9, -1, 3, 2, 30])", "output": "True", "ops": "=="}, {"input": "pairs_sum_to_zero([-3, 9, -1, 3, 2, 31])", "output": "True", "ops": "=="}, {"input": "pairs_sum_to_zero([-3, 9, -1, 4, 2, 30])", "output": "False", "ops": "=="}, {"input": "pairs_sum_to_zero([-3, 9, -1, 4, 2, 31])", "output": "False", "ops": "=="}], "context": "", "instance_idx": 92, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 460, "description": "Write a python function to get the first element of each sublist.", "code": "def Extract(lst): \n    return [item[0] for item in lst]", "input_output_pairs": [{"input": "Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])", "output": "[1, 3, 6]", "ops": "=="}, {"input": "Extract([[1, 2, 3], [4, 5]])", "output": "[1, 4]", "ops": "=="}, {"input": "Extract([[9, 8, 1], [1, 2]])", "output": "[9, 1]", "ops": "=="}], "context": "", "instance_idx": 93, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/15", "description": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'", "code": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])", "input_output_pairs": [{"input": "string_sequence(0)", "output": "'0'", "ops": "=="}, {"input": "string_sequence(3)", "output": "'0 1 2 3'", "ops": "=="}, {"input": "string_sequence(10)", "output": "'0 1 2 3 4 5 6 7 8 9 10'", "ops": "=="}], "context": "", "instance_idx": 94, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 49, "description": "Write a function to extract every first or specified element from a given two-dimensional list.", "code": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result", "input_output_pairs": [{"input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)", "output": "[1, 4, 7]", "ops": "=="}, {"input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)", "output": "[3, 6, 9]", "ops": "=="}, {"input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)", "output": "[2, 5, 1]", "ops": "=="}], "context": "", "instance_idx": 95, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 74, "description": "Write a function to check whether it follows the sequence given in the patterns array.", "code": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True", "input_output_pairs": [{"input": "is_samepatterns(['red', 'green', 'green'], ['a', 'b', 'b'])", "output": "True", "ops": "=="}, {"input": "is_samepatterns(['red', 'green', 'greenn'], ['a', 'b', 'b'])", "output": "False", "ops": "=="}, {"input": "is_samepatterns(['red', 'green', 'greenn'], ['a', 'b'])", "output": "False", "ops": "=="}], "context": "", "instance_idx": 96, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 119, "description": "Write a python function to find the element that appears only once in a sorted array.", "code": "def search(arr,n) :\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)", "input_output_pairs": [{"input": "search([1, 1, 2, 2, 3], 5)", "output": "3", "ops": "=="}, {"input": "search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8], 11)", "output": "8", "ops": "=="}, {"input": "search([1, 2, 2, 3, 3, 4, 4], 7)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 97, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 78, "description": "Write a python function to find number of integers with odd number of set bits.", "code": "def count_With_Odd_SetBits(n): \n    if (n % 2 != 0): \n        return (n + 1) / 2\n    count = bin(n).count('1') \n    ans = n / 2\n    if (count % 2 != 0): \n        ans += 1\n    return ans", "input_output_pairs": [{"input": "count_With_Odd_SetBits(5)", "output": "3", "ops": "=="}, {"input": "count_With_Odd_SetBits(10)", "output": "5", "ops": "=="}, {"input": "count_With_Odd_SetBits(15)", "output": "8", "ops": "=="}], "context": "", "instance_idx": 98, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 196, "description": "Write a function to remove all the tuples with length k.", "code": "def remove_tuples(test_list, K):\n  res = [ele for ele in test_list if len(ele) != K]\n  return (res)", "input_output_pairs": [{"input": "remove_tuples([(4, 5), (4,), (8, 6, 7), (1,), (3, 4, 6, 7)], 1)", "output": "[(4, 5), (8, 6, 7), (3, 4, 6, 7)]", "ops": "=="}, {"input": "remove_tuples([(4, 5), (4, 5), (6, 7), (1, 2, 3), (3, 4, 6, 7)], 2)", "output": "[(1, 2, 3), (3, 4, 6, 7)]", "ops": "=="}, {"input": "remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1,), (3, 6, 7)], 3)", "output": "[(4, 3), (1,)]", "ops": "=="}], "context": "", "instance_idx": 99, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/101", "description": "You will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "code": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()", "input_output_pairs": [{"input": "words_string('Hi, my name is John')", "output": "['Hi', 'my', 'name', 'is', 'John']", "ops": "=="}, {"input": "words_string('One, two, three, four, five, six')", "output": "['One', 'two', 'three', 'four', 'five', 'six']", "ops": "=="}, {"input": "words_string('Hi, my name')", "output": "['Hi', 'my', 'name']", "ops": "=="}, {"input": "words_string('One,, two, three, four, five, six,')", "output": "['One', 'two', 'three', 'four', 'five', 'six']", "ops": "=="}, {"input": "words_string('')", "output": "[]", "ops": "=="}, {"input": "words_string('ahmed     , gamal')", "output": "['ahmed', 'gamal']", "ops": "=="}], "context": "", "instance_idx": 100, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 368, "description": "Write a function to repeat the given tuple n times.", "code": "def repeat_tuples(test_tup, N):\n  res = ((test_tup, ) * N)\n  return (res)", "input_output_pairs": [{"input": "repeat_tuples((1, 3), 4)", "output": "((1, 3), (1, 3), (1, 3), (1, 3))", "ops": "=="}, {"input": "repeat_tuples((1, 2), 3)", "output": "((1, 2), (1, 2), (1, 2))", "ops": "=="}, {"input": "repeat_tuples((3, 4), 5)", "output": "((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))", "ops": "=="}], "context": "", "instance_idx": 101, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 146, "description": "Write a function to find the ascii value of total characters in a string.", "code": "def ascii_value_string(str1):\n  for i in range(len(str1)):\n   return ord(str1[i])", "input_output_pairs": [{"input": "ascii_value_string('python')", "output": "112", "ops": "=="}, {"input": "ascii_value_string('Program')", "output": "80", "ops": "=="}, {"input": "ascii_value_string('Language')", "output": "76", "ops": "=="}], "context": "", "instance_idx": 102, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 95, "description": "Write a python function to find the minimum length of sublist.", "code": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength", "input_output_pairs": [{"input": "Find_Min_Length([[1], [1, 2]])", "output": "1", "ops": "=="}, {"input": "Find_Min_Length([[1, 2], [1, 2, 3], [1, 2, 3, 4]])", "output": "2", "ops": "=="}, {"input": "Find_Min_Length([[3, 3, 3], [4, 4, 4, 4]])", "output": "3", "ops": "=="}], "context": "", "instance_idx": 103, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/80", "description": "You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False", "code": "def is_happy(s):\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True", "input_output_pairs": [{"input": "is_happy('a')", "output": "False", "ops": "=="}, {"input": "is_happy('aa')", "output": "False", "ops": "=="}, {"input": "is_happy('abcd')", "output": "True", "ops": "=="}, {"input": "is_happy('aabb')", "output": "False", "ops": "=="}, {"input": "is_happy('adb')", "output": "True", "ops": "=="}, {"input": "is_happy('xyy')", "output": "False", "ops": "=="}, {"input": "is_happy('iopaxpoi')", "output": "True", "ops": "=="}, {"input": "is_happy('iopaxioi')", "output": "False", "ops": "=="}], "context": "", "instance_idx": 104, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 90, "description": "Write a python function to find the length of the longest word.", "code": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max", "input_output_pairs": [{"input": "len_log(['python', 'PHP', 'bigdata'])", "output": "7", "ops": "=="}, {"input": "len_log(['a', 'ab', 'abc'])", "output": "3", "ops": "=="}, {"input": "len_log(['small', 'big', 'tall'])", "output": "5", "ops": "=="}], "context": "", "instance_idx": 105, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 263, "description": "Write a function to merge two dictionaries.", "code": "def merge_dict(d1,d2):\n d = d1.copy()\n d.update(d2)\n return d", "input_output_pairs": [{"input": "merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200})", "output": "{'x': 300, 'y': 200, 'a': 100, 'b': 200}", "ops": "=="}, {"input": "merge_dict({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900})", "output": "{'a': 900, 'b': 900, 'd': 900, 'a': 900, 'b': 900, 'd': 900}", "ops": "=="}, {"input": "merge_dict({'a': 10, 'b': 20}, {'x': 30, 'y': 40})", "output": "{'x': 30, 'y': 40, 'a': 10, 'b': 20}", "ops": "=="}], "context": "", "instance_idx": 106, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/130", "description": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]", "code": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri", "input_output_pairs": [{"input": "tri(3)", "output": "[1, 3, 2.0, 8.0]", "ops": "=="}, {"input": "tri(4)", "output": "[1, 3, 2.0, 8.0, 3.0]", "ops": "=="}, {"input": "tri(5)", "output": "[1, 3, 2.0, 8.0, 3.0, 15.0]", "ops": "=="}, {"input": "tri(6)", "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]", "ops": "=="}, {"input": "tri(7)", "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]", "ops": "=="}, {"input": "tri(8)", "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]", "ops": "=="}, {"input": "tri(9)", "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]", "ops": "=="}, {"input": "tri(20)", "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0,\n    80.0, 9.0, 99.0, 10.0, 120.0, 11.0]", "ops": "=="}, {"input": "tri(0)", "output": "[1]", "ops": "=="}, {"input": "tri(1)", "output": "[1, 3]", "ops": "=="}], "context": "", "instance_idx": 107, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/115", "description": "You are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\n\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\n\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\n\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10", "code": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])", "input_output_pairs": [{"input": "max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)", "output": "6", "ops": "=="}, {"input": "max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)", "output": "5", "ops": "=="}, {"input": "max_fill([[0, 0, 0], [0, 0, 0]], 5)", "output": "0", "ops": "=="}, {"input": "max_fill([[1, 1, 1, 1], [1, 1, 1, 1]], 2)", "output": "4", "ops": "=="}, {"input": "max_fill([[1, 1, 1, 1], [1, 1, 1, 1]], 9)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 108, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 455, "description": "Write a function to check whether the given month number contains 31 days or not.", "code": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False", "input_output_pairs": [{"input": "check_monthnumb_number(5)", "output": "True", "ops": "=="}, {"input": "check_monthnumb_number(2)", "output": "False", "ops": "=="}, {"input": "check_monthnumb_number(6)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 109, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 122, "description": "Write a function to find n\u2019th smart number.", "code": "def smartNumber(n): \n\tprimes = [0] * MAX \n\tresult = [] \n\tfor i in range(2, MAX): \n\t\tif (primes[i] == 0): \n\t\t\tprimes[i] = 1 \n\t\t\tj = i * 2 \n\t\t\twhile (j < MAX): \n\t\t\t\tprimes[j] -= 1 \n\t\t\t\tif ( (primes[j] + 3) == 0): \n\t\t\t\t\tresult.append(j) \n\t\t\t\tj = j + i \n\tresult.sort() \n\treturn result[n - 1]", "input_output_pairs": [{"input": "smartNumber(1)", "output": "30", "ops": "=="}, {"input": "smartNumber(50)", "output": "273", "ops": "=="}, {"input": "smartNumber(1000)", "output": "2664", "ops": "=="}], "context": "MAX = 3000", "instance_idx": 110, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/93", "description": "Write a function that takes a message, and encodes in such a\nway that it swaps case of all letters, replaces all vowels in\nthe message with the letter that appears 2 places ahead of that\nvowel in the english alphabet.\nAssume only letters.\n\nExamples:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'", "code": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])", "input_output_pairs": [{"input": "encode('TEST')", "output": "'tgst'", "ops": "=="}, {"input": "encode('Mudasir')", "output": "'mWDCSKR'", "ops": "=="}, {"input": "encode('YES')", "output": "'ygs'", "ops": "=="}, {"input": "encode('This is a message')", "output": "'tHKS KS C MGSSCGG'", "ops": "=="}, {"input": "encode('I DoNt KnOw WhAt tO WrItE')", "output": "'k dQnT kNqW wHcT Tq wRkTg'", "ops": "=="}], "context": "", "instance_idx": 111, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 213, "description": "Write a function to perform the concatenation of two string tuples.", "code": "def concatenate_strings(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)", "input_output_pairs": [{"input": "concatenate_strings(('Manjeet', 'Nikhil', 'Akshat'), (' Singh', ' Meherwal',\n    ' Garg'))", "output": "('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')", "ops": "=="}, {"input": "concatenate_strings(('Shaik', 'Ayesha', 'Sanya'), (' Dawood', ' Begum',\n    ' Singh'))", "output": "('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')", "ops": "=="}, {"input": "concatenate_strings(('Harpreet', 'Priyanka', 'Muskan'), ('Kour', ' Agarwal',\n    'Sethi'))", "output": "('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')", "ops": "=="}], "context": "", "instance_idx": 112, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/123", "description": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote:\n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.", "code": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)", "input_output_pairs": [{"input": "get_odd_collatz(14)", "output": "[1, 5, 7, 11, 13, 17]", "ops": "=="}, {"input": "get_odd_collatz(5)", "output": "[1, 5]", "ops": "=="}, {"input": "get_odd_collatz(12)", "output": "[1, 3, 5]", "ops": "=="}, {"input": "get_odd_collatz(1)", "output": "[1]", "ops": "=="}], "context": "", "instance_idx": 113, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/138", "description": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True", "code": "def is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8", "input_output_pairs": [{"input": "is_equal_to_sum_even(4)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(6)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(8)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(10)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(11)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(12)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(13)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(16)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 114, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 114, "description": "Write a function to assign frequency to each tuple in the given tuple list.", "code": "def assign_freq(test_list):\n  res = [(*key, val) for key, val in Counter(test_list).items()]\n  return (str(res))", "input_output_pairs": [{"input": "assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9,), (2, 7)])", "output": "'[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'", "ops": "=="}, {"input": "assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)])", "output": "'[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'", "ops": "=="}, {"input": "assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)])", "output": "'[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'", "ops": "=="}], "context": "from collections import Counter", "instance_idx": 115, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 306, "description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "code": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]", "input_output_pairs": [{"input": "max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)", "output": "11", "ops": "=="}, {"input": "max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5)", "output": "7", "ops": "=="}, {"input": "max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)", "output": "71", "ops": "=="}], "context": "", "instance_idx": 116, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 99, "description": "Write a function to convert the given decimal number to its binary equivalent.", "code": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\")", "input_output_pairs": [{"input": "decimal_to_binary(8)", "output": "'1000'", "ops": "=="}, {"input": "decimal_to_binary(18)", "output": "'10010'", "ops": "=="}, {"input": "decimal_to_binary(7)", "output": "'111'", "ops": "=="}], "context": "", "instance_idx": 117, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 312, "description": "Write a function to find the volume of a cone.", "code": "def volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume", "input_output_pairs": [{"input": "volume_cone(5, 12)", "output": "314.15926535897927", "ops": "=="}, {"input": "volume_cone(10, 15)", "output": "1570.7963267948965", "ops": "=="}, {"input": "volume_cone(19, 17)", "output": "6426.651371693521", "ops": "=="}], "context": "import math", "instance_idx": 118, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/22", "description": "Filter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]", "code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "input_output_pairs": [{"input": "filter_integers([])", "output": "[]", "ops": "=="}, {"input": "filter_integers([4, {}, [], 23.2, 9, 'adasd'])", "output": "[4, 9]", "ops": "=="}, {"input": "filter_integers([3, 'c', 3, 3, 'a', 'b'])", "output": "[3, 3, 3]", "ops": "=="}], "context": "from typing import List, Any", "instance_idx": 119, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 48, "description": "Write a python function to set all odd bits of a given number.", "code": "def odd_bit_set_number(n):\n    count = 0;res = 0;temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n | res)", "input_output_pairs": [{"input": "odd_bit_set_number(10)", "output": "15", "ops": "=="}, {"input": "odd_bit_set_number(20)", "output": "21", "ops": "=="}, {"input": "odd_bit_set_number(30)", "output": "31", "ops": "=="}], "context": "", "instance_idx": 120, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 267, "description": "Write a python function to find the sum of squares of first n odd natural numbers.", "code": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3)", "input_output_pairs": [{"input": "square_Sum(2)", "output": "10", "ops": "=="}, {"input": "square_Sum(3)", "output": "35", "ops": "=="}, {"input": "square_Sum(4)", "output": "84", "ops": "=="}], "context": "", "instance_idx": 121, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/81", "description": "It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\n\n\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']", "code": "def numerical_letter_grade(grades):\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade", "input_output_pairs": [{"input": "numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])", "output": "['A+', 'B', 'C-', 'C', 'A-']", "ops": "=="}, {"input": "numerical_letter_grade([1.2])", "output": "['D+']", "ops": "=="}, {"input": "numerical_letter_grade([0.5])", "output": "['D-']", "ops": "=="}, {"input": "numerical_letter_grade([0.0])", "output": "['E']", "ops": "=="}, {"input": "numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3])", "output": "['D', 'D-', 'C-', 'B', 'B+']", "ops": "=="}, {"input": "numerical_letter_grade([0, 0.7])", "output": "['E', 'D-']", "ops": "=="}], "context": "", "instance_idx": 122, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 66, "description": "Write a python function to count positive numbers in a list.", "code": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count", "input_output_pairs": [{"input": "pos_count([1, -2, 3, -4])", "output": "2", "ops": "=="}, {"input": "pos_count([3, 4, 5, -1])", "output": "3", "ops": "=="}, {"input": "pos_count([1, 2, 3, 4])", "output": "4", "ops": "=="}], "context": "", "instance_idx": 123, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 98, "description": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "code": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers)", "input_output_pairs": [{"input": "multiply_num((8, 2, 3, -1, 7))", "output": "-67.2", "ops": "=="}, {"input": "multiply_num((-10, -20, -30))", "output": "-2000.0", "ops": "=="}, {"input": "multiply_num((19, 15, 18))", "output": "1710.0", "ops": "=="}], "context": "", "instance_idx": 124, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 402, "description": "Write a function to compute the value of ncr%p.", "code": "def ncr_modp(n, r, p): \n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p   \n    return C[r]", "input_output_pairs": [{"input": "ncr_modp(10, 2, 13)", "output": "6", "ops": "=="}, {"input": "ncr_modp(15, 12, 43)", "output": "25", "ops": "=="}, {"input": "ncr_modp(17, 9, 18)", "output": "10", "ops": "=="}], "context": "", "instance_idx": 125, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 118, "description": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "code": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst", "input_output_pairs": [{"input": "string_to_list('python programming')", "output": "['python', 'programming']", "ops": "=="}, {"input": "string_to_list('lists tuples strings')", "output": "['lists', 'tuples', 'strings']", "ops": "=="}, {"input": "string_to_list('write a program')", "output": "['write', 'a', 'program']", "ops": "=="}], "context": "", "instance_idx": 126, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/149", "description": "Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]", "code": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)", "input_output_pairs": [{"input": "sorted_list_sum(['aa', 'a', 'aaa'])", "output": "['aa']", "ops": "=="}, {"input": "sorted_list_sum(['school', 'AI', 'asdf', 'b'])", "output": "['AI', 'asdf', 'school']", "ops": "=="}, {"input": "sorted_list_sum(['d', 'b', 'c', 'a'])", "output": "[]", "ops": "=="}, {"input": "sorted_list_sum(['d', 'dcba', 'abcd', 'a'])", "output": "['abcd', 'dcba']", "ops": "=="}, {"input": "sorted_list_sum(['AI', 'ai', 'au'])", "output": "['AI', 'ai', 'au']", "ops": "=="}, {"input": "sorted_list_sum(['a', 'b', 'b', 'c', 'c', 'a'])", "output": "[]", "ops": "=="}, {"input": "sorted_list_sum(['aaaa', 'bbbb', 'dd', 'cc'])", "output": "['cc', 'dd', 'aaaa', 'bbbb']", "ops": "=="}], "context": "", "instance_idx": 127, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 248, "description": "Write a function to calculate the harmonic sum of n-1.", "code": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1))", "input_output_pairs": [{"input": "harmonic_sum(7)", "output": "2.5928571428571425", "ops": "=="}, {"input": "harmonic_sum(4)", "output": "2.083333333333333", "ops": "=="}, {"input": "harmonic_sum(19)", "output": "3.547739657143682", "ops": "=="}], "context": "", "instance_idx": 128, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 475, "description": "Write a function to sort counter by value.", "code": "def sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter", "input_output_pairs": [{"input": "sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})", "output": "[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "ops": "=="}, {"input": "sort_counter({'Math': 400, 'Physics': 300, 'Chemistry': 250})", "output": "[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "ops": "=="}, {"input": "sort_counter({'Math': 900, 'Physics': 1000, 'Chemistry': 1250})", "output": "[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]", "ops": "=="}], "context": "from collections import Counter", "instance_idx": 129, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 498, "description": "Write a python function to find gcd of two positive integers.", "code": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break  \n    return gcd", "input_output_pairs": [{"input": "gcd(12, 17)", "output": "1", "ops": "=="}, {"input": "gcd(4, 6)", "output": "2", "ops": "=="}, {"input": "gcd(2, 9)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 130, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 435, "description": "Write a python function to find the last digit of a given number.", "code": "def last_Digit(n) :\n    return (n % 10)", "input_output_pairs": [{"input": "last_Digit(123)", "output": "3", "ops": "=="}, {"input": "last_Digit(25)", "output": "5", "ops": "=="}, {"input": "last_Digit(30)", "output": "0", "ops": "=="}], "context": "", "instance_idx": 131, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 257, "description": "Write a function to swap two numbers.", "code": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)", "input_output_pairs": [{"input": "swap_numbers(10, 20)", "output": "(20, 10)", "ops": "=="}, {"input": "swap_numbers(15, 17)", "output": "(17, 15)", "ops": "=="}, {"input": "swap_numbers(100, 200)", "output": "(200, 100)", "ops": "=="}], "context": "", "instance_idx": 132, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 478, "description": "Write a function to remove lowercase substrings from a given string.", "code": "def remove_lowercase(str1):\n remove_lower = lambda text: re.sub('[a-z]', '', text)\n result =  remove_lower(str1)\n return result", "input_output_pairs": [{"input": "remove_lowercase('PYTHon')", "output": "'PYTH'", "ops": "=="}, {"input": "remove_lowercase('FInD')", "output": "'FID'", "ops": "=="}, {"input": "remove_lowercase('STRinG')", "output": "'STRG'", "ops": "=="}], "context": "import re", "instance_idx": 133, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/156", "description": "Given a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'", "code": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()", "input_output_pairs": [{"input": "int_to_mini_roman(19)", "output": "'xix'", "ops": "=="}, {"input": "int_to_mini_roman(152)", "output": "'clii'", "ops": "=="}, {"input": "int_to_mini_roman(251)", "output": "'ccli'", "ops": "=="}, {"input": "int_to_mini_roman(426)", "output": "'cdxxvi'", "ops": "=="}, {"input": "int_to_mini_roman(500)", "output": "'d'", "ops": "=="}, {"input": "int_to_mini_roman(1)", "output": "'i'", "ops": "=="}, {"input": "int_to_mini_roman(4)", "output": "'iv'", "ops": "=="}, {"input": "int_to_mini_roman(43)", "output": "'xliii'", "ops": "=="}, {"input": "int_to_mini_roman(90)", "output": "'xc'", "ops": "=="}, {"input": "int_to_mini_roman(94)", "output": "'xciv'", "ops": "=="}, {"input": "int_to_mini_roman(532)", "output": "'dxxxii'", "ops": "=="}, {"input": "int_to_mini_roman(900)", "output": "'cm'", "ops": "=="}, {"input": "int_to_mini_roman(994)", "output": "'cmxciv'", "ops": "=="}, {"input": "int_to_mini_roman(1000)", "output": "'m'", "ops": "=="}], "context": "", "instance_idx": 134, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 197, "description": "Write a function to perform the exponentiation of the given two tuples.", "code": "def find_exponentio(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)", "input_output_pairs": [{"input": "find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))", "output": "(100000, 4096, 78125, 7776)", "ops": "=="}, {"input": "find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))", "output": "(1771561, 78125, 1679616, 117649)", "ops": "=="}, {"input": "find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))", "output": "(35831808, 1679616, 40353607, 2097152)", "ops": "=="}], "context": "", "instance_idx": 135, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 62, "description": "Write a python function to find smallest number in a list.", "code": "def smallest_num(xs):\n  return min(xs)", "input_output_pairs": [{"input": "smallest_num([10, 20, 1, 45, 99])", "output": "1", "ops": "=="}, {"input": "smallest_num([1, 2, 3])", "output": "1", "ops": "=="}, {"input": "smallest_num([45, 46, 50, 60])", "output": "45", "ops": "=="}], "context": "", "instance_idx": 136, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 285, "description": "Write a function that matches a string that has an a followed by two to three 'b'.", "code": "def text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "input_output_pairs": [{"input": "text_match_two_three('ac')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_two_three('dc')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_two_three('abbbba')", "output": "'Found a match!'", "ops": "=="}], "context": "import re", "instance_idx": 137, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 387, "description": "Write a python function to check whether the hexadecimal number is even or odd.", "code": "def even_or_odd(N): \n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        N[l-1] =='C'or N[l-1] =='E'): \n        return (\"Even\") \n    else: \n        return (\"Odd\")", "input_output_pairs": [{"input": "even_or_odd('AB3454D')", "output": "'Odd'", "ops": "=="}, {"input": "even_or_odd('ABC')", "output": "'Even'", "ops": "=="}, {"input": "even_or_odd('AAD')", "output": "'Odd'", "ops": "=="}], "context": "", "instance_idx": 138, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 240, "description": "Write a function to replace the last element of the list with another list.", "code": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list", "input_output_pairs": [{"input": "replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])", "output": "[1, 3, 5, 7, 9, 2, 4, 6, 8]", "ops": "=="}, {"input": "replace_list([1, 2, 3, 4, 5], [5, 6, 7, 8])", "output": "[1, 2, 3, 4, 5, 6, 7, 8]", "ops": "=="}, {"input": "replace_list(['red', 'blue', 'green'], ['yellow'])", "output": "['red', 'blue', 'yellow']", "ops": "=="}], "context": "", "instance_idx": 139, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 210, "description": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "code": "def is_allowed_specific_char(string):\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    string = get_char.search(string)\n    return not bool(string)", "input_output_pairs": [{"input": "is_allowed_specific_char('ABCDEFabcdef123450')", "output": "True", "ops": "=="}, {"input": "is_allowed_specific_char('*&%@#!}{')", "output": "False", "ops": "=="}, {"input": "is_allowed_specific_char('HELLOhowareyou98765')", "output": "True", "ops": "=="}], "context": "import re", "instance_idx": 140, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 136, "description": "Write a function to calculate electricity bill.", "code": "def cal_electbill(units):\n if(units < 50):\n    amount = units * 2.60\n    surcharge = 25\n elif(units <= 100):\n    amount = 130 + ((units - 50) * 3.25)\n    surcharge = 35\n elif(units <= 200):\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\n    surcharge = 45\n else:\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n    surcharge = 75\n total = amount + surcharge\n return total", "input_output_pairs": [{"input": "cal_electbill(75)", "output": "246.25", "ops": "=="}, {"input": "cal_electbill(265)", "output": "1442.75", "ops": "=="}, {"input": "cal_electbill(100)", "output": "327.5", "ops": "=="}], "context": "", "instance_idx": 141, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/62", "description": "xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\nReturn derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]", "code": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]", "input_output_pairs": [{"input": "derivative([3, 1, 2, 4, 5])", "output": "[1, 4, 12, 20]", "ops": "=="}, {"input": "derivative([1, 2, 3])", "output": "[2, 6]", "ops": "=="}, {"input": "derivative([3, 2, 1])", "output": "[2, 2]", "ops": "=="}, {"input": "derivative([3, 2, 1, 0, 4])", "output": "[2, 2, 0, 16]", "ops": "=="}, {"input": "derivative([1])", "output": "[]", "ops": "=="}], "context": "", "instance_idx": 142, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 474, "description": "Write a function to replace characters in a string.", "code": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2", "input_output_pairs": [{"input": "replace_char('polygon', 'y', 'l')", "output": "'pollgon'", "ops": "=="}, {"input": "replace_char('character', 'c', 'a')", "output": "'aharaater'", "ops": "=="}, {"input": "replace_char('python', 'l', 'a')", "output": "'python'", "ops": "=="}], "context": "", "instance_idx": 144, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/141", "description": "Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions\nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from\nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)", "code": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'", "input_output_pairs": [{"input": "file_name_check('example.txt')", "output": "'Yes'", "ops": "=="}, {"input": "file_name_check('1example.dll')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('s1sdf3.asd')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('K.dll')", "output": "'Yes'", "ops": "=="}, {"input": "file_name_check('MY16FILE3.exe')", "output": "'Yes'", "ops": "=="}, {"input": "file_name_check('His12FILE94.exe')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('_Y.txt')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('?aREYA.exe')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('/this_is_valid.dll')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('this_is_valid.wow')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('this_is_valid.txt')", "output": "'Yes'", "ops": "=="}, {"input": "file_name_check('this_is_valid.txtexe')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('#this2_i4s_5valid.ten')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('@this1_is6_valid.exe')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('this_is_12valid.6exe4.txt')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('all.exe.txt')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('I563_No.exe')", "output": "'Yes'", "ops": "=="}, {"input": "file_name_check('Is3youfault.txt')", "output": "'Yes'", "ops": "=="}, {"input": "file_name_check('no_one#knows.dll')", "output": "'Yes'", "ops": "=="}, {"input": "file_name_check('1I563_Yes3.exe')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('I563_Yes3.txtt')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('final..txt')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('final132')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('_f4indsartal132.')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('.txt')", "output": "'No'", "ops": "=="}, {"input": "file_name_check('s.')", "output": "'No'", "ops": "=="}], "context": "", "instance_idx": 145, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/120", "description": "Given an array arr of integers and a positive integer k, return a sorted list\nof length k with the maximum k numbers in arr.\n\nExample 1:\n\nInput: arr = [-3, -4, 5], k = 3\nOutput: [-4, -3, 5]\n\nExample 2:\n\nInput: arr = [4, -4, 4], k = 2\nOutput: [4, 4]\n\nExample 3:\n\nInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nOutput: [2]\n\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)", "code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans", "input_output_pairs": [{"input": "maximum([-3, -4, 5], 3)", "output": "[-4, -3, 5]", "ops": "=="}, {"input": "maximum([4, -4, 4], 2)", "output": "[4, 4]", "ops": "=="}, {"input": "maximum([-3, 2, 1, 2, -1, -2, 1], 1)", "output": "[2]", "ops": "=="}, {"input": "maximum([123, -123, 20, 0, 1, 2, -3], 3)", "output": "[2, 20, 123]", "ops": "=="}, {"input": "maximum([-123, 20, 0, 1, 2, -3], 4)", "output": "[0, 1, 2, 20]", "ops": "=="}, {"input": "maximum([5, 15, 0, 3, -13, -8, 0], 7)", "output": "[-13, -8, 0, 0, 3, 5, 15]", "ops": "=="}, {"input": "maximum([-1, 0, 2, 5, 3, -10], 2)", "output": "[3, 5]", "ops": "=="}, {"input": "maximum([1, 0, 5, -7], 1)", "output": "[5]", "ops": "=="}, {"input": "maximum([4, -4], 2)", "output": "[-4, 4]", "ops": "=="}, {"input": "maximum([-10, 10], 2)", "output": "[-10, 10]", "ops": "=="}, {"input": "maximum([1, 2, 3, -23, 243, -400, 0], 0)", "output": "[]", "ops": "=="}], "context": "", "instance_idx": 146, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 317, "description": "Write a function to reflect the modified run-length encoding from a list.", "code": "def modified_encode(alist):\n        def ctr_ele(el):\n            if len(el)>1: return [len(el), el[0]]\n            else: return el[0]\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]", "input_output_pairs": [{"input": "modified_encode([1, 1, 2, 3, 4, 4, 5, 1])", "output": "[[2, 1], 2, 3, [2, 4], 5, 1]", "ops": "=="}, {"input": "modified_encode('automatically')", "output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']", "ops": "=="}, {"input": "modified_encode('python')", "output": "['p', 'y', 't', 'h', 'o', 'n']", "ops": "=="}], "context": "from itertools import groupby", "instance_idx": 147, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 244, "description": "Write a python function to find the next perfect square greater than a given number.", "code": "def next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN", "input_output_pairs": [{"input": "next_Perfect_Square(35)", "output": "36", "ops": "=="}, {"input": "next_Perfect_Square(6)", "output": "9", "ops": "=="}, {"input": "next_Perfect_Square(9)", "output": "16", "ops": "=="}], "context": "import math", "instance_idx": 148, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/87", "description": "You are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]", "code": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])", "input_output_pairs": [{"input": "get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)", "output": "[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]", "ops": "=="}, {"input": "get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, \n    2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2)", "output": "[(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]", "ops": "=="}, {"input": "get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, \n    2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5,\n    1]], 1)", "output": "[(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5,\n    0), (6, 5), (6, 0)]", "ops": "=="}, {"input": "get_row([], 1)", "output": "[]", "ops": "=="}, {"input": "get_row([[1]], 2)", "output": "[]", "ops": "=="}, {"input": "get_row([[], [1], [1, 2, 3]], 3)", "output": "[(2, 2)]", "ops": "=="}], "context": "", "instance_idx": 149, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 169, "description": "Write a function to calculate the nth pell number.", "code": "def get_pell(n): \n\tif (n <= 2): \n\t\treturn n \n\ta = 1\n\tb = 2\n\tfor i in range(3, n+1): \n\t\tc = 2 * b + a \n\t\ta = b \n\t\tb = c \n\treturn b", "input_output_pairs": [{"input": "get_pell(4)", "output": "12", "ops": "=="}, {"input": "get_pell(7)", "output": "169", "ops": "=="}, {"input": "get_pell(8)", "output": "408", "ops": "=="}], "context": "", "instance_idx": 150, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 71, "description": "Write a function to sort a list of elements using comb sort.", "code": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums", "input_output_pairs": [{"input": "comb_sort([5, 15, 37, 25, 79])", "output": "[5, 15, 25, 37, 79]", "ops": "=="}, {"input": "comb_sort([41, 32, 15, 19, 22])", "output": "[15, 19, 22, 32, 41]", "ops": "=="}, {"input": "comb_sort([99, 15, 13, 47])", "output": "[13, 15, 47, 99]", "ops": "=="}], "context": "", "instance_idx": 151, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 166, "description": "Write a python function to count the pairs with xor as an even number.", "code": "def find_even_Pair(A,N): \n    evenPair = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n            if ((A[i] ^ A[j]) % 2 == 0): \n                evenPair+=1\n    return evenPair;", "input_output_pairs": [{"input": "find_even_Pair([5, 4, 7, 2, 1], 5)", "output": "4", "ops": "=="}, {"input": "find_even_Pair([7, 2, 8, 1, 0, 5, 11], 7)", "output": "9", "ops": "=="}, {"input": "find_even_Pair([1, 2, 3], 3)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 152, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 254, "description": "Write a function to find all words starting with 'a' or 'e' in a given string.", "code": "def words_ae(text):\n list = re.findall(\"[ae]\\w+\", text)\n return list", "input_output_pairs": [{"input": "words_ae('python programe')", "output": "['ame']", "ops": "=="}, {"input": "words_ae('python programe language')", "output": "['ame', 'anguage']", "ops": "=="}, {"input": "words_ae('assert statement')", "output": "['assert', 'atement']", "ops": "=="}], "context": "import re", "instance_idx": 153, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 343, "description": "Write a function to calculate the number of digits and letters in a string.", "code": "def dig_let(s):\n d=l=0\n for c in s:\n    if c.isdigit():\n        d=d+1\n    elif c.isalpha():\n        l=l+1\n    else:\n        pass\n return (l,d)", "input_output_pairs": [{"input": "dig_let('python')", "output": "(6, 0)", "ops": "=="}, {"input": "dig_let('program')", "output": "(7, 0)", "ops": "=="}, {"input": "dig_let('python3.0')", "output": "(6, 2)", "ops": "=="}], "context": "", "instance_idx": 154, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 465, "description": "Write a function to drop empty items from a given dictionary.", "code": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "input_output_pairs": [{"input": "drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None})", "output": "{'c1': 'Red', 'c2': 'Green'}", "ops": "=="}, {"input": "drop_empty({'c1': 'Red', 'c2': None, 'c3': None})", "output": "{'c1': 'Red'}", "ops": "=="}, {"input": "drop_empty({'c1': None, 'c2': 'Green', 'c3': None})", "output": "{'c2': 'Green'}", "ops": "=="}], "context": "", "instance_idx": 155, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/102", "description": "This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If\nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1", "code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1", "input_output_pairs": [{"input": "choose_num(12, 15)", "output": "14", "ops": "=="}, {"input": "choose_num(13, 12)", "output": "-1", "ops": "=="}, {"input": "choose_num(33, 12354)", "output": "12354", "ops": "=="}, {"input": "choose_num(5234, 5233)", "output": "-1", "ops": "=="}, {"input": "choose_num(6, 29)", "output": "28", "ops": "=="}, {"input": "choose_num(27, 10)", "output": "-1", "ops": "=="}, {"input": "choose_num(7, 7)", "output": "-1", "ops": "=="}, {"input": "choose_num(546, 546)", "output": "546", "ops": "=="}], "context": "", "instance_idx": 156, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/99", "description": "Create a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.", "code": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res", "input_output_pairs": [{"input": "closest_integer('10')", "output": "10", "ops": "=="}, {"input": "closest_integer('14.5')", "output": "15", "ops": "=="}, {"input": "closest_integer('-15.5')", "output": "-16", "ops": "=="}, {"input": "closest_integer('15.3')", "output": "15", "ops": "=="}, {"input": "closest_integer('0')", "output": "0", "ops": "=="}], "context": "", "instance_idx": 157, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 91, "description": "Write a function to check if a substring is present in a given list of string values.", "code": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False", "input_output_pairs": [{"input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'ack')", "output": "True", "ops": "=="}, {"input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'abc')", "output": "False", "ops": "=="}, {"input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'ange')", "output": "True", "ops": "=="}], "context": "", "instance_idx": 158, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 468, "description": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "code": "def max_product(arr, n ): \n\tmpis =[0] * (n) \n\tfor i in range(n): \n\t\tmpis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \n\treturn max(mpis)", "input_output_pairs": [{"input": "max_product([3, 100, 4, 5, 150, 6], 6)", "output": "45000", "ops": "=="}, {"input": "max_product([4, 42, 55, 68, 80], 5)", "output": "50265600", "ops": "=="}, {"input": "max_product([10, 22, 9, 33, 21, 50, 41, 60], 8)", "output": "21780000", "ops": "=="}], "context": "", "instance_idx": 159, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/92", "description": "Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e True\n\nany_int(3, 2, 2) \u279e False\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False", "code": "def any_int(x, y, z):\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False", "input_output_pairs": [{"input": "any_int(2, 3, 1)", "output": "True", "ops": "=="}, {"input": "any_int(2.5, 2, 3)", "output": "False", "ops": "=="}, {"input": "any_int(1.5, 5, 3.5)", "output": "False", "ops": "=="}, {"input": "any_int(2, 6, 2)", "output": "False", "ops": "=="}, {"input": "any_int(4, 2, 2)", "output": "True", "ops": "=="}, {"input": "any_int(2.2, 2.2, 2.2)", "output": "False", "ops": "=="}, {"input": "any_int(-4, 6, 2)", "output": "True", "ops": "=="}, {"input": "any_int(2, 1, 1)", "output": "True", "ops": "=="}, {"input": "any_int(3, 4, 7)", "output": "True", "ops": "=="}, {"input": "any_int(3.0, 4, 7)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 160, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 147, "description": "Write a function to find the maximum total path sum in the given triangle.", "code": "def max_path_sum(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telse: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "input_output_pairs": [{"input": "max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)", "output": "14", "ops": "=="}, {"input": "max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)", "output": "24", "ops": "=="}, {"input": "max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)", "output": "53", "ops": "=="}], "context": "", "instance_idx": 161, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 277, "description": "Write a function to filter a dictionary based on values.", "code": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result", "input_output_pairs": [{"input": "dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': \n    165, 'Pierre Cox': 190}, 170)", "output": "{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "ops": "=="}, {"input": "dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': \n    165, 'Pierre Cox': 190}, 180)", "output": "{'Alden Cantrell': 180, 'Pierre Cox': 190}", "ops": "=="}, {"input": "dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': \n    165, 'Pierre Cox': 190}, 190)", "output": "{'Pierre Cox': 190}", "ops": "=="}], "context": "", "instance_idx": 162, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 327, "description": "Write a function to print check if the triangle is isosceles or not.", "code": "def check_isosceles(x,y,z):\n  if x==y or y==z or z==x:\n\t   return True\n  else:\n     return False", "input_output_pairs": [{"input": "check_isosceles(6, 8, 12)", "output": "False", "ops": "=="}, {"input": "check_isosceles(6, 6, 12)", "output": "True", "ops": "=="}, {"input": "check_isosceles(6, 16, 20)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 163, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 125, "description": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "code": "def find_length(string, n): \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0", "input_output_pairs": [{"input": "find_length('11000010001', 11)", "output": "6", "ops": "=="}, {"input": "find_length('10111', 5)", "output": "1", "ops": "=="}, {"input": "find_length('11011101100101', 14)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 164, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 441, "description": "Write a function to find the surface area of a cube.", "code": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea", "input_output_pairs": [{"input": "surfacearea_cube(5)", "output": "150", "ops": "=="}, {"input": "surfacearea_cube(3)", "output": "54", "ops": "=="}, {"input": "surfacearea_cube(10)", "output": "600", "ops": "=="}], "context": "", "instance_idx": 165, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 379, "description": "Write a function to find the surface area of a cuboid.", "code": "def surfacearea_cuboid(l,w,h):\n  SA = 2*(l*w + l * h + w * h)\n  return SA", "input_output_pairs": [{"input": "surfacearea_cuboid(1, 2, 3)", "output": "22", "ops": "=="}, {"input": "surfacearea_cuboid(5, 7, 9)", "output": "286", "ops": "=="}, {"input": "surfacearea_cuboid(10, 15, 21)", "output": "1350", "ops": "=="}], "context": "", "instance_idx": 166, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 377, "description": "Write a python function to remove all occurrences of a character in a given string.", "code": "def remove_Char(s,c) :  \n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n        s.remove(c) \n        counts -= 1 \n    s = '' . join(s)   \n    return (s)", "input_output_pairs": [{"input": "remove_Char('aba', 'a')", "output": "'b'", "ops": "=="}, {"input": "remove_Char('toggle', 'g')", "output": "'tole'", "ops": "=="}, {"input": "remove_Char('aabbc', 'b')", "output": "'aac'", "ops": "=="}], "context": "", "instance_idx": 167, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 275, "description": "Write a python function to find the position of the last removed element from the given array.", "code": "def get_Position(a,n,m): \n    for i in range(n): \n        a[i] = (a[i] // m + (a[i] % m != 0))  \n    result,maxx = -1,-1\n    for i in range(n - 1,-1,-1): \n        if (maxx < a[i]): \n            maxx = a[i] \n            result = i \n    return result + 1", "input_output_pairs": [{"input": "get_Position([2, 5, 4], 3, 2)", "output": "2", "ops": "=="}, {"input": "get_Position([4, 3], 2, 2)", "output": "2", "ops": "=="}, {"input": "get_Position([1, 2, 3, 4], 4, 1)", "output": "4", "ops": "=="}], "context": "import math as mt", "instance_idx": 168, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 286, "description": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "code": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "input_output_pairs": [{"input": "max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)", "output": "30", "ops": "=="}, {"input": "max_sub_array_sum_repeated([-1, 10, 20], 3, 2)", "output": "59", "ops": "=="}, {"input": "max_sub_array_sum_repeated([-1, -2, -3], 3, 3)", "output": "-1", "ops": "=="}], "context": "", "instance_idx": 169, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 266, "description": "Write a function to find the lateral surface area of a cube.", "code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA", "input_output_pairs": [{"input": "lateralsurface_cube(5)", "output": "100", "ops": "=="}, {"input": "lateralsurface_cube(9)", "output": "324", "ops": "=="}, {"input": "lateralsurface_cube(10)", "output": "400", "ops": "=="}], "context": "", "instance_idx": 170, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/71", "description": "Given the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater\nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1", "code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area", "input_output_pairs": [{"input": "triangle_area(3, 4, 5)", "output": "6.0", "ops": "=="}, {"input": "triangle_area(1, 2, 10)", "output": "-1", "ops": "=="}, {"input": "triangle_area(4, 8, 5)", "output": "8.18", "ops": "=="}, {"input": "triangle_area(2, 2, 2)", "output": "1.73", "ops": "=="}, {"input": "triangle_area(1, 2, 3)", "output": "-1", "ops": "=="}, {"input": "triangle_area(10, 5, 7)", "output": "16.25", "ops": "=="}, {"input": "triangle_area(2, 6, 3)", "output": "-1", "ops": "=="}, {"input": "triangle_area(1, 1, 1)", "output": "0.43", "ops": "=="}, {"input": "triangle_area(2, 2, 10)", "output": "-1", "ops": "=="}], "context": "", "instance_idx": 171, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 477, "description": "Write a python function to convert the given string to lower case.", "code": "def is_lower(string):\n  return (string.lower())", "input_output_pairs": [{"input": "is_lower('InValid')", "output": "'invalid'", "ops": "=="}, {"input": "is_lower('TruE')", "output": "'true'", "ops": "=="}, {"input": "is_lower('SenTenCE')", "output": "'sentence'", "ops": "=="}], "context": "", "instance_idx": 172, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 139, "description": "Write a function to find the circumference of a circle.", "code": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter", "input_output_pairs": [{"input": "circle_circumference(10)", "output": "62.830000000000005", "ops": "=="}, {"input": "circle_circumference(5)", "output": "31.415000000000003", "ops": "=="}, {"input": "circle_circumference(4)", "output": "25.132", "ops": "=="}], "context": "", "instance_idx": 173, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 181, "description": "Write a function to find the longest common prefix in the given set of strings.", "code": "def common_prefix_util(str1, str2): \n\tresult = \"\"; \n\tn1 = len(str1) \n\tn2 = len(str2) \n\ti = 0\n\tj = 0\n\twhile i <= n1 - 1 and j <= n2 - 1: \n\t\tif (str1[i] != str2[j]): \n\t\t\tbreak\n\t\tresult += str1[i] \n\t\ti += 1\n\t\tj += 1\n\treturn (result) \ndef common_prefix (arr, n): \n\tprefix = arr[0] \n\tfor i in range (1, n): \n\t\tprefix = common_prefix_util(prefix, arr[i]) \n\treturn (prefix)", "input_output_pairs": [{"input": "common_prefix(['tablets', 'tables', 'taxi', 'tamarind'], 4)", "output": "'ta'", "ops": "=="}, {"input": "common_prefix(['apples', 'ape', 'april'], 3)", "output": "'ap'", "ops": "=="}, {"input": "common_prefix(['teens', 'teenager', 'teenmar'], 3)", "output": "'teen'", "ops": "=="}], "context": "", "instance_idx": 174, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 141, "description": "Write a function to sort a list of elements using pancake sort.", "code": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums", "input_output_pairs": [{"input": "pancake_sort([15, 79, 25, 38, 69])", "output": "[15, 25, 38, 69, 79]", "ops": "=="}, {"input": "pancake_sort([98, 12, 54, 36, 85])", "output": "[12, 36, 54, 85, 98]", "ops": "=="}, {"input": "pancake_sort([41, 42, 32, 12, 23])", "output": "[12, 23, 32, 41, 42]", "ops": "=="}], "context": "", "instance_idx": 175, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 188, "description": "Write a python function to check whether the given number can be represented by product of two squares or not.", "code": "def prod_Square(n):\n    for i in range(2,(n) + 1):\n        if (i*i < (n+1)):\n            for j in range(2,n + 1):\n                if ((i*i*j*j) == n):\n                    return True;\n    return False;", "input_output_pairs": [{"input": "prod_Square(25)", "output": "False", "ops": "=="}, {"input": "prod_Square(30)", "output": "False", "ops": "=="}, {"input": "prod_Square(16)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 176, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/30", "description": "Return only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]", "code": "def get_positive(l: list):\n    return [e for e in l if e > 0]", "input_output_pairs": [{"input": "get_positive([-1, -2, 4, 5, 6])", "output": "[4, 5, 6]", "ops": "=="}, {"input": "get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])", "output": "[5, 3, 2, 3, 3, 9, 123, 1]", "ops": "=="}, {"input": "get_positive([-1, -2])", "output": "[]", "ops": "=="}, {"input": "get_positive([])", "output": "[]", "ops": "=="}], "context": "", "instance_idx": 177, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 349, "description": "Write a python function to check whether the given string is a binary string or not.", "code": "def check(string) :\n    p = set(string) \n    s = {'0', '1'} \n    if s == p or p == {'0'} or p == {'1'}: \n        return (\"Yes\") \n    else : \n        return (\"No\")", "input_output_pairs": [{"input": "check('01010101010')", "output": "'Yes'", "ops": "=="}, {"input": "check('name0')", "output": "'No'", "ops": "=="}, {"input": "check('101')", "output": "'Yes'", "ops": "=="}], "context": "", "instance_idx": 178, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 17, "description": "Write a function to find the perimeter of a square.", "code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "input_output_pairs": [{"input": "square_perimeter(10)", "output": "40", "ops": "=="}, {"input": "square_perimeter(5)", "output": "20", "ops": "=="}, {"input": "square_perimeter(4)", "output": "16", "ops": "=="}], "context": "", "instance_idx": 179, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 350, "description": "Write a python function to minimize the length of the string by removing occurrence of only one character.", "code": "def minimum_Length(s) : \n    maxOcc = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n) : \n        arr[ord(s[i]) -ord('a')] += 1\n    for i in range(26) : \n        if arr[i] > maxOcc : \n            maxOcc = arr[i] \n    return n - maxOcc", "input_output_pairs": [{"input": "minimum_Length('mnm')", "output": "1", "ops": "=="}, {"input": "minimum_Length('abcda')", "output": "3", "ops": "=="}, {"input": "minimum_Length('abcb')", "output": "2", "ops": "=="}], "context": "", "instance_idx": 180, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 64, "description": "Write a function to sort a list of tuples using lambda.", "code": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "input_output_pairs": [{"input": "subject_marks([('English', 88), ('Science', 90), ('Maths', 97), (\n    'Social sciences', 82)])", "output": "[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "ops": "=="}, {"input": "subject_marks([('Telugu', 49), ('Hindhi', 54), ('Social', 33)])", "output": "[('Social', 33), ('Telugu', 49), ('Hindhi', 54)]", "ops": "=="}, {"input": "subject_marks([('Physics', 96), ('Chemistry', 97), ('Biology', 45)])", "output": "[('Biology', 45), ('Physics', 96), ('Chemistry', 97)]", "ops": "=="}], "context": "", "instance_idx": 181, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 217, "description": "Write a python function to find the first repeated character in a given string.", "code": "def first_Repeated_Char(str): \n    h = {}\n    for ch in str:\n        if ch in h: \n            return ch;\n        else: \n            h[ch] = 0\n    return '\\0'", "input_output_pairs": [{"input": "first_Repeated_Char('Google')", "output": "'o'", "ops": "=="}, {"input": "first_Repeated_Char('data')", "output": "'a'", "ops": "=="}, {"input": "first_Repeated_Char('python')", "output": "'\\x00'", "ops": "=="}], "context": "", "instance_idx": 182, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/9", "description": "From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]", "code": "def rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result", "input_output_pairs": [{"input": "rolling_max([])", "output": "[]", "ops": "=="}, {"input": "rolling_max([1, 2, 3, 4])", "output": "[1, 2, 3, 4]", "ops": "=="}, {"input": "rolling_max([4, 3, 2, 1])", "output": "[4, 4, 4, 4]", "ops": "=="}, {"input": "rolling_max([3, 2, 3, 100, 3])", "output": "[3, 3, 3, 100, 100]", "ops": "=="}], "context": "from typing import List, Tuple", "instance_idx": 184, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 41, "description": "Write a function to filter even numbers using lambda function.", "code": "def filter_evennumbers(nums):\n even_nums = list(filter(lambda x: x%2 == 0, nums))\n return even_nums", "input_output_pairs": [{"input": "filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "output": "[2, 4, 6, 8, 10]", "ops": "=="}, {"input": "filter_evennumbers([10, 20, 45, 67, 84, 93])", "output": "[10, 20, 84]", "ops": "=="}, {"input": "filter_evennumbers([5, 7, 9, 8, 6, 4, 3])", "output": "[8, 6, 4]", "ops": "=="}], "context": "", "instance_idx": 185, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 373, "description": "Write a function to find the volume of a cuboid.", "code": "def volume_cuboid(l,w,h):\n  volume=l*w*h\n  return volume", "input_output_pairs": [{"input": "volume_cuboid(1, 2, 3)", "output": "6", "ops": "=="}, {"input": "volume_cuboid(5, 7, 9)", "output": "315", "ops": "=="}, {"input": "volume_cuboid(10, 15, 21)", "output": "3150", "ops": "=="}], "context": "", "instance_idx": 186, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 358, "description": "Write a function to find modulo division of two lists using map and lambda function.", "code": "def moddiv_list(nums1,nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)", "input_output_pairs": [{"input": "moddiv_list([4, 5, 6], [1, 2, 3])", "output": "[0, 1, 0]", "ops": "=="}, {"input": "moddiv_list([3, 2], [1, 4])", "output": "[0, 2]", "ops": "=="}, {"input": "moddiv_list([90, 120], [50, 70])", "output": "[40, 50]", "ops": "=="}], "context": "", "instance_idx": 187, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 77, "description": "Write a python function to find the difference between sum of even and odd digits.", "code": "def is_Diff(n): \n    return (n % 11 == 0)", "input_output_pairs": [{"input": "is_Diff(12345)", "output": "False", "ops": "=="}, {"input": "is_Diff(1212112)", "output": "True", "ops": "=="}, {"input": "is_Diff(1212)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 188, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/154", "description": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => False\ncycpattern_check(\"hello\",\"ell\") => True\ncycpattern_check(\"whassup\",\"psus\") => False\ncycpattern_check(\"abab\",\"baa\") => True\ncycpattern_check(\"efef\",\"eeff\") => False\ncycpattern_check(\"himenss\",\"simen\") => True", "code": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False", "input_output_pairs": [{"input": "cycpattern_check('xyzw', 'xyw')", "output": "False", "ops": "=="}, {"input": "cycpattern_check('yello', 'ell')", "output": "True", "ops": "=="}, {"input": "cycpattern_check('whattup', 'ptut')", "output": "False", "ops": "=="}, {"input": "cycpattern_check('efef', 'fee')", "output": "True", "ops": "=="}, {"input": "cycpattern_check('abab', 'aabb')", "output": "False", "ops": "=="}, {"input": "cycpattern_check('winemtt', 'tinem')", "output": "True", "ops": "=="}], "context": "", "instance_idx": 189, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 202, "description": "Write a function to remove even characters in a string.", "code": "def remove_even(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 != 0):\n        str2 = str2 + str1[i - 1]\n return str2", "input_output_pairs": [{"input": "remove_even('python')", "output": "'pto'", "ops": "=="}, {"input": "remove_even('program')", "output": "'porm'", "ops": "=="}, {"input": "remove_even('language')", "output": "'lnug'", "ops": "=="}], "context": "", "instance_idx": 190, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 388, "description": "Write a python function to find the highest power of 2 that is less than or equal to n.", "code": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break; \n    return res;", "input_output_pairs": [{"input": "highest_Power_of_2(10)", "output": "8", "ops": "=="}, {"input": "highest_Power_of_2(19)", "output": "16", "ops": "=="}, {"input": "highest_Power_of_2(32)", "output": "32", "ops": "=="}], "context": "", "instance_idx": 191, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 192, "description": "Write a python function to check whether a string has atleast one letter and one number.", "code": "def check_String(str): \n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n", "input_output_pairs": [{"input": "check_String('thishasboth29')", "output": "True", "ops": "=="}, {"input": "check_String('python')", "output": "False", "ops": "=="}, {"input": "check_String('string')", "output": "False", "ops": "=="}], "context": "", "instance_idx": 192, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/155", "description": "Given an integer. return a tuple that has the number of even and odd digits respectively.\n\nExample:\neven_odd_count(-12) ==> (1, 1)\neven_odd_count(123) ==> (1, 2)", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)", "input_output_pairs": [{"input": "even_odd_count(7)", "output": "(0, 1)", "ops": "=="}, {"input": "even_odd_count(-78)", "output": "(1, 1)", "ops": "=="}, {"input": "even_odd_count(3452)", "output": "(2, 2)", "ops": "=="}, {"input": "even_odd_count(346211)", "output": "(3, 3)", "ops": "=="}, {"input": "even_odd_count(-345821)", "output": "(3, 3)", "ops": "=="}, {"input": "even_odd_count(-2)", "output": "(1, 0)", "ops": "=="}, {"input": "even_odd_count(-45347)", "output": "(2, 3)", "ops": "=="}, {"input": "even_odd_count(0)", "output": "(1, 0)", "ops": "=="}], "context": "", "instance_idx": 193, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/104", "description": "Given a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\n\nNote: Returned list should be sorted in increasing order.\n\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]", "code": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)", "input_output_pairs": [{"input": "unique_digits([15, 33, 1422, 1])", "output": "[1, 15, 33]", "ops": "=="}, {"input": "unique_digits([152, 323, 1422, 10])", "output": "[]", "ops": "=="}, {"input": "unique_digits([12345, 2033, 111, 151])", "output": "[111, 151]", "ops": "=="}, {"input": "unique_digits([135, 103, 31])", "output": "[31, 135]", "ops": "=="}], "context": "", "instance_idx": 194, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/112", "description": "Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)", "input_output_pairs": [{"input": "reverse_delete('abcde', 'ae')", "output": "('bcd', False)", "ops": "=="}, {"input": "reverse_delete('abcdef', 'b')", "output": "('acdef', False)", "ops": "=="}, {"input": "reverse_delete('abcdedcba', 'ab')", "output": "('cdedc', True)", "ops": "=="}, {"input": "reverse_delete('dwik', 'w')", "output": "('dik', False)", "ops": "=="}, {"input": "reverse_delete('a', 'a')", "output": "('', True)", "ops": "=="}, {"input": "reverse_delete('abcdedcba', '')", "output": "('abcdedcba', True)", "ops": "=="}, {"input": "reverse_delete('abcdedcba', 'v')", "output": "('abcdedcba', True)", "ops": "=="}, {"input": "reverse_delete('vabba', 'v')", "output": "('abba', True)", "ops": "=="}, {"input": "reverse_delete('mamma', 'mia')", "output": "('', True)", "ops": "=="}], "context": "", "instance_idx": 195, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 401, "description": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "code": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "input_output_pairs": [{"input": "add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1\n    ), (7, 3)))", "output": "((7, 10), (7, 14), (3, 10), (8, 13))", "ops": "=="}, {"input": "add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2,\n    2), (8, 4)))", "output": "((9, 12), (9, 16), (5, 12), (10, 15))", "ops": "=="}, {"input": "add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3,\n    3), (9, 5)))", "output": "((11, 14), (11, 18), (7, 14), (12, 17))", "ops": "=="}], "context": "", "instance_idx": 196, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 407, "description": "Write a function to create the next bigger number by rearranging the digits of a given number.", "code": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False", "input_output_pairs": [{"input": "rearrange_bigger(12)", "output": "21", "ops": "=="}, {"input": "rearrange_bigger(10)", "output": "False", "ops": "=="}, {"input": "rearrange_bigger(102)", "output": "120", "ops": "=="}], "context": "", "instance_idx": 197, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/94", "description": "You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7", "code": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result", "input_output_pairs": [{"input": "skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, \n    324, 4, 3])", "output": "10", "ops": "=="}, {"input": "skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])", "output": "25", "ops": "=="}, {"input": "skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])", "output": "13", "ops": "=="}, {"input": "skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])", "output": "11", "ops": "=="}, {"input": "skjkasdkd([0, 81, 12, 3, 1, 21])", "output": "3", "ops": "=="}, {"input": "skjkasdkd([0, 8, 1, 2, 1, 7])", "output": "7", "ops": "=="}, {"input": "skjkasdkd([8191])", "output": "19", "ops": "=="}, {"input": "skjkasdkd([8191, 123456, 127, 7])", "output": "19", "ops": "=="}, {"input": "skjkasdkd([127, 97, 8192])", "output": "10", "ops": "=="}], "context": "", "instance_idx": 198, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 255, "description": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "code": "def combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))", "input_output_pairs": [{"input": "combinations_colors(['Red', 'Green', 'Blue'], 1)", "output": "[('Red',), ('Green',), ('Blue',)]", "ops": "=="}, {"input": "combinations_colors(['Red', 'Green', 'Blue'], 2)", "output": "[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), (\n    'Green', 'Blue'), ('Blue', 'Blue')]", "ops": "=="}, {"input": "combinations_colors(['Red', 'Green', 'Blue'], 3)", "output": "[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), (\n    'Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue',\n    'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), (\n    'Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]", "ops": "=="}], "context": "from itertools import combinations_with_replacement", "instance_idx": 199, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 476, "description": "Write a python function to find the sum of the largest and smallest value in a given array.", "code": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum", "input_output_pairs": [{"input": "big_sum([1, 2, 3])", "output": "4", "ops": "=="}, {"input": "big_sum([-1, 2, 3, 4])", "output": "3", "ops": "=="}, {"input": "big_sum([2, 3, 6])", "output": "8", "ops": "=="}], "context": "", "instance_idx": 200, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/67", "description": "In this task, you will be given a string that represents a number of apples and oranges\nthat are distributed in a basket of fruit this basket contains\napples, oranges, and mango fruits. Given the string that represents the total number of\nthe oranges and apples and an integer that represent the total number of the fruits\nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19", "code": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)", "input_output_pairs": [{"input": "fruit_distribution('5 apples and 6 oranges', 19)", "output": "8", "ops": "=="}, {"input": "fruit_distribution('5 apples and 6 oranges', 21)", "output": "10", "ops": "=="}, {"input": "fruit_distribution('0 apples and 1 oranges', 3)", "output": "2", "ops": "=="}, {"input": "fruit_distribution('1 apples and 0 oranges', 3)", "output": "2", "ops": "=="}, {"input": "fruit_distribution('2 apples and 3 oranges', 100)", "output": "95", "ops": "=="}, {"input": "fruit_distribution('2 apples and 3 oranges', 5)", "output": "0", "ops": "=="}, {"input": "fruit_distribution('1 apples and 100 oranges', 120)", "output": "19", "ops": "=="}], "context": "", "instance_idx": 201, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 439, "description": "Write a function to convert a list of multiple integers into a single integer.", "code": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x", "input_output_pairs": [{"input": "multiple_to_single([11, 33, 50])", "output": "113350", "ops": "=="}, {"input": "multiple_to_single([-1, 2, 3, 4, 5, 6])", "output": "-123456", "ops": "=="}, {"input": "multiple_to_single([10, 15, 20, 25])", "output": "10152025", "ops": "=="}], "context": "", "instance_idx": 202, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 351, "description": "Write a python function to find the first element occurring k times in a given array.", "code": "def first_Element(arr,n,k): \n    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):  \n        if (count_map[arr[i]] == k): \n            return arr[i] \n        i += 1 \n    return -1", "input_output_pairs": [{"input": "first_Element([0, 1, 2, 3, 4, 5], 6, 1)", "output": "0", "ops": "=="}, {"input": "first_Element([1, 2, 1, 3, 4], 5, 2)", "output": "1", "ops": "=="}, {"input": "first_Element([2, 3, 4, 3, 5, 7, 1, 2, 3, 5], 10, 2)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 203, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 155, "description": "Write a python function to toggle all even bits of a given number.", "code": "def even_bit_toggle_number(n) : \n    res = 0; count = 0; temp = n \n    while (temp > 0) :     \n        if (count % 2 == 1) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res", "input_output_pairs": [{"input": "even_bit_toggle_number(10)", "output": "0", "ops": "=="}, {"input": "even_bit_toggle_number(20)", "output": "30", "ops": "=="}, {"input": "even_bit_toggle_number(30)", "output": "20", "ops": "=="}], "context": "", "instance_idx": 204, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 132, "description": "Write a function to convert tuple to a string.", "code": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str", "input_output_pairs": [{"input": "tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))", "output": "'exercises'", "ops": "=="}, {"input": "tup_string(('p', 'y', 't', 'h', 'o', 'n'))", "output": "'python'", "ops": "=="}, {"input": "tup_string(('p', 'r', 'o', 'g', 'r', 'a', 'm'))", "output": "'program'", "ops": "=="}], "context": "", "instance_idx": 205, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/39", "description": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89", "code": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]", "input_output_pairs": [{"input": "prime_fib(1)", "output": "2", "ops": "=="}, {"input": "prime_fib(2)", "output": "3", "ops": "=="}, {"input": "prime_fib(3)", "output": "5", "ops": "=="}, {"input": "prime_fib(4)", "output": "13", "ops": "=="}, {"input": "prime_fib(5)", "output": "89", "ops": "=="}, {"input": "prime_fib(6)", "output": "233", "ops": "=="}, {"input": "prime_fib(7)", "output": "1597", "ops": "=="}, {"input": "prime_fib(8)", "output": "28657", "ops": "=="}, {"input": "prime_fib(9)", "output": "514229", "ops": "=="}, {"input": "prime_fib(10)", "output": "433494437", "ops": "=="}], "context": "", "instance_idx": 206, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 28, "description": "Write a python function to find binomial co-efficient.", "code": "def binomial_Coeff(n,k): \n    if k > n : \n       return 0\n    if k==0 or k ==n : \n        return 1 \n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)", "input_output_pairs": [{"input": "binomial_Coeff(5, 2)", "output": "10", "ops": "=="}, {"input": "binomial_Coeff(4, 3)", "output": "4", "ops": "=="}, {"input": "binomial_Coeff(3, 2)", "output": "3", "ops": "=="}, {"input": "binomial_Coeff(14, 6)", "output": "3003", "ops": "=="}], "context": "", "instance_idx": 207, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 79, "description": "Write a python function to check whether the length of the word is odd or not.", "code": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False", "input_output_pairs": [{"input": "word_len('Hadoop')", "output": "False", "ops": "=="}, {"input": "word_len('great')", "output": "True", "ops": "=="}, {"input": "word_len('structure')", "output": "True", "ops": "=="}], "context": "", "instance_idx": 208, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 496, "description": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "code": "def heap_queue_smallest(nums,n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums", "input_output_pairs": [{"input": "heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)", "output": "[14, 22, 25]", "ops": "=="}, {"input": "heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2)", "output": "[14, 22]", "ops": "=="}, {"input": "heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)", "output": "[14, 22, 22, 25, 35]", "ops": "=="}], "context": "import heapq as hq", "instance_idx": 209, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/58", "description": "Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]", "code": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))", "input_output_pairs": [{"input": "common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])", "output": "[1, 5, 653]", "ops": "=="}, {"input": "common([5, 3, 2, 8], [3, 2])", "output": "[2, 3]", "ops": "=="}, {"input": "common([4, 3, 2, 8], [3, 2, 4])", "output": "[2, 3, 4]", "ops": "=="}, {"input": "common([4, 3, 2, 8], [])", "output": "[]", "ops": "=="}], "context": "", "instance_idx": 210, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 451, "description": "Write a function to remove all whitespaces from the given string using regex.", "code": "def remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))", "input_output_pairs": [{"input": "remove_whitespaces(' Google    Flutter ')", "output": "'GoogleFlutter'", "ops": "=="}, {"input": "remove_whitespaces(' Google    Dart ')", "output": "'GoogleDart'", "ops": "=="}, {"input": "remove_whitespaces(' iOS    Swift ')", "output": "'iOSSwift'", "ops": "=="}], "context": "import re", "instance_idx": 211, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 39, "description": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "code": "def rearange_string(S):\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")", "input_output_pairs": [{"input": "rearange_string('aab')", "output": "'aba'", "ops": "=="}, {"input": "rearange_string('aabb')", "output": "'abab'", "ops": "=="}, {"input": "rearange_string('abccdd')", "output": "'cdabcd'", "ops": "=="}], "context": "import heapq\nfrom collections import Counter", "instance_idx": 212, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 199, "description": "Write a python function to find highest power of 2 less than or equal to given number.", "code": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break;      \n    return res;", "input_output_pairs": [{"input": "highest_Power_of_2(10)", "output": "8", "ops": "=="}, {"input": "highest_Power_of_2(19)", "output": "16", "ops": "=="}, {"input": "highest_Power_of_2(32)", "output": "32", "ops": "=="}], "context": "", "instance_idx": 213, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 270, "description": "Write a python function to find the sum of even numbers at even positions.", "code": "def sum_even_and_even_index(arr,n):  \n    i = 0\n    sum = 0\n    for i in range(0,n,2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum", "input_output_pairs": [{"input": "sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6)", "output": "30", "ops": "=="}, {"input": "sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10)", "output": "26", "ops": "=="}, {"input": "sum_even_and_even_index([5, 6, 12, 1], 4)", "output": "12", "ops": "=="}], "context": "", "instance_idx": 214, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/82", "description": "Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False", "code": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True", "input_output_pairs": [{"input": "prime_length('Hello')", "output": "True", "ops": "=="}, {"input": "prime_length('abcdcba')", "output": "True", "ops": "=="}, {"input": "prime_length('kittens')", "output": "True", "ops": "=="}, {"input": "prime_length('orange')", "output": "False", "ops": "=="}, {"input": "prime_length('wow')", "output": "True", "ops": "=="}, {"input": "prime_length('world')", "output": "True", "ops": "=="}, {"input": "prime_length('MadaM')", "output": "True", "ops": "=="}, {"input": "prime_length('Wow')", "output": "True", "ops": "=="}, {"input": "prime_length('')", "output": "False", "ops": "=="}, {"input": "prime_length('HI')", "output": "True", "ops": "=="}, {"input": "prime_length('go')", "output": "True", "ops": "=="}, {"input": "prime_length('gogo')", "output": "False", "ops": "=="}, {"input": "prime_length('aaaaaaaaaaaaaaa')", "output": "False", "ops": "=="}, {"input": "prime_length('Madam')", "output": "True", "ops": "=="}, {"input": "prime_length('M')", "output": "False", "ops": "=="}, {"input": "prime_length('0')", "output": "False", "ops": "=="}], "context": "", "instance_idx": 215, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 446, "description": "Write a python function to count the occurence of all elements of list in a tuple.", "code": "def count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count", "input_output_pairs": [{"input": "count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b'])", "output": "3", "ops": "=="}, {"input": "count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7])", "output": "6", "ops": "=="}, {"input": "count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2])", "output": "2", "ops": "=="}], "context": "from collections import Counter", "instance_idx": 216, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/106", "description": "Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]", "code": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret", "input_output_pairs": [{"input": "f(5)", "output": "[1, 2, 6, 24, 15]", "ops": "=="}, {"input": "f(7)", "output": "[1, 2, 6, 24, 15, 720, 28]", "ops": "=="}, {"input": "f(1)", "output": "[1]", "ops": "=="}, {"input": "f(3)", "output": "[1, 2, 6]", "ops": "=="}], "context": "", "instance_idx": 217, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/124", "description": "You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example:\nvalid_date('03-11-2000') => True\n\nvalid_date('15-01-2012') => False\n\nvalid_date('04-0-2040') => False\n\nvalid_date('06-04-2020') => True\n\nvalid_date('06/04/2020') => False", "code": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True", "input_output_pairs": [{"input": "valid_date('03-11-2000')", "output": "True", "ops": "=="}, {"input": "valid_date('15-01-2012')", "output": "False", "ops": "=="}, {"input": "valid_date('04-0-2040')", "output": "False", "ops": "=="}, {"input": "valid_date('06-04-2020')", "output": "True", "ops": "=="}, {"input": "valid_date('01-01-2007')", "output": "True", "ops": "=="}, {"input": "valid_date('03-32-2011')", "output": "False", "ops": "=="}, {"input": "valid_date('')", "output": "False", "ops": "=="}, {"input": "valid_date('04-31-3000')", "output": "False", "ops": "=="}, {"input": "valid_date('06-06-2005')", "output": "True", "ops": "=="}, {"input": "valid_date('21-31-2000')", "output": "False", "ops": "=="}, {"input": "valid_date('04-12-2003')", "output": "True", "ops": "=="}, {"input": "valid_date('04122003')", "output": "False", "ops": "=="}, {"input": "valid_date('20030412')", "output": "False", "ops": "=="}, {"input": "valid_date('2003-04')", "output": "False", "ops": "=="}, {"input": "valid_date('2003-04-12')", "output": "False", "ops": "=="}, {"input": "valid_date('04-2003')", "output": "False", "ops": "=="}], "context": "", "instance_idx": 218, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 84, "description": "Write a function to find the n-th number in newman conway sequence.", "code": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "input_output_pairs": [{"input": "sequence(10)", "output": "6", "ops": "=="}, {"input": "sequence(2)", "output": "1", "ops": "=="}, {"input": "sequence(3)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 219, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 489, "description": "Write a python function to find the frequency of the largest value in a given array.", "code": "def frequency_Of_Largest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq", "input_output_pairs": [{"input": "frequency_Of_Largest(5, [1, 2, 3, 4, 4])", "output": "2", "ops": "=="}, {"input": "frequency_Of_Largest(3, [5, 6, 5])", "output": "1", "ops": "=="}, {"input": "frequency_Of_Largest(4, [2, 7, 7, 7])", "output": "3", "ops": "=="}], "context": "", "instance_idx": 220, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 473, "description": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "code": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)", "input_output_pairs": [{"input": "tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, \n    5), (9, 11)])", "output": "{(4, 5), (3, 4), (5, 6)}", "ops": "=="}, {"input": "tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (\n    16, 12), (10, 13)])", "output": "{(4, 7), (1, 4)}", "ops": "=="}, {"input": "tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, \n    2), (1, 3)])", "output": "{(1, 3), (2, 3)}", "ops": "=="}], "context": "", "instance_idx": 221, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 284, "description": "Write a function to check whether all items of a list are equal to a given string.", "code": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element", "input_output_pairs": [{"input": "check_element(['green', 'orange', 'black', 'white'], 'blue')", "output": "False", "ops": "=="}, {"input": "check_element([1, 2, 3, 4], 7)", "output": "False", "ops": "=="}, {"input": "check_element(['green', 'green', 'green', 'green'], 'green')", "output": "True", "ops": "=="}], "context": "", "instance_idx": 222, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 26, "description": "Write a function to check if the given tuple list has all k elements.", "code": "def check_k_elements(test_list, K):\n  res = True\n  for tup in test_list:\n    for ele in tup:\n      if ele != K:\n        res = False\n  return (res)", "input_output_pairs": [{"input": "check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4,)], 4)", "output": "True", "ops": "=="}, {"input": "check_k_elements([(7, 7, 7), (7, 7)], 7)", "output": "True", "ops": "=="}, {"input": "check_k_elements([(9, 9), (9, 9, 9, 9)], 7)", "output": "False", "ops": "=="}, {"input": "check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4,)], 4)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 223, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 344, "description": "Write a python function to find number of elements with odd factors in a given range.", "code": "def count_Odd_Squares(n,m): \n    return int(m**0.5) - int((n-1)**0.5)", "input_output_pairs": [{"input": "count_Odd_Squares(5, 100)", "output": "8", "ops": "=="}, {"input": "count_Odd_Squares(8, 65)", "output": "6", "ops": "=="}, {"input": "count_Odd_Squares(2, 5)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 224, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 395, "description": "Write a python function to find the first non-repeated character in a given string.", "code": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "input_output_pairs": [{"input": "first_non_repeating_character('abcabc')", "output": "None", "ops": "=="}, {"input": "first_non_repeating_character('abc')", "output": "'a'", "ops": "=="}, {"input": "first_non_repeating_character('ababc')", "output": "'c'", "ops": "=="}], "context": "", "instance_idx": 225, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 221, "description": "Write a python function to find the first even number in a given list of numbers.", "code": "def first_even(nums):\n    first_even = next((el for el in nums if el%2==0),-1)\n    return first_even", "input_output_pairs": [{"input": "first_even([1, 3, 5, 7, 4, 1, 6, 8])", "output": "4", "ops": "=="}, {"input": "first_even([2, 3, 4])", "output": "2", "ops": "=="}, {"input": "first_even([5, 6, 7])", "output": "6", "ops": "=="}], "context": "", "instance_idx": 226, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 363, "description": "Write a function to add the k elements to each element in the tuple.", "code": "def add_K_element(test_list, K):\n  res = [tuple(j + K for j in sub ) for sub in test_list]\n  return (res)", "input_output_pairs": [{"input": "add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)", "output": "[(5, 7, 8), (6, 8, 10), (7, 12, 5)]", "ops": "=="}, {"input": "add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)", "output": "[(9, 10, 11), (12, 13, 14), (15, 16, 17)]", "ops": "=="}, {"input": "add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)", "output": "[(20, 21, 22), (23, 24, 25), (26, 27, 28)]", "ops": "=="}], "context": "", "instance_idx": 227, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 334, "description": "Write a python function to check whether the triangle is valid or not if sides are given.", "code": "def check_Validity(a,b,c):  \n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return False\n    else: \n        return True", "input_output_pairs": [{"input": "check_Validity(1, 2, 3)", "output": "False", "ops": "=="}, {"input": "check_Validity(2, 3, 5)", "output": "False", "ops": "=="}, {"input": "check_Validity(7, 10, 5)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 228, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 92, "description": "Write a function to check whether the given number is undulating or not.", "code": "def is_undulating(n): \n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True", "input_output_pairs": [{"input": "is_undulating('1212121')", "output": "True", "ops": "=="}, {"input": "is_undulating('1991')", "output": "False", "ops": "=="}, {"input": "is_undulating('121')", "output": "True", "ops": "=="}], "context": "", "instance_idx": 229, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 467, "description": "Write a python function to convert decimal number to octal number.", "code": "def decimal_to_Octal(deciNum):\n    octalNum = 0\n    countval = 1;\n    dNo = deciNum;\n    while (deciNum!= 0):\n        remainder= deciNum % 8;\n        octalNum+= remainder*countval;\n        countval= countval*10;\n        deciNum //= 8; \n    return (octalNum)", "input_output_pairs": [{"input": "decimal_to_Octal(10)", "output": "12", "ops": "=="}, {"input": "decimal_to_Octal(2)", "output": "2", "ops": "=="}, {"input": "decimal_to_Octal(33)", "output": "41", "ops": "=="}], "context": "", "instance_idx": 230, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 193, "description": "Write a function to remove the duplicates from the given tuple.", "code": "def remove_tuple(test_tup):\n  res = tuple(set(test_tup))\n  return (res)", "input_output_pairs": [{"input": "remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3))", "output": "(1, 2, 3, 5)", "ops": "=="}, {"input": "remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8))", "output": "(2, 3, 4, 5, 6, 7, 8)", "ops": "=="}, {"input": "remove_tuple((11, 12, 13, 11, 11, 12, 14, 13))", "output": "(11, 12, 13, 14)", "ops": "=="}], "context": "", "instance_idx": 231, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 488, "description": "Write a function to find the area of a pentagon.", "code": "def area_pentagon(a):\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  return area", "input_output_pairs": [{"input": "area_pentagon(5)", "output": "43.01193501472417", "ops": "=="}, {"input": "area_pentagon(10)", "output": "172.0477400588967", "ops": "=="}, {"input": "area_pentagon(15)", "output": "387.10741513251753", "ops": "=="}], "context": "import math", "instance_idx": 232, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/147", "description": "You are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).", "code": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)", "input_output_pairs": [{"input": "get_max_triples(5)", "output": "1", "ops": "=="}, {"input": "get_max_triples(6)", "output": "4", "ops": "=="}, {"input": "get_max_triples(10)", "output": "36", "ops": "=="}, {"input": "get_max_triples(100)", "output": "53361", "ops": "=="}], "context": "", "instance_idx": 233, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 370, "description": "Write a function to sort a tuple by its float element.", "code": "def float_sort(price):\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\n  return float_sort", "input_output_pairs": [{"input": "float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])", "output": "[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]", "ops": "=="}, {"input": "float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])", "output": "[('item3', '20'), ('item1', '15'), ('item2', '10')]", "ops": "=="}, {"input": "float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])", "output": "[('item3', '14'), ('item2', '10'), ('item1', '5')]", "ops": "=="}], "context": "", "instance_idx": 234, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 247, "description": "Write a function to find the longest palindromic subsequence in the given string.", "code": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]", "input_output_pairs": [{"input": "lps('TENS FOR TENS')", "output": "5", "ops": "=="}, {"input": "lps('CARDIO FOR CARDS')", "output": "7", "ops": "=="}, {"input": "lps('PART OF THE JOURNEY IS PART')", "output": "9", "ops": "=="}], "context": "", "instance_idx": 235, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/46", "description": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14", "code": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]", "input_output_pairs": [{"input": "fib4(5)", "output": "4", "ops": "=="}, {"input": "fib4(8)", "output": "28", "ops": "=="}, {"input": "fib4(10)", "output": "104", "ops": "=="}, {"input": "fib4(12)", "output": "386", "ops": "=="}], "context": "", "instance_idx": 236, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 337, "description": "Write a function that matches a word at the end of a string, with optional punctuation.", "code": "def text_match_word(text):\n        patterns = '\\w+\\S*$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'", "input_output_pairs": [{"input": "text_match_word('python.')", "output": "'Found a match!'", "ops": "=="}, {"input": "text_match_word('python.')", "output": "'Found a match!'", "ops": "=="}, {"input": "text_match_word('  lang  .')", "output": "'Not matched!'", "ops": "=="}], "context": "import re", "instance_idx": 237, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 243, "description": "Write a function to sort the given list based on the occurrence of first element of tuples.", "code": "def sort_on_occurence(lst): \n\tdct = {} \n\tfor i, j in lst: \n\t\tdct.setdefault(i, []).append(j) \n\treturn ([(i, *dict.fromkeys(j), len(j)) \n\t\t\t\tfor i, j in dct.items()])", "input_output_pairs": [{"input": "sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')])", "output": "[(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]", "ops": "=="}, {"input": "sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')])", "output": "[('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]", "ops": "=="}, {"input": "sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')])", "output": "[(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]", "ops": "=="}], "context": "", "instance_idx": 238, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 309, "description": "Write a python function to find the maximum of two numbers.", "code": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b", "input_output_pairs": [{"input": "maximum(5, 10)", "output": "10", "ops": "=="}, {"input": "maximum(-1, -2)", "output": "-1", "ops": "=="}, {"input": "maximum(9, 7)", "output": "9", "ops": "=="}], "context": "", "instance_idx": 239, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 331, "description": "Write a python function to count unset bits of a given number.", "code": "def count_unset_bits(n): \n    count = 0\n    x = 1\n    while(x < n + 1): \n        if ((x & n) == 0): \n            count += 1\n        x = x << 1\n    return count", "input_output_pairs": [{"input": "count_unset_bits(2)", "output": "1", "ops": "=="}, {"input": "count_unset_bits(4)", "output": "2", "ops": "=="}, {"input": "count_unset_bits(6)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 240, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 458, "description": "Write a function to find the area of a rectangle.", "code": "def rectangle_area(l,b):\n  area=l*b\n  return area", "input_output_pairs": [{"input": "rectangle_area(10, 20)", "output": "200", "ops": "=="}, {"input": "rectangle_area(10, 5)", "output": "50", "ops": "=="}, {"input": "rectangle_area(4, 2)", "output": "8", "ops": "=="}], "context": "", "instance_idx": 241, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 487, "description": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "code": "def sort_tuple(tup): \n\tlst = len(tup) \n\tfor i in range(0, lst): \n\t\tfor j in range(0, lst-i-1): \n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \n\t\t\t\ttemp = tup[j] \n\t\t\t\ttup[j]= tup[j + 1] \n\t\t\t\ttup[j + 1]= temp \n\treturn tup", "input_output_pairs": [{"input": "sort_tuple([(1, 3), (3, 2), (2, 1)])", "output": "[(2, 1), (3, 2), (1, 3)]", "ops": "=="}, {"input": "sort_tuple([(2, 4), (3, 3), (1, 1)])", "output": "[(1, 1), (3, 3), (2, 4)]", "ops": "=="}, {"input": "sort_tuple([(3, 9), (6, 7), (4, 3)])", "output": "[(4, 3), (6, 7), (3, 9)]", "ops": "=="}], "context": "", "instance_idx": 242, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 429, "description": "Write a function to extract the elementwise and tuples from the given two tuples.", "code": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)", "input_output_pairs": [{"input": "and_tuples((10, 4, 6, 9), (5, 2, 3, 3))", "output": "(0, 0, 2, 1)", "ops": "=="}, {"input": "and_tuples((1, 2, 3, 4), (5, 6, 7, 8))", "output": "(1, 2, 3, 0)", "ops": "=="}, {"input": "and_tuples((8, 9, 11, 12), (7, 13, 14, 17))", "output": "(0, 9, 10, 0)", "ops": "=="}], "context": "", "instance_idx": 243, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 385, "description": "Write a function to find the n'th perrin number using recursion.", "code": "def get_perrin(n):\n  if (n == 0):\n    return 3\n  if (n == 1):\n    return 0\n  if (n == 2):\n    return 2 \n  return get_perrin(n - 2) + get_perrin(n - 3)", "input_output_pairs": [{"input": "get_perrin(9)", "output": "12", "ops": "=="}, {"input": "get_perrin(4)", "output": "2", "ops": "=="}, {"input": "get_perrin(6)", "output": "5", "ops": "=="}], "context": "", "instance_idx": 244, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 252, "description": "Write a python function to convert complex numbers to polar coordinates.", "code": "def convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num)", "input_output_pairs": [{"input": "convert(1)", "output": "(1.0, 0.0)", "ops": "=="}, {"input": "convert(4)", "output": "(4.0, 0.0)", "ops": "=="}, {"input": "convert(5)", "output": "(5.0, 0.0)", "ops": "=="}], "context": "import cmath", "instance_idx": 245, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 296, "description": "Write a python function to count inversions in an array.", "code": "def get_Inv_Count(arr,n): \n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count", "input_output_pairs": [{"input": "get_Inv_Count([1, 20, 6, 4, 5], 5)", "output": "5", "ops": "=="}, {"input": "get_Inv_Count([1, 2, 1], 3)", "output": "1", "ops": "=="}, {"input": "get_Inv_Count([1, 2, 5, 6, 1], 5)", "output": "3", "ops": "=="}], "context": "", "instance_idx": 246, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 57, "description": "Write a python function to find the largest number that can be formed with the given digits.", "code": "def find_Max_Num(arr,n) : \n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num", "input_output_pairs": [{"input": "find_Max_Num([1, 2, 3], 3)", "output": "321", "ops": "=="}, {"input": "find_Max_Num([4, 5, 6, 1], 4)", "output": "6541", "ops": "=="}, {"input": "find_Max_Num([1, 2, 3, 9], 4)", "output": "9321", "ops": "=="}], "context": "", "instance_idx": 247, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 63, "description": "Write a function to find the maximum difference between available pairs in the given tuple list.", "code": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res)", "input_output_pairs": [{"input": "max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])", "output": "7", "ops": "=="}, {"input": "max_difference([(4, 6), (2, 17), (9, 13), (11, 12)])", "output": "15", "ops": "=="}, {"input": "max_difference([(12, 35), (21, 27), (13, 23), (41, 22)])", "output": "23", "ops": "=="}], "context": "", "instance_idx": 248, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 329, "description": "Write a python function to count negative numbers in a list.", "code": "def neg_count(list):\n  neg_count= 0\n  for num in list: \n    if num <= 0: \n      neg_count += 1\n  return neg_count", "input_output_pairs": [{"input": "neg_count([-1, -2, 3, -4, -5])", "output": "4", "ops": "=="}, {"input": "neg_count([1, 2, 3])", "output": "0", "ops": "=="}, {"input": "neg_count([1, 2, -3, -10, 20])", "output": "2", "ops": "=="}], "context": "", "instance_idx": 249, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 447, "description": "Write a function to find cubes of individual elements in a list using lambda function.", "code": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums", "input_output_pairs": [{"input": "cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "output": "[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "ops": "=="}, {"input": "cube_nums([10, 20, 30])", "output": "[1000, 8000, 27000]", "ops": "=="}, {"input": "cube_nums([12, 15])", "output": "[1728, 3375]", "ops": "=="}], "context": "", "instance_idx": 250, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 207, "description": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "code": "def find_longest_repeating_subseq(str): \n\tn = len(str) \n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \n\tfor i in range(1, n+1): \n\t\tfor j in range(1, n+1): \n\t\t\tif (str[i-1] == str[j-1] and i != j): \n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \n\t\t\telse: \n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \n\treturn dp[n][n]", "input_output_pairs": [{"input": "find_longest_repeating_subseq('AABEBCDD')", "output": "3", "ops": "=="}, {"input": "find_longest_repeating_subseq('aabb')", "output": "2", "ops": "=="}, {"input": "find_longest_repeating_subseq('aab')", "output": "1", "ops": "=="}], "context": "", "instance_idx": 251, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 149, "description": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "code": "def longest_subseq_with_diff_one(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "input_output_pairs": [{"input": "longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7)", "output": "6", "ops": "=="}, {"input": "longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7)", "output": "3", "ops": "=="}, {"input": "longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8)", "output": "7", "ops": "=="}], "context": "", "instance_idx": 252, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 452, "description": "Write a function that gives loss amount if the given amount has loss else return none.", "code": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return None", "input_output_pairs": [{"input": "loss_amount(1500, 1200)", "output": "None", "ops": "=="}, {"input": "loss_amount(100, 200)", "output": "100", "ops": "=="}, {"input": "loss_amount(2000, 5000)", "output": "3000", "ops": "=="}], "context": "", "instance_idx": 253, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 140, "description": "Write a function to extract elements that occur singly in the given tuple list.", "code": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res)", "input_output_pairs": [{"input": "extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])", "output": "[3, 4, 5, 7, 1]", "ops": "=="}, {"input": "extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])", "output": "[1, 2, 3, 4, 7, 8]", "ops": "=="}, {"input": "extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])", "output": "[7, 8, 9, 10, 11, 12]", "ops": "=="}], "context": "", "instance_idx": 254, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 318, "description": "Write a python function to find the maximum volume of a cuboid with given sum of sides.", "code": "def max_volume (s): \n    maxvalue = 0\n    i = 1\n    for i in range(s - 1): \n        j = 1\n        for j in range(s): \n            k = s - i - j \n            maxvalue = max(maxvalue, i * j * k)         \n    return maxvalue", "input_output_pairs": [{"input": "max_volume(8)", "output": "18", "ops": "=="}, {"input": "max_volume(4)", "output": "2", "ops": "=="}, {"input": "max_volume(1)", "output": "0", "ops": "=="}], "context": "", "instance_idx": 255, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/91", "description": "You'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1", "code": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)", "input_output_pairs": [{"input": "is_bored('Hello world')", "output": "0", "ops": "=="}, {"input": "is_bored('Is the sky blue?')", "output": "0", "ops": "=="}, {"input": "is_bored('I love It !')", "output": "1", "ops": "=="}, {"input": "is_bored('bIt')", "output": "0", "ops": "=="}, {"input": "is_bored('I feel good today. I will be productive. will kill It')", "output": "2", "ops": "=="}, {"input": "is_bored('You and I are going for a walk')", "output": "0", "ops": "=="}], "context": "", "instance_idx": 256, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 126, "description": "Write a python function to find the sum of common divisors of two given numbers.", "code": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum", "input_output_pairs": [{"input": "sum(10, 15)", "output": "6", "ops": "=="}, {"input": "sum(100, 150)", "output": "93", "ops": "=="}, {"input": "sum(4, 6)", "output": "3", "ops": "=="}], "context": "", "instance_idx": 257, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 156, "description": "Write a function to convert a tuple of string values to a tuple of integer values.", "code": "def tuple_int_str(tuple_str):\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result", "input_output_pairs": [{"input": "tuple_int_str((('333', '33'), ('1416', '55')))", "output": "((333, 33), (1416, 55))", "ops": "=="}, {"input": "tuple_int_str((('999', '99'), ('1000', '500')))", "output": "((999, 99), (1000, 500))", "ops": "=="}, {"input": "tuple_int_str((('666', '66'), ('1500', '555')))", "output": "((666, 66), (1500, 555))", "ops": "=="}], "context": "", "instance_idx": 258, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 287, "description": "Write a python function to find the sum of squares of first n even natural numbers.", "code": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)", "input_output_pairs": [{"input": "square_Sum(2)", "output": "20", "ops": "=="}, {"input": "square_Sum(3)", "output": "56", "ops": "=="}, {"input": "square_Sum(4)", "output": "120", "ops": "=="}], "context": "", "instance_idx": 259, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 96, "description": "Write a python function to find the number of divisors of a given integer.", "code": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "input_output_pairs": [{"input": "divisor(15)", "output": "4", "ops": "=="}, {"input": "divisor(12)", "output": "6", "ops": "=="}, {"input": "divisor(9)", "output": "3", "ops": "=="}], "context": "", "instance_idx": 260, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 399, "description": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "code": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)", "input_output_pairs": [{"input": "bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))", "output": "(15, 6, 5, 10)", "ops": "=="}, {"input": "bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4))", "output": "(13, 6, 3, 14)", "ops": "=="}, {"input": "bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6))", "output": "(11, 2, 13, 13)", "ops": "=="}], "context": "", "instance_idx": 261, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 22, "description": "Write a function to find the first duplicate element in a given array of integers.", "code": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n\n    for i in range(len(nums)):\n\n        if nums[i] in num_set:\n            return nums[i]\n        else:\n            num_set.add(nums[i])\n\n    return no_duplicate", "input_output_pairs": [{"input": "find_first_duplicate([1, 2, 3, 4, 4, 5])", "output": "4", "ops": "=="}, {"input": "find_first_duplicate([1, 2, 3, 4])", "output": "-1", "ops": "=="}, {"input": "find_first_duplicate([1, 1, 2, 3, 3, 2, 2])", "output": "1", "ops": "=="}], "context": "", "instance_idx": 262, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 375, "description": "Write a function to round the given number to the nearest multiple of a specific number.", "code": "def round_num(n,m):\n    a = (n //m) * m\n    b = a + m\n    return (b if n - a > b - n else a)", "input_output_pairs": [{"input": "round_num(4722, 10)", "output": "4720", "ops": "=="}, {"input": "round_num(1111, 5)", "output": "1110", "ops": "=="}, {"input": "round_num(219, 2)", "output": "218", "ops": "=="}], "context": "", "instance_idx": 263, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 411, "description": "Write a function to convert the given snake case string to camel case string by using regex.", "code": "def snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "input_output_pairs": [{"input": "snake_to_camel('android_tv')", "output": "'AndroidTv'", "ops": "=="}, {"input": "snake_to_camel('google_pixel')", "output": "'GooglePixel'", "ops": "=="}, {"input": "snake_to_camel('apple_watch')", "output": "'AppleWatch'", "ops": "=="}], "context": "import re", "instance_idx": 264, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 117, "description": "Write a function to convert all possible convertible elements in the list to float.", "code": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return (str(res))", "input_output_pairs": [{"input": "list_to_float([('3', '4'), ('1', '26.45'), ('7.32', '8'), ('4', '8')])", "output": "'[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'", "ops": "=="}, {"input": "list_to_float([('4', '4'), ('2', '27'), ('4.12', '9'), ('7', '11')])", "output": "'[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'", "ops": "=="}, {"input": "list_to_float([('6', '78'), ('5', '26.45'), ('1.33', '4'), ('82', '13')])", "output": "'[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'", "ops": "=="}], "context": "", "instance_idx": 265, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/152", "description": "I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match.\nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]", "code": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]", "input_output_pairs": [{"input": "compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])", "output": "[0, 0, 0, 0, 3, 3]", "ops": "=="}, {"input": "compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])", "output": "[0, 0, 0, 0, 0, 0]", "ops": "=="}, {"input": "compare([1, 2, 3], [-1, -2, -3])", "output": "[2, 4, 6]", "ops": "=="}, {"input": "compare([1, 2, 3, 5], [-1, 2, 3, 4])", "output": "[2, 0, 0, 1]", "ops": "=="}], "context": "", "instance_idx": 267, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 230, "description": "Write a function to replace blank spaces with any character in a string.", "code": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2", "input_output_pairs": [{"input": "replace_blank('hello people', '@')", "output": "'hello@people'", "ops": "=="}, {"input": "replace_blank('python program language', '$')", "output": "'python$program$language'", "ops": "=="}, {"input": "replace_blank('blank space', '-')", "output": "'blank-space'", "ops": "=="}], "context": "", "instance_idx": 268, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 46, "description": "Write a python function to determine whether all the numbers are different from each other are not.", "code": "def test_distinct(data):\n  if len(data) == len(set(data)):\n    return True\n  else:\n    return False;", "input_output_pairs": [{"input": "test_distinct([1, 5, 7, 9])", "output": "True", "ops": "=="}, {"input": "test_distinct([2, 4, 5, 5, 7, 9])", "output": "False", "ops": "=="}, {"input": "test_distinct([1, 2, 3])", "output": "True", "ops": "=="}], "context": "", "instance_idx": 269, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 144, "description": "Write a python function to find the sum of absolute differences in all pairs of the given array.", "code": "def sum_Pairs(arr,n): \n    sum = 0\n    for i in range(n - 1,-1,-1): \n        sum += i*arr[i] - (n-1-i) * arr[i] \n    return sum", "input_output_pairs": [{"input": "sum_Pairs([1, 8, 9, 15, 16], 5)", "output": "74", "ops": "=="}, {"input": "sum_Pairs([1, 2, 3, 4], 4)", "output": "10", "ops": "=="}, {"input": "sum_Pairs([1, 2, 3, 4, 5, 7, 9, 11, 14], 9)", "output": "188", "ops": "=="}], "context": "", "instance_idx": 270, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 339, "description": "Write a python function to find the maximum occuring divisor in an interval.", "code": "def find_Divisor(x,y):  \n    if (x==y): \n        return y \n    return 2", "input_output_pairs": [{"input": "find_Divisor(2, 2)", "output": "2", "ops": "=="}, {"input": "find_Divisor(2, 5)", "output": "2", "ops": "=="}, {"input": "find_Divisor(5, 10)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 271, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 185, "description": "Write a function to find the focus of a parabola.", "code": "def parabola_focus(a, b, c): \n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n  return focus", "input_output_pairs": [{"input": "parabola_focus(5, 3, 2)", "output": "(-0.3, 1.6)", "ops": "=="}, {"input": "parabola_focus(9, 8, 4)", "output": "(-0.4444444444444444, 2.25)", "ops": "=="}, {"input": "parabola_focus(2, 4, 6)", "output": "(-1.0, 4.125)", "ops": "=="}], "context": "", "instance_idx": 272, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 127, "description": "Write a function to multiply two integers without using the * operator in python.", "code": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)", "input_output_pairs": [{"input": "multiply_int(10, 20)", "output": "200", "ops": "=="}, {"input": "multiply_int(5, 10)", "output": "50", "ops": "=="}, {"input": "multiply_int(4, 8)", "output": "32", "ops": "=="}], "context": "", "instance_idx": 273, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 102, "description": "Write a function to convert snake case string to camel case string.", "code": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "input_output_pairs": [{"input": "snake_to_camel('python_program')", "output": "'PythonProgram'", "ops": "=="}, {"input": "snake_to_camel('python_language')", "output": "'PythonLanguage'", "ops": "=="}, {"input": "snake_to_camel('programming_language')", "output": "'ProgrammingLanguage'", "ops": "=="}], "context": "", "instance_idx": 274, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 158, "description": "Write a python function to find k number of operations required to make all elements equal.", "code": "def min_Ops(arr,n,k): \n    max1 = max(arr) \n    res = 0\n    for i in range(0,n):  \n        if ((max1 - arr[i]) % k != 0): \n            return -1 \n        else: \n            res += (max1 - arr[i]) / k \n    return int(res)", "input_output_pairs": [{"input": "min_Ops([2, 2, 2, 2], 4, 3)", "output": "0", "ops": "=="}, {"input": "min_Ops([4, 2, 6, 8], 4, 3)", "output": "-1", "ops": "=="}, {"input": "min_Ops([21, 33, 9, 45, 63], 5, 6)", "output": "24", "ops": "=="}], "context": "", "instance_idx": 275, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 300, "description": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "code": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res", "input_output_pairs": [{"input": "count_binary_seq(1)", "output": "2.0", "ops": "=="}, {"input": "count_binary_seq(2)", "output": "6.0", "ops": "=="}, {"input": "count_binary_seq(3)", "output": "20.0", "ops": "=="}], "context": "", "instance_idx": 276, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/36", "description": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3", "code": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans", "input_output_pairs": [{"input": "fizz_buzz(50)", "output": "0", "ops": "=="}, {"input": "fizz_buzz(78)", "output": "2", "ops": "=="}, {"input": "fizz_buzz(79)", "output": "3", "ops": "=="}, {"input": "fizz_buzz(100)", "output": "3", "ops": "=="}, {"input": "fizz_buzz(200)", "output": "6", "ops": "=="}, {"input": "fizz_buzz(4000)", "output": "192", "ops": "=="}, {"input": "fizz_buzz(10000)", "output": "639", "ops": "=="}, {"input": "fizz_buzz(100000)", "output": "8026", "ops": "=="}], "context": "", "instance_idx": 277, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/2", "description": "Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5", "code": "def truncate_number(number: float) -> float:\n    return number % 1.0", "input_output_pairs": [{"input": "truncate_number(3.5)", "output": "0.5", "ops": "=="}, {"input": "abs(truncate_number(1.33) - 0.33)", "output": "1e-06", "ops": "<"}, {"input": "abs(truncate_number(123.456) - 0.456)", "output": "1e-06", "ops": "<"}], "context": "", "instance_idx": 278, "test_negations": ["abs(truncate_number(1.33) - 0.33) 0.5", "abs(truncate_number(123.456) - 0.456) 0.5"], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 183, "description": "Write a function to count all the distinct pairs having a difference of k in any array.", "code": "def count_pairs(arr, n, k):\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n        count += 1\n  return count", "input_output_pairs": [{"input": "count_pairs([1, 5, 3, 4, 2], 5, 3)", "output": "2", "ops": "=="}, {"input": "count_pairs([8, 12, 16, 4, 0, 20], 6, 4)", "output": "5", "ops": "=="}, {"input": "count_pairs([2, 4, 1, 3, 4], 5, 2)", "output": "3", "ops": "=="}], "context": "", "instance_idx": 279, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 241, "description": "Write a function to generate a 3d array having each element as '*'.", "code": "def array_3d(m,n,o):\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n return array_3d", "input_output_pairs": [{"input": "array_3d(6, 4, 3)", "output": "[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*',\n    '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*',\n    '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*',\n    '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*',\n    '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], [\n    '*', '*', '*', '*', '*', '*']]]", "ops": "=="}, {"input": "array_3d(5, 3, 4)", "output": "[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*',\n    '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*',\n    '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'],\n    ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*',\n    '*', '*'], ['*', '*', '*', '*', '*']]]", "ops": "=="}, {"input": "array_3d(1, 2, 3)", "output": "[[['*'], ['*']], [['*'], ['*']], [['*'], ['*']]]", "ops": "=="}], "context": "", "instance_idx": 280, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 307, "description": "Write a function to get a colon of a tuple.", "code": "def colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon", "input_output_pairs": [{"input": "colon_tuplex(('HELLO', 5, [], True), 2, 50)", "output": "('HELLO', 5, [50], True)", "ops": "=="}, {"input": "colon_tuplex(('HELLO', 5, [], True), 2, 100)", "output": "('HELLO', 5, [100], True)", "ops": "=="}, {"input": "colon_tuplex(('HELLO', 5, [], True), 2, 500)", "output": "('HELLO', 5, [500], True)", "ops": "=="}], "context": "from copy import deepcopy", "instance_idx": 281, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/90", "description": "You are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None", "code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]", "input_output_pairs": [{"input": "next_smallest([1, 2, 3, 4, 5])", "output": "2", "ops": "=="}, {"input": "next_smallest([5, 1, 4, 3, 2])", "output": "2", "ops": "=="}, {"input": "next_smallest([])", "output": "None", "ops": "=="}, {"input": "next_smallest([1, 1])", "output": "None", "ops": "=="}, {"input": "next_smallest([1, 1, 1, 1, 0])", "output": "1", "ops": "=="}, {"input": "next_smallest([1, 0 ** 0])", "output": "None", "ops": "=="}, {"input": "next_smallest([-35, 34, 12, -45])", "output": "-35", "ops": "=="}], "context": "", "instance_idx": 282, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 129, "description": "Write a function to calculate magic square.", "code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "input_output_pairs": [{"input": "magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, \n    15, 4]])", "output": "True", "ops": "=="}, {"input": "magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])", "output": "True", "ops": "=="}, {"input": "magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])", "output": "False", "ops": "=="}], "context": "", "instance_idx": 283, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/55", "description": "Return n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21", "code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)", "input_output_pairs": [{"input": "fib(10)", "output": "55", "ops": "=="}, {"input": "fib(1)", "output": "1", "ops": "=="}, {"input": "fib(8)", "output": "21", "ops": "=="}, {"input": "fib(11)", "output": "89", "ops": "=="}, {"input": "fib(12)", "output": "144", "ops": "=="}], "context": "", "instance_idx": 284, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 234, "description": "Write a function to find the volume of a cube.", "code": "def volume_cube(l):\n  volume = l * l * l\n  return volume", "input_output_pairs": [{"input": "volume_cube(3)", "output": "27", "ops": "=="}, {"input": "volume_cube(2)", "output": "8", "ops": "=="}, {"input": "volume_cube(5)", "output": "125", "ops": "=="}], "context": "", "instance_idx": 285, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 299, "description": "Write a function to calculate the maximum aggregate from the list of tuples.", "code": "def max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])", "input_output_pairs": [{"input": "max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols',\n    7), ('Juan Whelan', 122), ('Sabah Colley', 84)])", "output": "('Juan Whelan', 212)", "ops": "=="}, {"input": "max_aggregate([('Juan Whelan', 50), ('Sabah Colley', 48), ('Peter Nichols',\n    37), ('Juan Whelan', 22), ('Sabah Colley', 14)])", "output": "('Juan Whelan', 72)", "ops": "=="}, {"input": "max_aggregate([('Juan Whelan', 10), ('Sabah Colley', 20), ('Peter Nichols',\n    30), ('Juan Whelan', 40), ('Sabah Colley', 50)])", "output": "('Sabah Colley', 70)", "ops": "=="}], "context": "from collections import defaultdict", "instance_idx": 286, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 335, "description": "Write a function to find the sum of arithmetic progression.", "code": "def ap_sum(a,n,d):\n  total = (n * (2 * a + (n - 1) * d)) / 2\n  return total", "input_output_pairs": [{"input": "ap_sum(1, 5, 2)", "output": "25", "ops": "=="}, {"input": "ap_sum(2, 6, 4)", "output": "72", "ops": "=="}, {"input": "ap_sum(1, 4, 5)", "output": "34", "ops": "=="}], "context": "", "instance_idx": 287, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 33, "description": "Write a python function to convert a decimal number to binary number.", "code": "def decimal_To_Binary(N): \n    B_Number = 0\n    cnt = 0\n    while (N != 0): \n        rem = N % 2\n        c = pow(10,cnt)  \n        B_Number += rem*c  \n        N //= 2 \n        cnt += 1\n    return B_Number", "input_output_pairs": [{"input": "decimal_To_Binary(10)", "output": "1010", "ops": "=="}, {"input": "decimal_To_Binary(1)", "output": "1", "ops": "=="}, {"input": "decimal_To_Binary(20)", "output": "10100", "ops": "=="}], "context": "", "instance_idx": 288, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/51", "description": "remove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels('')\n''\n>>> remove_vowels(\"abcdef\\nghijklm\")\n'bcdf\\nghjklm'\n>>> remove_vowels('abcdef')\n'bcdf'\n>>> remove_vowels('aaaaa')\n''\n>>> remove_vowels('aaBAA')\n'B'\n>>> remove_vowels('zbcd')\n'zbcd'", "code": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "input_output_pairs": [{"input": "remove_vowels('')", "output": "''", "ops": "=="}, {"input": "remove_vowels('abcdef\\nghijklm')", "output": "'bcdf\nghjklm'", "ops": "=="}, {"input": "remove_vowels('fedcba')", "output": "'fdcb'", "ops": "=="}, {"input": "remove_vowels('eeeee')", "output": "''", "ops": "=="}, {"input": "remove_vowels('acBAA')", "output": "'cB'", "ops": "=="}, {"input": "remove_vowels('EcBOO')", "output": "'cB'", "ops": "=="}, {"input": "remove_vowels('ybcd')", "output": "'ybcd'", "ops": "=="}], "context": "", "instance_idx": 289, "test_negations": [], "exclude_tests": ["remove_vowels('') 'bcdf\nghjklm'", "remove_vowels('abcdef\\nghijklm') 'bcdf\nghjklm'", "remove_vowels('fedcba') 'bcdf\nghjklm'", "remove_vowels('eeeee') 'bcdf\nghjklm'", "remove_vowels('acBAA') 'bcdf\nghjklm'", "remove_vowels('EcBOO') 'bcdf\nghjklm'", "remove_vowels('ybcd') 'bcdf\nghjklm'"]}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 161, "description": "Write a function to remove all elements from a given list present in another list.", "code": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result", "input_output_pairs": [{"input": "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])", "output": "[1, 3, 5, 7, 9, 10]", "ops": "=="}, {"input": "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])", "output": "[2, 4, 6, 8, 9, 10]", "ops": "=="}, {"input": "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])", "output": "[1, 2, 3, 4, 6, 8, 9, 10]", "ops": "=="}], "context": "", "instance_idx": 290, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 201, "description": "Write a python function to check whether the elements in a list are same or not.", "code": "def chkList(lst): \n    return len(set(lst)) == 1", "input_output_pairs": [{"input": "chkList(['one', 'one', 'one'])", "output": "True", "ops": "=="}, {"input": "chkList(['one', 'Two', 'Three'])", "output": "False", "ops": "=="}, {"input": "chkList(['bigdata', 'python', 'Django'])", "output": "False", "ops": "=="}], "context": "", "instance_idx": 291, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 405, "description": "Write a function to check whether an element exists within a tuple.", "code": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "input_output_pairs": [{"input": "check_tuplex(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 'r')", "output": "True", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), '5')", "output": "False", "ops": "=="}, {"input": "check_tuplex(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 3)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 292, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/110", "description": "In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.", "code": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"", "input_output_pairs": [{"input": "exchange([1, 2, 3, 4], [1, 2, 3, 4])", "output": "'YES'", "ops": "=="}, {"input": "exchange([1, 2, 3, 4], [1, 5, 3, 4])", "output": "'NO'", "ops": "=="}, {"input": "exchange([1, 2, 3, 4], [2, 1, 4, 3])", "output": "'YES'", "ops": "=="}, {"input": "exchange([5, 7, 3], [2, 6, 4])", "output": "'YES'", "ops": "=="}, {"input": "exchange([5, 7, 3], [2, 6, 3])", "output": "'NO'", "ops": "=="}, {"input": "exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])", "output": "'NO'", "ops": "=="}, {"input": "exchange([100, 200], [200, 200])", "output": "'YES'", "ops": "=="}], "context": "", "instance_idx": 293, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 328, "description": "Write a function to rotate a given list by specified number of items to the left direction.", "code": "def rotate_left(list1,m,n):\n  result =  list1[m:]+list1[:n]\n  return result", "input_output_pairs": [{"input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)", "output": "[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]", "ops": "=="}, {"input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)", "output": "[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]", "ops": "=="}, {"input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)", "output": "[6, 7, 8, 9, 10, 1, 2]", "ops": "=="}], "context": "", "instance_idx": 294, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/64", "description": "Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\n\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3", "code": "def vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels", "input_output_pairs": [{"input": "vowels_count('abcde')", "output": "2", "ops": "=="}, {"input": "vowels_count('Alone')", "output": "3", "ops": "=="}, {"input": "vowels_count('key')", "output": "2", "ops": "=="}, {"input": "vowels_count('bye')", "output": "1", "ops": "=="}, {"input": "vowels_count('keY')", "output": "2", "ops": "=="}, {"input": "vowels_count('bYe')", "output": "1", "ops": "=="}, {"input": "vowels_count('ACEDY')", "output": "3", "ops": "=="}], "context": "", "instance_idx": 295, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 14, "description": "Write a python function to find the volume of a triangular prism.", "code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2)", "input_output_pairs": [{"input": "find_Volume(10, 8, 6)", "output": "240", "ops": "=="}, {"input": "find_Volume(3, 2, 2)", "output": "6", "ops": "=="}, {"input": "find_Volume(1, 2, 1)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 296, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 321, "description": "Write a function to find the demlo number for the given number.", "code": "def find_demlo(s): \n\tl = len(s) \n\tres = \"\" \n\tfor i in range(1,l+1): \n\t\tres = res + str(i) \n\tfor i in range(l-1,0,-1): \n\t\tres = res + str(i) \n\treturn res", "input_output_pairs": [{"input": "find_demlo('111111')", "output": "'12345654321'", "ops": "=="}, {"input": "find_demlo('1111')", "output": "'1234321'", "ops": "=="}, {"input": "find_demlo('13333122222')", "output": "'123456789101110987654321'", "ops": "=="}], "context": "", "instance_idx": 297, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 163, "description": "Write a function to calculate the area of a regular polygon.", "code": "def area_polygon(s,l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area", "input_output_pairs": [{"input": "area_polygon(4, 20)", "output": "400.00000000000006", "ops": "=="}, {"input": "area_polygon(10, 15)", "output": "1731.1969896610804", "ops": "=="}, {"input": "area_polygon(9, 7)", "output": "302.90938549487214", "ops": "=="}], "context": "from math import tan, pi", "instance_idx": 298, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 107, "description": "Write a python function to count hexadecimal numbers for a given range.", "code": "def count_Hexadecimal(L,R) :  \n    count = 0;  \n    for i in range(L,R + 1) : \n        if (i >= 10 and i <= 15) : \n            count += 1;  \n        elif (i > 15) : \n            k = i;  \n            while (k != 0) :  \n                if (k % 16 >= 10) : \n                    count += 1;  \n                k = k // 16;  \n    return count;", "input_output_pairs": [{"input": "count_Hexadecimal(10, 15)", "output": "6", "ops": "=="}, {"input": "count_Hexadecimal(2, 4)", "output": "0", "ops": "=="}, {"input": "count_Hexadecimal(15, 16)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 299, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 52, "description": "Write a function to caluclate area of a parallelogram.", "code": "def parallelogram_area(b,h):\n  area=b*h\n  return area", "input_output_pairs": [{"input": "parallelogram_area(10, 20)", "output": "200", "ops": "=="}, {"input": "parallelogram_area(15, 20)", "output": "300", "ops": "=="}, {"input": "parallelogram_area(8, 9)", "output": "72", "ops": "=="}], "context": "", "instance_idx": 300, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 162, "description": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "code": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)", "input_output_pairs": [{"input": "sum_series(6)", "output": "12", "ops": "=="}, {"input": "sum_series(10)", "output": "30", "ops": "=="}, {"input": "sum_series(9)", "output": "25", "ops": "=="}], "context": "", "instance_idx": 301, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 245, "description": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "code": "def max_sum(arr, n): \n\tMSIBS = arr[:] \n\tfor i in range(n): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, n + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum", "input_output_pairs": [{"input": "max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)", "output": "194", "ops": "=="}, {"input": "max_sum([80, 60, 30, 40, 20, 10], 6)", "output": "210", "ops": "=="}, {"input": "max_sum([2, 3, 14, 16, 21, 23, 29, 30], 8)", "output": "138", "ops": "=="}], "context": "", "instance_idx": 302, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 442, "description": "Write a function to find the ration of positive numbers in an array of integers.", "code": "def positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "input_output_pairs": [{"input": "positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])", "output": "0.54", "ops": "=="}, {"input": "positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])", "output": "0.69", "ops": "=="}, {"input": "positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])", "output": "0.56", "ops": "=="}], "context": "from array import array", "instance_idx": 303, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 342, "description": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "code": "class Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n    def __lt__(self, other):\n        return self.value < other.value\ndef find_minimum_range(list):\n    high = float('-inf')\n    p = (0, float('inf'))\n    pq = []\n    for i in range(len(list)):\n        heappush(pq, Node(list[i][0], i, 0))\n        high = max(high, list[i][0])\n    while True:\n        top = heappop(pq)\n        low = top.value\n        i = top.list_num\n        j = top.index\n        if high - low < p[1] - p[0]:\n            p = (low, high)\n        if j == len(list[i]) - 1:\n            return p\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\n        high = max(high, list[i][j + 1])", "input_output_pairs": [{"input": "find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])", "output": "(4, 6)", "ops": "=="}, {"input": "find_minimum_range([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]])", "output": "(4, 7)", "ops": "=="}, {"input": "find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])", "output": "(5, 7)", "ops": "=="}], "context": "from heapq import heappop, heappush", "instance_idx": 304, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 151, "description": "Write a python function to check whether the given number is co-prime or not.", "code": "def gcd(p,q):\n    while q != 0:\n        p, q = q,p%q\n    return p\ndef is_coprime(x,y):\n    return gcd(x,y) == 1", "input_output_pairs": [{"input": "is_coprime(17, 13)", "output": "True", "ops": "=="}, {"input": "is_coprime(15, 21)", "output": "False", "ops": "=="}, {"input": "is_coprime(25, 45)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 305, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 278, "description": "Write a function to find the element count that occurs before the record in the given tuple.", "code": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count)", "input_output_pairs": [{"input": "count_first_elements((1, 5, 7, (4, 6), 10))", "output": "3", "ops": "=="}, {"input": "count_first_elements((2, 9, (5, 7), 11))", "output": "2", "ops": "=="}, {"input": "count_first_elements((11, 15, 5, 8, (2, 3), 8))", "output": "4", "ops": "=="}], "context": "", "instance_idx": 306, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 345, "description": "Write a function to find the difference between two consecutive numbers in a given list.", "code": "def diff_consecutivenums(nums):\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "input_output_pairs": [{"input": "diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])", "output": "[0, 2, 1, 0, 1, 1, 1]", "ops": "=="}, {"input": "diff_consecutivenums([4, 5, 8, 9, 6, 10])", "output": "[1, 3, 1, -3, 4]", "ops": "=="}, {"input": "diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])", "output": "[1, 1, 1, 1, 0, 0, 0, 1, 2]", "ops": "=="}], "context": "", "instance_idx": 307, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 223, "description": "Write a function to check for majority element in the given sorted array.", "code": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1", "input_output_pairs": [{"input": "is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)", "output": "True", "ops": "=="}, {"input": "is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)", "output": "False", "ops": "=="}, {"input": "is_majority([1, 1, 1, 2, 2], 5, 1)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 308, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 53, "description": "Write a python function to check whether the first and last characters of a given string are equal or not.", "code": "def check_Equality(str):\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n  else:  \n    return (\"Not Equal\")", "input_output_pairs": [{"input": "check_Equality('abcda')", "output": "'Equal'", "ops": "=="}, {"input": "check_Equality('ab')", "output": "'Not Equal'", "ops": "=="}, {"input": "check_Equality('mad')", "output": "'Not Equal'", "ops": "=="}], "context": "", "instance_idx": 309, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 445, "description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "code": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "input_output_pairs": [{"input": "index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1,\n    1), (7, 3)))", "output": "((6, 21), (12, 45), (2, 9), (7, 30))", "ops": "=="}, {"input": "index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10),\n    (2, 2), (8, 4)))", "output": "((14, 32), (20, 60), (6, 20), (16, 44))", "ops": "=="}, {"input": "index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11),\n    (3, 3), (9, 5)))", "output": "((24, 45), (30, 77), (12, 33), (27, 60))", "ops": "=="}], "context": "", "instance_idx": 310, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/114", "description": "Given an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2, -3]) == -6", "code": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum", "input_output_pairs": [{"input": "minSubArraySum([2, 3, 4, 1, 2, 4])", "output": "1", "ops": "=="}, {"input": "minSubArraySum([-1, -2, -3])", "output": "-6", "ops": "=="}, {"input": "minSubArraySum([-1, -2, -3, 2, -10])", "output": "-14", "ops": "=="}, {"input": "minSubArraySum([-9999999999999999])", "output": "-9999999999999999", "ops": "=="}, {"input": "minSubArraySum([0, 10, 20, 1000000])", "output": "0", "ops": "=="}, {"input": "minSubArraySum([-1, -2, -3, 10, -5])", "output": "-6", "ops": "=="}, {"input": "minSubArraySum([100, -1, -2, -3, 10, -5])", "output": "-6", "ops": "=="}, {"input": "minSubArraySum([10, 11, 13, 8, 3, 4])", "output": "3", "ops": "=="}, {"input": "minSubArraySum([100, -33, 32, -1, 0, -2])", "output": "-33", "ops": "=="}, {"input": "minSubArraySum([-10])", "output": "-10", "ops": "=="}, {"input": "minSubArraySum([7])", "output": "7", "ops": "=="}, {"input": "minSubArraySum([1, -1])", "output": "-1", "ops": "=="}], "context": "", "instance_idx": 311, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/96", "description": "Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]", "code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes", "input_output_pairs": [{"input": "count_up_to(5)", "output": "[2, 3]", "ops": "=="}, {"input": "count_up_to(6)", "output": "[2, 3, 5]", "ops": "=="}, {"input": "count_up_to(7)", "output": "[2, 3, 5]", "ops": "=="}, {"input": "count_up_to(10)", "output": "[2, 3, 5, 7]", "ops": "=="}, {"input": "count_up_to(0)", "output": "[]", "ops": "=="}, {"input": "count_up_to(22)", "output": "[2, 3, 5, 7, 11, 13, 17, 19]", "ops": "=="}, {"input": "count_up_to(1)", "output": "[]", "ops": "=="}, {"input": "count_up_to(18)", "output": "[2, 3, 5, 7, 11, 13, 17]", "ops": "=="}, {"input": "count_up_to(47)", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]", "ops": "=="}, {"input": "count_up_to(101)", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\n    73, 79, 83, 89, 97]", "ops": "=="}], "context": "", "instance_idx": 312, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 472, "description": "Write a python function to check whether the given list contains consecutive numbers or not.", "code": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1))", "input_output_pairs": [{"input": "check_Consecutive([1, 2, 3, 4, 5])", "output": "True", "ops": "=="}, {"input": "check_Consecutive([1, 2, 3, 5, 6])", "output": "False", "ops": "=="}, {"input": "check_Consecutive([1, 2, 1])", "output": "False", "ops": "=="}], "context": "", "instance_idx": 313, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 60, "description": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "code": "def max_len_sub( arr, n): \n\tmls=[] \n\tmax = 0\n\tfor i in range(n): \n\t\tmls.append(1) \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \n\t\t\t\tmls[i] = mls[j] + 1\n\tfor i in range(n): \n\t\tif (max < mls[i]): \n\t\t\tmax = mls[i] \n\treturn max", "input_output_pairs": [{"input": "max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8)", "output": "5", "ops": "=="}, {"input": "max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7)", "output": "4", "ops": "=="}, {"input": "max_len_sub([9, 11, 13, 15, 18], 5)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 314, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 485, "description": "Write a function to find the largest palindromic number in the given array.", "code": "def is_palindrome(n) : \n\tdivisor = 1\n\twhile (n / divisor >= 10) : \n\t\tdivisor *= 10\n\twhile (n != 0) : \n\t\tleading = n // divisor \n\t\ttrailing = n % 10\n\t\tif (leading != trailing) : \n\t\t\treturn False\n\t\tn = (n % divisor) // 10\n\t\tdivisor = divisor // 100\n\treturn True\ndef largest_palindrome(A, n) : \n\tA.sort() \n\tfor i in range(n - 1, -1, -1) : \n\t\tif (is_palindrome(A[i])) : \n\t\t\treturn A[i] \n\treturn -1", "input_output_pairs": [{"input": "largest_palindrome([1, 232, 54545, 999991], 4)", "output": "54545", "ops": "=="}, {"input": "largest_palindrome([1, 2, 3, 4, 5, 50], 6)", "output": "5", "ops": "=="}, {"input": "largest_palindrome([1, 3, 7, 9, 45], 5)", "output": "9", "ops": "=="}], "context": "", "instance_idx": 315, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/5", "description": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]", "code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result", "input_output_pairs": [{"input": "intersperse([], 7)", "output": "[]", "ops": "=="}, {"input": "intersperse([5, 6, 3, 2], 8)", "output": "[5, 8, 6, 8, 3, 8, 2]", "ops": "=="}, {"input": "intersperse([2, 2, 2], 2)", "output": "[2, 2, 2, 2, 2]", "ops": "=="}], "context": "from typing import List", "instance_idx": 316, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 392, "description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "code": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]", "input_output_pairs": [{"input": "get_max_sum(60)", "output": "106", "ops": "=="}, {"input": "get_max_sum(10)", "output": "12", "ops": "=="}, {"input": "get_max_sum(2)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 317, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 123, "description": "Write a function to sum all amicable numbers from 1 to a specified number.", "code": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)", "input_output_pairs": [{"input": "amicable_numbers_sum(999)", "output": "504", "ops": "=="}, {"input": "amicable_numbers_sum(9999)", "output": "31626", "ops": "=="}, {"input": "amicable_numbers_sum(99)", "output": "0", "ops": "=="}], "context": "", "instance_idx": 318, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/3", "description": "You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue", "code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False", "input_output_pairs": [{"input": "below_zero([])", "output": "False", "ops": "=="}, {"input": "below_zero([1, 2, -3, 1, 2, -3])", "output": "False", "ops": "=="}, {"input": "below_zero([1, 2, -4, 5, 6])", "output": "True", "ops": "=="}, {"input": "below_zero([1, -1, 2, -2, 5, -5, 4, -4])", "output": "False", "ops": "=="}, {"input": "below_zero([1, -1, 2, -2, 5, -5, 4, -5])", "output": "True", "ops": "=="}, {"input": "below_zero([1, -2, 2, -2, 5, -5, 4, -4])", "output": "True", "ops": "=="}], "context": "from typing import List", "instance_idx": 319, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/45", "description": "Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5", "code": "def triangle_area(a, h):\n    return a * h / 2.0", "input_output_pairs": [{"input": "triangle_area(5, 3)", "output": "7.5", "ops": "=="}, {"input": "triangle_area(2, 2)", "output": "2.0", "ops": "=="}, {"input": "triangle_area(10, 8)", "output": "40.0", "ops": "=="}], "context": "", "instance_idx": 320, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 469, "description": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "code": "def max_profit(price, k):\n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n                max_so_far = 0\n                for x in range(j):\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\n                    if max_so_far < curr_price:\n                        max_so_far = curr_price\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\n    return final_profit[k][n-1]", "input_output_pairs": [{"input": "max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)", "output": "10", "ops": "=="}, {"input": "max_profit([2, 4, 7, 5, 4, 3, 5], 2)", "output": "7", "ops": "=="}, {"input": "max_profit([10, 6, 8, 4, 2], 2)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 321, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 212, "description": "Write a python function to find the sum of fourth power of n natural numbers.", "code": "def fourth_Power_Sum(n): \n    sum = 0\n    for i in range(1,n+1) : \n        sum = sum + (i*i*i*i) \n    return sum", "input_output_pairs": [{"input": "fourth_Power_Sum(2)", "output": "17", "ops": "=="}, {"input": "fourth_Power_Sum(4)", "output": "354", "ops": "=="}, {"input": "fourth_Power_Sum(6)", "output": "2275", "ops": "=="}], "context": "import math", "instance_idx": 322, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 47, "description": "Write a python function to find the last digit when factorial of a divides factorial of b.", "code": "def compute_Last_Digit(A,B): \n    variable = 1\n    if (A == B): \n        return 1\n    elif ((B - A) >= 5):  \n        return 0\n    else:   \n        for i in range(A + 1,B + 1): \n            variable = (variable * (i % 10)) % 10\n        return variable % 10", "input_output_pairs": [{"input": "compute_Last_Digit(2, 4)", "output": "2", "ops": "=="}, {"input": "compute_Last_Digit(6, 8)", "output": "6", "ops": "=="}, {"input": "compute_Last_Digit(1, 2)", "output": "2", "ops": "=="}, {"input": "compute_Last_Digit(3, 7)", "output": "0", "ops": "=="}, {"input": "compute_Last_Digit(20, 23)", "output": "6", "ops": "=="}, {"input": "compute_Last_Digit(1021, 1024)", "output": "4", "ops": "=="}], "context": "", "instance_idx": 323, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 8, "description": "Write a function to find squares of individual elements in a list using lambda function.", "code": "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums", "input_output_pairs": [{"input": "square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "ops": "=="}, {"input": "square_nums([10, 20, 30])", "output": "[100, 400, 900]", "ops": "=="}, {"input": "square_nums([12, 15])", "output": "[144, 225]", "ops": "=="}], "context": "", "instance_idx": 324, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 347, "description": "Write a python function to count the number of squares in a rectangle.", "code": "def count_Squares(m,n): \n    if (n < m): \n        temp = m \n        m = n \n        n = temp \n    return n * (n + 1) * (3 * m - n + 1) // 6", "input_output_pairs": [{"input": "count_Squares(4, 3)", "output": "20", "ops": "=="}, {"input": "count_Squares(1, 2)", "output": "2", "ops": "=="}, {"input": "count_Squares(2, 2)", "output": "5", "ops": "=="}], "context": "", "instance_idx": 325, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 7, "description": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "code": "def find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "input_output_pairs": [{"input": "find_char_long('Please move back to stream')", "output": "['Please', 'move', 'back', 'stream']", "ops": "=="}, {"input": "find_char_long('Jing Eco and Tech')", "output": "['Jing', 'Tech']", "ops": "=="}, {"input": "find_char_long('Jhingai wulu road Zone 3')", "output": "['Jhingai', 'wulu', 'road', 'Zone']", "ops": "=="}], "context": "import re", "instance_idx": 326, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 336, "description": "Write a function to check whether the given month name contains 28 days or not.", "code": "def check_monthnum(monthname1):\n  if monthname1 == \"February\":\n    return True\n  else:\n    return False", "input_output_pairs": [{"input": "check_monthnum('February')", "output": "True", "ops": "=="}, {"input": "check_monthnum('January')", "output": "False", "ops": "=="}, {"input": "check_monthnum('March')", "output": "False", "ops": "=="}], "context": "", "instance_idx": 327, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 24, "description": "Write a function to convert the given binary number to its decimal equivalent.", "code": "def binary_to_decimal(binary): \n    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return (decimal)", "input_output_pairs": [{"input": "binary_to_decimal(100)", "output": "4", "ops": "=="}, {"input": "binary_to_decimal(1011)", "output": "11", "ops": "=="}, {"input": "binary_to_decimal(1101101)", "output": "109", "ops": "=="}], "context": "", "instance_idx": 328, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/85", "description": "Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\nadd([4, 2, 6, 7]) ==> 2", "code": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])", "input_output_pairs": [{"input": "add([4, 88])", "output": "88", "ops": "=="}, {"input": "add([4, 5, 6, 7, 2, 122])", "output": "122", "ops": "=="}, {"input": "add([4, 0, 6, 7])", "output": "0", "ops": "=="}, {"input": "add([4, 4, 6, 8])", "output": "12", "ops": "=="}], "context": "", "instance_idx": 329, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 142, "description": "Write a function to count the same pair in three given lists.", "code": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result", "input_output_pairs": [{"input": "count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3,\n    1, 2, 6, 7, 9])", "output": "3", "ops": "=="}, {"input": "count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3,\n    1, 2, 6, 7, 8])", "output": "4", "ops": "=="}, {"input": "count_samepair([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3,\n    1, 2, 6, 7, 8])", "output": "5", "ops": "=="}], "context": "", "instance_idx": 330, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/144", "description": "Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False", "code": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False", "input_output_pairs": [{"input": "simplify('1/5', '5/1')", "output": "True", "ops": "=="}, {"input": "simplify('1/6', '2/1')", "output": "False", "ops": "=="}, {"input": "simplify('5/1', '3/1')", "output": "True", "ops": "=="}, {"input": "simplify('7/10', '10/2')", "output": "False", "ops": "=="}, {"input": "simplify('2/10', '50/10')", "output": "True", "ops": "=="}, {"input": "simplify('7/2', '4/2')", "output": "True", "ops": "=="}, {"input": "simplify('11/6', '6/1')", "output": "True", "ops": "=="}, {"input": "simplify('2/3', '5/2')", "output": "False", "ops": "=="}, {"input": "simplify('5/2', '3/5')", "output": "False", "ops": "=="}, {"input": "simplify('2/4', '8/4')", "output": "True", "ops": "=="}, {"input": "simplify('2/4', '4/2')", "output": "True", "ops": "=="}, {"input": "simplify('1/5', '5/1')", "output": "True", "ops": "=="}, {"input": "simplify('1/5', '1/5')", "output": "False", "ops": "=="}], "context": "", "instance_idx": 331, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/83", "description": "Given a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.", "code": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))", "input_output_pairs": [{"input": "starts_one_ends(1)", "output": "1", "ops": "=="}, {"input": "starts_one_ends(2)", "output": "18", "ops": "=="}, {"input": "starts_one_ends(3)", "output": "180", "ops": "=="}, {"input": "starts_one_ends(4)", "output": "1800", "ops": "=="}, {"input": "starts_one_ends(5)", "output": "18000", "ops": "=="}], "context": "", "instance_idx": 332, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 386, "description": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "code": "def swap_count(s):\n\tchars = s\n\tcount_left = 0\n\tcount_right = 0\n\tswap = 0\n\timbalance = 0; \n\tfor i in range(len(chars)):\n\t\tif chars[i] == '[':\n\t\t\tcount_left += 1\n\t\t\tif imbalance > 0:\n\t\t\t\tswap += imbalance\n\t\t\t\timbalance -= 1\n\t\telif chars[i] == ']':\n\t\t\tcount_right += 1\n\t\t\timbalance = (count_right - count_left) \n\treturn swap", "input_output_pairs": [{"input": "swap_count('[]][][')", "output": "2", "ops": "=="}, {"input": "swap_count('[[][]]')", "output": "0", "ops": "=="}, {"input": "swap_count('[[][]]][')", "output": "1", "ops": "=="}], "context": "", "instance_idx": 333, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 398, "description": "Write a function to compute the sum of digits of each number of a given list.", "code": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "input_output_pairs": [{"input": "sum_of_digits([10, 2, 56])", "output": "14", "ops": "=="}, {"input": "sum_of_digits([[10, 20, 4, 5, 'b', 70, 'a']])", "output": "19", "ops": "=="}, {"input": "sum_of_digits([10, 20, -4, 5, -70])", "output": "19", "ops": "=="}], "context": "", "instance_idx": 334, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 410, "description": "Write a function to find the minimum value in a given heterogeneous list.", "code": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "input_output_pairs": [{"input": "min_val(['Python', 3, 2, 4, 5, 'version'])", "output": "2", "ops": "=="}, {"input": "min_val(['Python', 15, 20, 25])", "output": "15", "ops": "=="}, {"input": "min_val(['Python', 30, 20, 40, 50, 'version'])", "output": "20", "ops": "=="}], "context": "", "instance_idx": 335, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 187, "description": "Write a function to find the longest common subsequence for the given two sequences.", "code": "def longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n    else: \n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "input_output_pairs": [{"input": "longest_common_subsequence('AGGTAB', 'GXTXAYB', 6, 7)", "output": "4", "ops": "=="}, {"input": "longest_common_subsequence('ABCDGH', 'AEDFHR', 6, 6)", "output": "3", "ops": "=="}, {"input": "longest_common_subsequence('AXYT', 'AYZX', 4, 4)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 336, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/63", "description": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24", "code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)", "input_output_pairs": [{"input": "fibfib(2)", "output": "1", "ops": "=="}, {"input": "fibfib(1)", "output": "0", "ops": "=="}, {"input": "fibfib(5)", "output": "4", "ops": "=="}, {"input": "fibfib(8)", "output": "24", "ops": "=="}, {"input": "fibfib(10)", "output": "81", "ops": "=="}, {"input": "fibfib(12)", "output": "274", "ops": "=="}, {"input": "fibfib(14)", "output": "927", "ops": "=="}], "context": "", "instance_idx": 337, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 42, "description": "Write a python function to find the sum of repeated elements in a given array.", "code": "def find_Sum(arr,n): \n    return sum([x for x in arr if arr.count(x) > 1])", "input_output_pairs": [{"input": "find_Sum([1, 2, 3, 1, 1, 4, 5, 6], 8)", "output": "3", "ops": "=="}, {"input": "find_Sum([1, 2, 3, 1, 1], 5)", "output": "3", "ops": "=="}, {"input": "find_Sum([1, 1, 2], 3)", "output": "2", "ops": "=="}, {"input": "find_Sum([1, 1, 2, 3, 4, 5, 6, 3, 5], 9)", "output": "18", "ops": "=="}], "context": "", "instance_idx": 338, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 443, "description": "Write a python function to find the largest negative number from the given list.", "code": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max", "input_output_pairs": [{"input": "largest_neg([1, 2, 3, -4, -6])", "output": "-6", "ops": "=="}, {"input": "largest_neg([1, 2, 3, -8, -9])", "output": "-9", "ops": "=="}, {"input": "largest_neg([1, 2, 3, 4, -1])", "output": "-1", "ops": "=="}], "context": "", "instance_idx": 339, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/66", "description": "Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\ndigitSum(\"\") => 0\ndigitSum(\"abAB\") => 131\ndigitSum(\"abcCd\") => 67\ndigitSum(\"helloE\") => 69\ndigitSum(\"woArBld\") => 131\ndigitSum(\"aAaaaXa\") => 153", "code": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)", "input_output_pairs": [{"input": "digitSum('')", "output": "0", "ops": "=="}, {"input": "digitSum('abAB')", "output": "131", "ops": "=="}, {"input": "digitSum('abcCd')", "output": "67", "ops": "=="}, {"input": "digitSum('helloE')", "output": "69", "ops": "=="}, {"input": "digitSum('woArBld')", "output": "131", "ops": "=="}, {"input": "digitSum('aAaaaXa')", "output": "153", "ops": "=="}, {"input": "digitSum(' How are yOu?')", "output": "151", "ops": "=="}, {"input": "digitSum('You arE Very Smart')", "output": "327", "ops": "=="}], "context": "", "instance_idx": 340, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 282, "description": "Write a function to substaract two lists using map and lambda function.", "code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "input_output_pairs": [{"input": "sub_list([1, 2, 3], [4, 5, 6])", "output": "[-3, -3, -3]", "ops": "=="}, {"input": "sub_list([1, 2], [3, 4])", "output": "[-2, -2]", "ops": "=="}, {"input": "sub_list([90, 120], [50, 70])", "output": "[40, 50]", "ops": "=="}], "context": "", "instance_idx": 341, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 293, "description": "Write a function to find the third side of a right angled triangle.", "code": "def otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s", "input_output_pairs": [{"input": "otherside_rightangle(7, 8)", "output": "10.63014581273465", "ops": "=="}, {"input": "otherside_rightangle(3, 4)", "output": "5", "ops": "=="}, {"input": "otherside_rightangle(7, 15)", "output": "16.55294535724685", "ops": "=="}], "context": "import math", "instance_idx": 342, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 454, "description": "Write a function that matches a word containing 'z'.", "code": "def text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "input_output_pairs": [{"input": "text_match_wordz('pythonz.')", "output": "'Found a match!'", "ops": "=="}, {"input": "text_match_wordz('xyz.')", "output": "'Found a match!'", "ops": "=="}, {"input": "text_match_wordz('  lang  .')", "output": "'Not matched!'", "ops": "=="}], "context": "import re", "instance_idx": 343, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 430, "description": "Write a function to find the directrix of a parabola.", "code": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix", "input_output_pairs": [{"input": "parabola_directrix(5, 3, 2)", "output": "-198", "ops": "=="}, {"input": "parabola_directrix(9, 8, 4)", "output": "-2336", "ops": "=="}, {"input": "parabola_directrix(2, 4, 6)", "output": "-130", "ops": "=="}], "context": "", "instance_idx": 344, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 301, "description": "Write a function to find the depth of a dictionary.", "code": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0", "input_output_pairs": [{"input": "dict_depth({'a': 1, 'b': {'c': {'d': {}}}})", "output": "4", "ops": "=="}, {"input": "dict_depth({'a': 1, 'b': {'c': 'python'}})", "output": "2", "ops": "=="}, {"input": "dict_depth({(1): 'Sun', (2): {(3): {(4): 'Mon'}}})", "output": "3", "ops": "=="}], "context": "", "instance_idx": 345, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 315, "description": "Write a python function to find the first maximum length of even word.", "code": "def find_Max_Len_Even(str): \n    n = len(str) \n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while (i < n): \n        if (str[i] == ' '): \n            if (currlen % 2 == 0): \n                if (maxlen < currlen): \n                    maxlen = currlen \n                    st = i - currlen \n            currlen = 0 \n        else : \n            currlen += 1\n        i += 1\n    if (currlen % 2 == 0): \n        if (maxlen < currlen): \n            maxlen = currlen \n            st = i - currlen \n    if (st == -1): \n        return \"-1\" \n    return str[st: st + maxlen]", "input_output_pairs": [{"input": "find_Max_Len_Even('python language')", "output": "'language'", "ops": "=="}, {"input": "find_Max_Len_Even('maximum even length')", "output": "'length'", "ops": "=="}, {"input": "find_Max_Len_Even('eve')", "output": "'-1'", "ops": "=="}], "context": "", "instance_idx": 346, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 365, "description": "Write a python function to count the number of digits of a given number.", "code": "def count_Digit(n):\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count", "input_output_pairs": [{"input": "count_Digit(12345)", "output": "5", "ops": "=="}, {"input": "count_Digit(11223305)", "output": "8", "ops": "=="}, {"input": "count_Digit(4123459)", "output": "7", "ops": "=="}], "context": "", "instance_idx": 347, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/47", "description": "Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0", "code": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "input_output_pairs": [{"input": "median([3, 1, 2, 4, 5])", "output": "3", "ops": "=="}, {"input": "median([-10, 4, 6, 1000, 10, 20])", "output": "8.0", "ops": "=="}, {"input": "median([5])", "output": "5", "ops": "=="}, {"input": "median([6, 5])", "output": "5.5", "ops": "=="}, {"input": "median([8, 1, 3, 9, 9, 2, 7])", "output": "7", "ops": "=="}], "context": "", "instance_idx": 348, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 456, "description": "Write a function to reverse strings in a given list of string values.", "code": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result", "input_output_pairs": [{"input": "reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])", "output": "['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "ops": "=="}, {"input": "reverse_string_list(['john', 'amal', 'joel', 'george'])", "output": "['nhoj', 'lama', 'leoj', 'egroeg']", "ops": "=="}, {"input": "reverse_string_list(['jack', 'john', 'mary'])", "output": "['kcaj', 'nhoj', 'yram']", "ops": "=="}], "context": "", "instance_idx": 349, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 76, "description": "Write a python function to count the number of squares in a rectangle.", "code": "def count_Squares(m,n):\n    if(n < m):\n        temp = m\n        m = n\n        n = temp\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))", "input_output_pairs": [{"input": "count_Squares(4, 3)", "output": "20", "ops": "=="}, {"input": "count_Squares(2, 2)", "output": "5", "ops": "=="}, {"input": "count_Squares(1, 1)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 350, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 390, "description": "Write a function to insert a given string at the beginning of all items in a list.", "code": "def add_string(list,string):\n add_string=[string.format(i) for i in  list]\n return add_string", "input_output_pairs": [{"input": "add_string([1, 2, 3, 4], 'temp{0}')", "output": "['temp1', 'temp2', 'temp3', 'temp4']", "ops": "=="}, {"input": "add_string(['a', 'b', 'c', 'd'], 'python{0}')", "output": "['pythona', 'pythonb', 'pythonc', 'pythond']", "ops": "=="}, {"input": "add_string([5, 6, 7, 8], 'string{0}')", "output": "['string5', 'string6', 'string7', 'string8']", "ops": "=="}], "context": "", "instance_idx": 351, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 38, "description": "Write a function to find the division of first even and odd number of a given list.", "code": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even/first_odd)", "input_output_pairs": [{"input": "div_even_odd([1, 3, 5, 7, 4, 1, 6, 8])", "output": "4", "ops": "=="}, {"input": "div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "output": "2", "ops": "=="}, {"input": "div_even_odd([1, 5, 7, 9, 10])", "output": "10", "ops": "=="}], "context": "", "instance_idx": 352, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 209, "description": "Write a function to delete the smallest element from the given heap and then insert a new item.", "code": "def heap_replace(heap,a):\n  hq.heapify(heap)\n  hq.heapreplace(heap, a)\n  return heap", "input_output_pairs": [{"input": "heap_replace([25, 44, 68, 21, 39, 23, 89], 21)", "output": "[21, 25, 23, 44, 39, 68, 89]", "ops": "=="}, {"input": "heap_replace([25, 44, 68, 21, 39, 23, 89], 110)", "output": "[23, 25, 68, 44, 39, 110, 89]", "ops": "=="}, {"input": "heap_replace([25, 44, 68, 21, 39, 23, 89], 500)", "output": "[23, 25, 68, 44, 39, 500, 89]", "ops": "=="}], "context": "import heapq as hq", "instance_idx": 353, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/162", "description": "Given a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'", "code": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None", "input_output_pairs": [{"input": "string_to_md5('Hello world')", "output": "'3e25960a79dbc69b674cd4ec67a72c62'", "ops": "=="}, {"input": "string_to_md5('')", "output": "None", "ops": "=="}, {"input": "string_to_md5('A B C')", "output": "'0ef78513b0cb8cef12743f5aeb35f888'", "ops": "=="}, {"input": "string_to_md5('password')", "output": "'5f4dcc3b5aa765d61d8327deb882cf99'", "ops": "=="}], "context": "", "instance_idx": 354, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 463, "description": "Write a function to find the maximum product subarray of the given array.", "code": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far", "input_output_pairs": [{"input": "max_subarray_product([1, -2, -3, 0, 7, -8, -2])", "output": "112", "ops": "=="}, {"input": "max_subarray_product([6, -3, -10, 0, 2])", "output": "180", "ops": "=="}, {"input": "max_subarray_product([-2, -40, 0, -2, -3])", "output": "80", "ops": "=="}], "context": "", "instance_idx": 355, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 413, "description": "Write a function to extract the nth element from a given list of tuples.", "code": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result", "input_output_pairs": [{"input": "extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), (\n    'Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)", "output": "['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "ops": "=="}, {"input": "extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), (\n    'Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)", "output": "[99, 96, 94, 98]", "ops": "=="}, {"input": "extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), (\n    'Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)", "output": "[98, 97, 91, 94]", "ops": "=="}], "context": "", "instance_idx": 356, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 283, "description": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.", "code": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True", "input_output_pairs": [{"input": "validate(1234)", "output": "True", "ops": "=="}, {"input": "validate(51241)", "output": "False", "ops": "=="}, {"input": "validate(321)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 357, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/121", "description": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution([5, 8, 7, 1]) ==> 12\nsolution([3, 3, 3, 3, 3]) ==> 9\nsolution([30, 13, 24, 321]) ==>0", "code": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "input_output_pairs": [{"input": "solution([5, 8, 7, 1])", "output": "12", "ops": "=="}, {"input": "solution([3, 3, 3, 3, 3])", "output": "9", "ops": "=="}, {"input": "solution([30, 13, 24, 321])", "output": "0", "ops": "=="}, {"input": "solution([5, 9])", "output": "5", "ops": "=="}, {"input": "solution([2, 4, 8])", "output": "0", "ops": "=="}, {"input": "solution([30, 13, 23, 32])", "output": "23", "ops": "=="}, {"input": "solution([3, 13, 2, 9])", "output": "3", "ops": "=="}], "context": "", "instance_idx": 358, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 397, "description": "Write a function to find the median of three specific numbers.", "code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "input_output_pairs": [{"input": "median_numbers(25, 55, 65)", "output": "55.0", "ops": "=="}, {"input": "median_numbers(20, 10, 30)", "output": "20.0", "ops": "=="}, {"input": "median_numbers(15, 45, 75)", "output": "45.0", "ops": "=="}], "context": "", "instance_idx": 359, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 251, "description": "Write a function to insert an element before each element of a list.", "code": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list", "input_output_pairs": [{"input": "insert_element(['Red', 'Green', 'Black'], 'c')", "output": "['c', 'Red', 'c', 'Green', 'c', 'Black']", "ops": "=="}, {"input": "insert_element(['python', 'java'], 'program')", "output": "['program', 'python', 'program', 'java']", "ops": "=="}, {"input": "insert_element(['happy', 'sad'], 'laugh')", "output": "['laugh', 'happy', 'laugh', 'sad']", "ops": "=="}], "context": "", "instance_idx": 360, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 310, "description": "Write a function to convert a given string to a tuple.", "code": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "input_output_pairs": [{"input": "string_to_tuple('python 3.0')", "output": "('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "ops": "=="}, {"input": "string_to_tuple('item1')", "output": "('i', 't', 'e', 'm', '1')", "ops": "=="}, {"input": "string_to_tuple('15.10')", "output": "('1', '5', '.', '1', '0')", "ops": "=="}], "context": "", "instance_idx": 361, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 383, "description": "Write a python function to toggle all odd bits of a given number.", "code": "def even_bit_toggle_number(n) : \n    res = 0; count = 0; temp = n    \n    while(temp > 0 ) : \n        if (count % 2 == 0) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res", "input_output_pairs": [{"input": "even_bit_toggle_number(10)", "output": "15", "ops": "=="}, {"input": "even_bit_toggle_number(20)", "output": "1", "ops": "=="}, {"input": "even_bit_toggle_number(30)", "output": "11", "ops": "=="}], "context": "", "instance_idx": 362, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 150, "description": "Write a python function to find whether the given number is present in the infinite sequence or not.", "code": "def does_Contain_B(a,b,c): \n    if (a == b): \n        return True\n    if ((b - a) * c > 0 and (b - a) % c == 0): \n        return True\n    return False", "input_output_pairs": [{"input": "does_Contain_B(1, 7, 3)", "output": "True", "ops": "=="}, {"input": "does_Contain_B(1, -3, 5)", "output": "False", "ops": "=="}, {"input": "does_Contain_B(3, 2, 5)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 363, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/79", "description": "You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"", "code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"", "input_output_pairs": [{"input": "decimal_to_binary(0)", "output": "'db0db'", "ops": "=="}, {"input": "decimal_to_binary(32)", "output": "'db100000db'", "ops": "=="}, {"input": "decimal_to_binary(103)", "output": "'db1100111db'", "ops": "=="}, {"input": "decimal_to_binary(15)", "output": "'db1111db'", "ops": "=="}], "context": "", "instance_idx": 365, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 396, "description": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "code": "def check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\"", "input_output_pairs": [{"input": "check_char('abba')", "output": "'Valid'", "ops": "=="}, {"input": "check_char('a')", "output": "'Valid'", "ops": "=="}, {"input": "check_char('abcd')", "output": "'Invalid'", "ops": "=="}], "context": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'", "instance_idx": 366, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 189, "description": "Write a python function to find the first missing positive number.", "code": "def first_Missing_Positive(arr,n): \n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return(1)\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n    for i in range(n):\n        arr[(arr[i] - 1) % n] += n\n    for i in range(n):\n        if arr[i] <= n:\n            return(i + 1)\n    return(n + 1)", "input_output_pairs": [{"input": "first_Missing_Positive([1, 2, 3, -1, 5], 5)", "output": "4", "ops": "=="}, {"input": "first_Missing_Positive([0, -1, -2, 1, 5, 8], 6)", "output": "2", "ops": "=="}, {"input": "first_Missing_Positive([0, 1, 2, 5, -8], 5)", "output": "3", "ops": "=="}], "context": "", "instance_idx": 367, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 131, "description": "Write a python function to reverse only the vowels of a given string.", "code": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "input_output_pairs": [{"input": "reverse_vowels('Python')", "output": "'Python'", "ops": "=="}, {"input": "reverse_vowels('USA')", "output": "'ASU'", "ops": "=="}, {"input": "reverse_vowels('ab')", "output": "'ab'", "ops": "=="}], "context": "", "instance_idx": 368, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 482, "description": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "code": "def match(text): \n\t\tpattern = '[A-Z]+[a-z]+$'\n\t\tif re.search(pattern, text): \n\t\t\t\treturn('Yes') \n\t\telse: \n\t\t\t\treturn('No')", "input_output_pairs": [{"input": "match('Geeks')", "output": "'Yes'", "ops": "=="}, {"input": "match('geeksforGeeks')", "output": "'Yes'", "ops": "=="}, {"input": "match('geeks')", "output": "'No'", "ops": "=="}], "context": "import re", "instance_idx": 369, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 308, "description": "Write a function to find the specified number of largest products from two given lists.", "code": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "input_output_pairs": [{"input": "large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)", "output": "[60, 54, 50]", "ops": "=="}, {"input": "large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)", "output": "[60, 54, 50, 48]", "ops": "=="}, {"input": "large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)", "output": "[60, 54, 50, 48, 45]", "ops": "=="}], "context": "", "instance_idx": 370, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 171, "description": "Write a function to find the perimeter of a pentagon.", "code": "def perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter", "input_output_pairs": [{"input": "perimeter_pentagon(5)", "output": "25", "ops": "=="}, {"input": "perimeter_pentagon(10)", "output": "50", "ops": "=="}, {"input": "perimeter_pentagon(15)", "output": "75", "ops": "=="}], "context": "import math", "instance_idx": 371, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/163", "description": "Given two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => [2, 4, 6, 8]\ngenerate_integers(8, 2) => [2, 4, 6, 8]\ngenerate_integers(10, 14) => []", "code": "def generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]", "input_output_pairs": [{"input": "generate_integers(2, 10)", "output": "[2, 4, 6, 8]", "ops": "=="}, {"input": "generate_integers(10, 2)", "output": "[2, 4, 6, 8]", "ops": "=="}, {"input": "generate_integers(132, 2)", "output": "[2, 4, 6, 8]", "ops": "=="}, {"input": "generate_integers(17, 89)", "output": "[]", "ops": "=="}], "context": "", "instance_idx": 372, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 394, "description": "Write a function to check if given tuple is distinct or not.", "code": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res)", "input_output_pairs": [{"input": "check_distinct((1, 4, 5, 6, 1, 4))", "output": "False", "ops": "=="}, {"input": "check_distinct((1, 4, 5, 6))", "output": "True", "ops": "=="}, {"input": "check_distinct((2, 3, 4, 5, 6))", "output": "True", "ops": "=="}], "context": "", "instance_idx": 373, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/69", "description": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than\nzero, and has a frequency greater than or equal to the value of the integer itself.\nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\nsearch([4, 1, 2, 2, 3, 1]) == 2\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nsearch([5, 5, 4, 4, 4]) == -1", "code": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans", "input_output_pairs": [{"input": "search([5, 5, 5, 5, 1])", "output": "1", "ops": "=="}, {"input": "search([4, 1, 4, 1, 4, 4])", "output": "4", "ops": "=="}, {"input": "search([3, 3])", "output": "-1", "ops": "=="}, {"input": "search([8, 8, 8, 8, 8, 8, 8, 8])", "output": "8", "ops": "=="}, {"input": "search([2, 3, 3, 2, 2])", "output": "2", "ops": "=="}, {"input": "search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])", "output": "1", "ops": "=="}, {"input": "search([3, 2, 8, 2])", "output": "2", "ops": "=="}, {"input": "search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10])", "output": "1", "ops": "=="}, {"input": "search([8, 8, 3, 6, 5, 6, 4])", "output": "-1", "ops": "=="}, {"input": "search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, \n    2, 9, 5, 7, 9])", "output": "1", "ops": "=="}, {"input": "search([1, 9, 10, 1, 3])", "output": "1", "ops": "=="}, {"input": "search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9,\n    5, 3, 10])", "output": "5", "ops": "=="}, {"input": "search([1])", "output": "1", "ops": "=="}, {"input": "search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1,\n    1, 5])", "output": "4", "ops": "=="}, {"input": "search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10])", "output": "2", "ops": "=="}, {"input": "search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3])", "output": "1", "ops": "=="}, {"input": "search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, \n    9, 10, 7, 10, 2, 8, 10, 9, 4])", "output": "4", "ops": "=="}, {"input": "search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, \n    10, 7])", "output": "4", "ops": "=="}, {"input": "search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1])", "output": "2", "ops": "=="}, {"input": "search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8])", "output": "-1", "ops": "=="}, {"input": "search([10])", "output": "-1", "ops": "=="}, {"input": "search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2])", "output": "2", "ops": "=="}, {"input": "search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8])", "output": "1", "ops": "=="}, {"input": "search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6])", "output": "1", "ops": "=="}, {"input": "search([3, 10, 10, 9, 2])", "output": "-1", "ops": "=="}], "context": "", "instance_idx": 374, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 87, "description": "Write a function to merge three dictionaries into a single expression.", "code": "def merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict", "input_output_pairs": [{"input": "merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G':\n    'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'})", "output": "{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O':\n    'Orange'}", "ops": "=="}, {"input": "merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G':\n    'Green', 'W': 'White'}, {'L': 'lavender', 'B': 'Blue'})", "output": "{'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L':\n    'lavender'}", "ops": "=="}, {"input": "merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'L':\n    'lavender', 'B': 'Blue'}, {'G': 'Green', 'W': 'White'})", "output": "{'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W':\n    'White'}", "ops": "=="}], "context": "import collections as ct", "instance_idx": 376, "test_negations": ["merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G':\n    'Green', 'W': 'White'}, {'L': 'lavender', 'B': 'Blue'}) {'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W':\n    'White'}", "merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'L':\n    'lavender', 'B': 'Blue'}, {'G': 'Green', 'W': 'White'}) {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L':\n    'lavender'}"], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 69, "description": "Write a function to check whether a list contains the given sublist or not.", "code": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "input_output_pairs": [{"input": "is_sublist([2, 4, 3, 5, 7], [3, 7])", "output": "False", "ops": "=="}, {"input": "is_sublist([2, 4, 3, 5, 7], [4, 3])", "output": "True", "ops": "=="}, {"input": "is_sublist([2, 4, 3, 5, 7], [1, 6])", "output": "False", "ops": "=="}], "context": "", "instance_idx": 377, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 44, "description": "Write a function that matches a word at the beginning of a string.", "code": "def text_match_string(text):\n        patterns = '^\\w+'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'", "input_output_pairs": [{"input": "text_match_string(' python')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_string('python')", "output": "'Found a match!'", "ops": "=="}, {"input": "text_match_string('  lang')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_match_string('foo')", "output": "'Found a match!'", "ops": "=="}], "context": "import re", "instance_idx": 378, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 21, "description": "Write a function to find m number of multiples of n.", "code": "def multiples_of_num(m,n): \n    multiples_of_num= list(range(n,(m+1)*n, n)) \n    return list(multiples_of_num)", "input_output_pairs": [{"input": "multiples_of_num(4, 3)", "output": "[3, 6, 9, 12]", "ops": "=="}, {"input": "multiples_of_num(2, 5)", "output": "[5, 10]", "ops": "=="}, {"input": "multiples_of_num(9, 2)", "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18]", "ops": "=="}], "context": "", "instance_idx": 379, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 372, "description": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "code": "def heap_assending(nums):\n  hq.heapify(nums)\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\n  return s_result", "input_output_pairs": [{"input": "heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])", "output": "[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]", "ops": "=="}, {"input": "heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])", "output": "[14, 22, 25, 25, 35, 58, 65, 75, 85]", "ops": "=="}, {"input": "heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])", "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "ops": "=="}], "context": "import heapq as hq", "instance_idx": 380, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/34", "description": "Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]", "code": "def unique(l: list):\n    return sorted(list(set(l)))", "input_output_pairs": [{"input": "unique([5, 3, 5, 2, 3, 3, 9, 0, 123])", "output": "[0, 2, 3, 5, 9, 123]", "ops": "=="}], "context": "", "instance_idx": 381, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/159", "description": "You're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\nthe number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\n\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)", "code": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]", "input_output_pairs": [{"input": "eat(5, 6, 10)", "output": "[11, 4]", "ops": "=="}, {"input": "eat(4, 8, 9)", "output": "[12, 1]", "ops": "=="}, {"input": "eat(1, 10, 10)", "output": "[11, 0]", "ops": "=="}, {"input": "eat(2, 11, 5)", "output": "[7, 0]", "ops": "=="}, {"input": "eat(4, 5, 7)", "output": "[9, 2]", "ops": "=="}, {"input": "eat(4, 5, 1)", "output": "[5, 0]", "ops": "=="}], "context": "", "instance_idx": 382, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/145", "description": "Write a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\n\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == []", "code": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)", "input_output_pairs": [{"input": "order_by_points([1, 11, -1, -11, -12])", "output": "[-1, -11, 1, -12, 11]", "ops": "=="}, {"input": "order_by_points([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])", "output": "[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]", "ops": "=="}, {"input": "order_by_points([])", "output": "[]", "ops": "=="}, {"input": "order_by_points([1, -11, -32, 43, 54, -98, 2, -3])", "output": "[-3, -32, -98, -11, 1, 2, 43, 54]", "ops": "=="}, {"input": "order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])", "output": "[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]", "ops": "=="}, {"input": "order_by_points([0, 6, 6, -76, -21, 23, 4])", "output": "[-76, -21, 0, 4, 23, 6, 6]", "ops": "=="}], "context": "", "instance_idx": 383, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/100", "description": "Given a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n- the next odd number if n is odd.\n- the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]", "code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "input_output_pairs": [{"input": "make_a_pile(3)", "output": "[3, 5, 7]", "ops": "=="}, {"input": "make_a_pile(4)", "output": "[4, 6, 8, 10]", "ops": "=="}, {"input": "make_a_pile(5)", "output": "[5, 7, 9, 11, 13]", "ops": "=="}, {"input": "make_a_pile(6)", "output": "[6, 8, 10, 12, 14, 16]", "ops": "=="}, {"input": "make_a_pile(8)", "output": "[8, 10, 12, 14, 16, 18, 20, 22]", "ops": "=="}], "context": "", "instance_idx": 384, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 274, "description": "Write a python function to find sum of even index binomial coefficients.", "code": "def even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1))", "input_output_pairs": [{"input": "even_binomial_Coeff_Sum(4)", "output": "8", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(6)", "output": "32", "ops": "=="}, {"input": "even_binomial_Coeff_Sum(2)", "output": "2", "ops": "=="}], "context": "import math", "instance_idx": 385, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 352, "description": "Write a python function to check whether all the characters in a given string are unique.", "code": "def unique_Characters(str):\n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n            if (str[i] == str[j]):\n                return False;\n    return True;", "input_output_pairs": [{"input": "unique_Characters('aba')", "output": "False", "ops": "=="}, {"input": "unique_Characters('abc')", "output": "True", "ops": "=="}, {"input": "unique_Characters('abab')", "output": "False", "ops": "=="}], "context": "", "instance_idx": 386, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 177, "description": "Write a python function to find two distinct numbers such that their lcm lies within the given range.", "code": "def answer(L,R): \n    if (2 * L <= R): \n        return (L ,2*L)\n    else: \n        return (-1)", "input_output_pairs": [{"input": "answer(3, 8)", "output": "(3, 6)", "ops": "=="}, {"input": "answer(2, 6)", "output": "(2, 4)", "ops": "=="}, {"input": "answer(1, 3)", "output": "(1, 2)", "ops": "=="}], "context": "", "instance_idx": 387, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 281, "description": "Write a python function to check if the elements of a given list are unique or not.", "code": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True", "input_output_pairs": [{"input": "all_unique([1, 2, 3])", "output": "True", "ops": "=="}, {"input": "all_unique([1, 2, 1, 2])", "output": "False", "ops": "=="}, {"input": "all_unique([1, 2, 3, 4, 5])", "output": "True", "ops": "=="}], "context": "", "instance_idx": 388, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/143", "description": "You are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\n\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\n\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters", "code": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)", "input_output_pairs": [{"input": "words_in_sentence('This is a test')", "output": "'is'", "ops": "=="}, {"input": "words_in_sentence('lets go for swimming')", "output": "'go for'", "ops": "=="}, {"input": "words_in_sentence('there is no place available here')", "output": "'there is no place'", "ops": "=="}, {"input": "words_in_sentence('Hi I am Hussein')", "output": "'Hi am Hussein'", "ops": "=="}, {"input": "words_in_sentence('go for it')", "output": "'go for it'", "ops": "=="}, {"input": "words_in_sentence('here')", "output": "''", "ops": "=="}, {"input": "words_in_sentence('here is')", "output": "'is'", "ops": "=="}], "context": "", "instance_idx": 389, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 50, "description": "Write a function to find the list with minimum length using lambda function.", "code": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list )  \n    min_list = min(input_list, key = lambda i: len(i))\n    return(min_length, min_list)", "input_output_pairs": [{"input": "min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])", "output": "(1, [0])", "ops": "=="}, {"input": "min_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])", "output": "(1, [1])", "ops": "=="}, {"input": "min_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]])", "output": "(2, [1, 2])", "ops": "=="}], "context": "", "instance_idx": 390, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 418, "description": "Write a python function to find the sublist having maximum length.", "code": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList", "input_output_pairs": [{"input": "Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']])", "output": "['A', 'B', 'C']", "ops": "=="}, {"input": "Find_Max([[1], [1, 2], [1, 2, 3]])", "output": "[1, 2, 3]", "ops": "=="}, {"input": "Find_Max([[1, 1], [1, 2, 3], [1, 5, 6, 1]])", "output": "[1, 5, 6, 1]", "ops": "=="}], "context": "", "instance_idx": 391, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 137, "description": "Write a function to find the ration of zeroes in an array of integers.", "code": "def zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "input_output_pairs": [{"input": "zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])", "output": "0.15", "ops": "=="}, {"input": "zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])", "output": "0.0", "ops": "=="}, {"input": "zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])", "output": "0.0", "ops": "=="}], "context": "from array import array", "instance_idx": 392, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 110, "description": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "code": "def extract_missing(test_list, strt_val, stop_val):\n  res = []\n  for sub in test_list:\n    if sub[0] > strt_val:\n      res.append((strt_val, sub[0]))\n      strt_val = sub[1]\n    if strt_val < stop_val:\n      res.append((strt_val, stop_val))\n  return (res)", "input_output_pairs": [{"input": "extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)", "output": "[(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]", "ops": "=="}, {"input": "extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60)", "output": "[(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]", "ops": "=="}, {"input": "extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52)", "output": "[(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]", "ops": "=="}], "context": "", "instance_idx": 393, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 220, "description": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "code": "def replace_max_specialchar(text,n):\n return (re.sub(\"[ ,.]\", \":\", text, n))", "input_output_pairs": [{"input": "replace_max_specialchar('Python language, Programming language.', 2)", "output": "'Python:language: Programming language.'", "ops": "=="}, {"input": "replace_max_specialchar('a b c,d e f', 3)", "output": "'a:b:c:d e f'", "ops": "=="}, {"input": "replace_max_specialchar('ram reshma,ram rahim', 1)", "output": "'ram:reshma,ram rahim'", "ops": "=="}], "context": "import re", "instance_idx": 394, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 174, "description": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "code": "def group_keyvalue(l):\n    result = {}\n    for k, v in l:\n         result.setdefault(k, []).append(v)\n    return result", "input_output_pairs": [{"input": "group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), (\n    'red', 1)])", "output": "{'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}", "ops": "=="}, {"input": "group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4),\n    ('python', 5)])", "output": "{'python': [1, 2, 3, 4, 5]}", "ops": "=="}, {"input": "group_keyvalue([('yellow', 100), ('blue', 200), ('yellow', 300), ('blue', \n    400), ('red', 100)])", "output": "{'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}", "ops": "=="}], "context": "", "instance_idx": 395, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 70, "description": "Write a function to find whether all the given tuples have equal length or not.", "code": "def find_equal_tuple(Input, k):\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input, k):\n  if find_equal_tuple(Input, k) == 1:\n    return (\"All tuples have same length\")\n  else:\n    return (\"All tuples do not have same length\")", "input_output_pairs": [{"input": "get_equal([(11, 22, 33), (44, 55, 66)], 3)", "output": "'All tuples have same length'", "ops": "=="}, {"input": "get_equal([(1, 2, 3), (4, 5, 6, 7)], 3)", "output": "'All tuples do not have same length'", "ops": "=="}, {"input": "get_equal([(1, 2), (3, 4)], 2)", "output": "'All tuples have same length'", "ops": "=="}], "context": "", "instance_idx": 396, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 289, "description": "Write a python function to calculate the number of odd days in a given year.", "code": "def odd_Days(N): \n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap \n    if (hund1): \n        ordd += hund1 \n        leap -= hund1 \n    if (hund4): \n        ordd -= hund4 \n        leap += hund4 \n    days = ordd + leap * 2\n    odd = days % 7\n    return odd", "input_output_pairs": [{"input": "odd_Days(100)", "output": "5", "ops": "=="}, {"input": "odd_Days(50)", "output": "6", "ops": "=="}, {"input": "odd_Days(75)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 397, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/89", "description": "Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated.\nThe alphabet should be rotated in a manner such that the letters\nshift down by two multiplied to two places.\nFor example:\nencrypt('hi') returns 'lm'\nencrypt('asdfghjkl') returns 'ewhjklnop'\nencrypt('gf') returns 'kj'\nencrypt('et') returns 'ix'", "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out", "input_output_pairs": [{"input": "encrypt('hi')", "output": "'lm'", "ops": "=="}, {"input": "encrypt('asdfghjkl')", "output": "'ewhjklnop'", "ops": "=="}, {"input": "encrypt('gf')", "output": "'kj'", "ops": "=="}, {"input": "encrypt('et')", "output": "'ix'", "ops": "=="}, {"input": "encrypt('faewfawefaewg')", "output": "'jeiajeaijeiak'", "ops": "=="}, {"input": "encrypt('hellomyfriend')", "output": "'lippsqcjvmirh'", "ops": "=="}, {"input": "encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')", "output": "'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'", "ops": "=="}, {"input": "encrypt('a')", "output": "'e'", "ops": "=="}], "context": "", "instance_idx": 398, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 423, "description": "Write a function to solve gold mine problem.", "code": "def get_maxgold(gold, m, n): \n    goldTable = [[0 for i in range(n)] \n                        for j in range(m)]   \n    for col in range(n-1, -1, -1): \n        for row in range(m):  \n            if (col == n-1): \n                right = 0\n            else: \n                right = goldTable[row][col+1] \n            if (row == 0 or col == n-1): \n                right_up = 0\n            else: \n                right_up = goldTable[row-1][col+1] \n            if (row == m-1 or col == n-1): \n                right_down = 0\n            else: \n                right_down = goldTable[row+1][col+1] \n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \n    res = goldTable[0][0] \n    for i in range(1, m): \n        res = max(res, goldTable[i][0])  \n    return res", "input_output_pairs": [{"input": "get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4)", "output": "16", "ops": "=="}, {"input": "get_maxgold([[10, 20], [30, 40]], 2, 2)", "output": "70", "ops": "=="}, {"input": "get_maxgold([[4, 9], [3, 7]], 2, 2)", "output": "13", "ops": "=="}], "context": "", "instance_idx": 399, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 81, "description": "Write a function to zip the two given tuples.", "code": "def zip_tuples(test_tup1, test_tup2):\n  res = []\n  for i, j in enumerate(test_tup1):\n    res.append((j, test_tup2[i % len(test_tup2)])) \n  return (res)", "input_output_pairs": [{"input": "zip_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6))", "output": "[(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]", "ops": "=="}, {"input": "zip_tuples((8, 9, 5, 6, 10, 11), (2, 6, 7))", "output": "[(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]", "ops": "=="}, {"input": "zip_tuples((9, 10, 6, 7, 11, 12), (3, 7, 8))", "output": "[(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]", "ops": "=="}], "context": "", "instance_idx": 400, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 490, "description": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "code": "def extract_symmetric(test_list):\n  temp = set(test_list) & {(b, a) for a, b in test_list}\n  res = {(a, b) for a, b in temp if a < b}\n  return (res)", "input_output_pairs": [{"input": "extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)])", "output": "{(8, 9), (6, 7)}", "ops": "=="}, {"input": "extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)])", "output": "{(9, 10), (7, 8)}", "ops": "=="}, {"input": "extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)])", "output": "{(8, 9), (10, 11)}", "ops": "=="}], "context": "", "instance_idx": 401, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 145, "description": "Write a python function to find the maximum difference between any two elements in a given array.", "code": "def max_Abs_Diff(arr,n): \n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle)", "input_output_pairs": [{"input": "max_Abs_Diff((2, 1, 5, 3), 4)", "output": "4", "ops": "=="}, {"input": "max_Abs_Diff((9, 3, 2, 5, 1), 5)", "output": "8", "ops": "=="}, {"input": "max_Abs_Diff((3, 2, 1), 3)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 402, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 206, "description": "Write a function to perform the adjacent element concatenation in the given tuples.", "code": "def concatenate_elements(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)", "input_output_pairs": [{"input": "concatenate_elements(('DSP ', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'UTS'))", "output": "('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')", "ops": "=="}, {"input": "concatenate_elements(('RES ', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'QESR'))", "output": "('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')", "ops": "=="}, {"input": "concatenate_elements(('MSAM', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'SKD'))", "output": "('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')", "ops": "=="}], "context": "", "instance_idx": 403, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 314, "description": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "code": "def max_sum_rectangular_grid(grid, n) : \n\tincl = max(grid[0][0], grid[1][0]) \n\texcl = 0\n\tfor i in range(1, n) : \n\t\texcl_new = max(excl, incl) \n\t\tincl = excl + max(grid[0][i], grid[1][i]) \n\t\texcl = excl_new \n\treturn max(excl, incl)", "input_output_pairs": [{"input": "max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3)", "output": "7", "ops": "=="}, {"input": "max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5)", "output": "24", "ops": "=="}, {"input": "max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5)", "output": "81", "ops": "=="}], "context": "", "instance_idx": 404, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 167, "description": "Write a python function to find smallest power of 2 greater than or equal to n.", "code": "def next_Power_Of_2(n): \n    count = 0; \n    if (n and not(n & (n - 1))): \n        return n   \n    while( n != 0): \n        n >>= 1\n        count += 1\n    return 1 << count;", "input_output_pairs": [{"input": "next_Power_Of_2(0)", "output": "1", "ops": "=="}, {"input": "next_Power_Of_2(5)", "output": "8", "ops": "=="}, {"input": "next_Power_Of_2(17)", "output": "32", "ops": "=="}], "context": "", "instance_idx": 405, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 9, "description": "Write a python function to find the minimum number of rotations required to get the same string.", "code": "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n", "input_output_pairs": [{"input": "find_Rotations('aaaa')", "output": "1", "ops": "=="}, {"input": "find_Rotations('ab')", "output": "2", "ops": "=="}, {"input": "find_Rotations('abc')", "output": "3", "ops": "=="}], "context": "", "instance_idx": 406, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/27", "description": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'", "code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "input_output_pairs": [{"input": "flip_case('')", "output": "''", "ops": "=="}, {"input": "flip_case('Hello!')", "output": "'hELLO!'", "ops": "=="}, {"input": "flip_case('These violent delights have violent ends')", "output": "'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "ops": "=="}], "context": "", "instance_idx": 407, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 259, "description": "Write a function to maximize the given two tuples.", "code": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "input_output_pairs": [{"input": "maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1\n    ), (7, 3)))", "output": "((6, 7), (4, 9), (2, 9), (7, 10))", "ops": "=="}, {"input": "maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2,\n    2), (8, 4)))", "output": "((7, 8), (5, 10), (3, 10), (8, 11))", "ops": "=="}, {"input": "maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3,\n    3), (9, 5)))", "output": "((8, 9), (6, 11), (4, 11), (9, 12))", "ops": "=="}], "context": "", "instance_idx": 408, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 152, "description": "Write a function to sort the given array by using merge sort.", "code": "def merge(a,b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n    else:\n        c += a\n    return c\ndef merge_sort(x):\n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x)//2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a,b)", "input_output_pairs": [{"input": "merge_sort([3, 4, 2, 6, 5, 7, 1, 9])", "output": "[1, 2, 3, 4, 5, 6, 7, 9]", "ops": "=="}, {"input": "merge_sort([7, 25, 45, 78, 11, 33, 19])", "output": "[7, 11, 19, 25, 33, 45, 78]", "ops": "=="}, {"input": "merge_sort([3, 1, 4, 9, 8])", "output": "[1, 3, 4, 8, 9]", "ops": "=="}], "context": "", "instance_idx": 409, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 200, "description": "Write a function to find all index positions of the maximum values in a given list.", "code": "def position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result", "input_output_pairs": [{"input": "position_max([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])", "output": "[7]", "ops": "=="}, {"input": "position_max([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])", "output": "[7, 8, 9, 10]", "ops": "=="}, {"input": "position_max([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])", "output": "[11]", "ops": "=="}], "context": "", "instance_idx": 410, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/113", "description": "Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "code": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res", "input_output_pairs": [{"input": "odd_count(['1234567'])", "output": "['the number of odd elements 4n the str4ng 4 of the 4nput.']", "ops": "=="}, {"input": "odd_count(['3', '11111111'])", "output": "['the number of odd elements 1n the str1ng 1 of the 1nput.',\n    'the number of odd elements 8n the str8ng 8 of the 8nput.']", "ops": "=="}, {"input": "odd_count(['271', '137', '314'])", "output": "['the number of odd elements 2n the str2ng 2 of the 2nput.',\n    'the number of odd elements 3n the str3ng 3 of the 3nput.',\n    'the number of odd elements 2n the str2ng 2 of the 2nput.']", "ops": "=="}], "context": "", "instance_idx": 411, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 54, "description": "Write a function to sort the given array by using counting sort.", "code": "def counting_sort(my_list):\n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n        buckets[i] += 1\n    i = 0\n    for j in range(max_value + 1):\n         for a in range(buckets[j]):\n             my_list[i] = j\n             i += 1\n    return my_list", "input_output_pairs": [{"input": "counting_sort([1, 23, 4, 5, 6, 7, 8])", "output": "[1, 4, 5, 6, 7, 8, 23]", "ops": "=="}, {"input": "counting_sort([12, 9, 28, 33, 69, 45])", "output": "[9, 12, 28, 33, 45, 69]", "ops": "=="}, {"input": "counting_sort([8, 4, 14, 3, 2, 1])", "output": "[1, 2, 3, 4, 8, 14]", "ops": "=="}], "context": "", "instance_idx": 412, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 253, "description": "Write a python function to count integers from a given list.", "code": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr", "input_output_pairs": [{"input": "count_integer([1, 2, 'abc', 1.2])", "output": "2", "ops": "=="}, {"input": "count_integer([1, 2, 3])", "output": "3", "ops": "=="}, {"input": "count_integer([1, 1.2, 4, 5.1])", "output": "2", "ops": "=="}], "context": "", "instance_idx": 413, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 100, "description": "Write a function to find the next smallest palindrome of a specified number.", "code": "def next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i", "input_output_pairs": [{"input": "next_smallest_palindrome(99)", "output": "101", "ops": "=="}, {"input": "next_smallest_palindrome(1221)", "output": "1331", "ops": "=="}, {"input": "next_smallest_palindrome(120)", "output": "121", "ops": "=="}], "context": "import sys", "instance_idx": 414, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 438, "description": "Write a function to count bidirectional tuple pairs.", "code": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return (str(res))", "input_output_pairs": [{"input": "count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])", "output": "'3'", "ops": "=="}, {"input": "count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])", "output": "'2'", "ops": "=="}, {"input": "count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])", "output": "'4'", "ops": "=="}], "context": "", "instance_idx": 415, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 494, "description": "Write a function to convert the given binary tuple to integer.", "code": "def binary_to_integer(test_tup):\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\n  return (str(res))", "input_output_pairs": [{"input": "binary_to_integer((1, 1, 0, 1, 0, 0, 1))", "output": "'105'", "ops": "=="}, {"input": "binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1))", "output": "'101'", "ops": "=="}, {"input": "binary_to_integer((1, 1, 0, 1, 0, 1))", "output": "'53'", "ops": "=="}], "context": "", "instance_idx": 416, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/77", "description": "Write a function that takes an integer a and returns True\nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> True\niscube(2) ==> False\niscube(-1) ==> True\niscube(64) ==> True\niscube(0) ==> True\niscube(180) ==> False", "code": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a", "input_output_pairs": [{"input": "iscube(1)", "output": "True", "ops": "=="}, {"input": "iscube(2)", "output": "False", "ops": "=="}, {"input": "iscube(-1)", "output": "True", "ops": "=="}, {"input": "iscube(64)", "output": "True", "ops": "=="}, {"input": "iscube(180)", "output": "False", "ops": "=="}, {"input": "iscube(1000)", "output": "True", "ops": "=="}, {"input": "iscube(0)", "output": "True", "ops": "=="}, {"input": "iscube(1729)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 417, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 294, "description": "Write a function to find the maximum value in a given heterogeneous list.", "code": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)", "input_output_pairs": [{"input": "max_val(['Python', 3, 2, 4, 5, 'version'])", "output": "5", "ops": "=="}, {"input": "max_val(['Python', 15, 20, 25])", "output": "25", "ops": "=="}, {"input": "max_val(['Python', 30, 20, 40, 50, 'version'])", "output": "50", "ops": "=="}], "context": "", "instance_idx": 418, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 106, "description": "Write a function to add the given list to the given tuples.", "code": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res)", "input_output_pairs": [{"input": "add_lists([5, 6, 7], (9, 10))", "output": "(9, 10, 5, 6, 7)", "ops": "=="}, {"input": "add_lists([6, 7, 8], (10, 11))", "output": "(10, 11, 6, 7, 8)", "ops": "=="}, {"input": "add_lists([7, 8, 9], (11, 12))", "output": "(11, 12, 7, 8, 9)", "ops": "=="}], "context": "", "instance_idx": 419, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 51, "description": "Write a function to print check if the triangle is equilateral or not.", "code": "def check_equilateral(x,y,z):\n  if x == y == z:\n\t   return True\n  else:\n     return False", "input_output_pairs": [{"input": "check_equilateral(6, 8, 12)", "output": "False", "ops": "=="}, {"input": "check_equilateral(6, 6, 12)", "output": "False", "ops": "=="}, {"input": "check_equilateral(6, 6, 6)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 420, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/97", "description": "Complete the function that takes two integers and returns\nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.", "code": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)", "input_output_pairs": [{"input": "multiply(148, 412)", "output": "16", "ops": "=="}, {"input": "multiply(19, 28)", "output": "72", "ops": "=="}, {"input": "multiply(2020, 1851)", "output": "0", "ops": "=="}, {"input": "multiply(14, -15)", "output": "20", "ops": "=="}, {"input": "multiply(76, 67)", "output": "42", "ops": "=="}, {"input": "multiply(17, 27)", "output": "49", "ops": "=="}, {"input": "multiply(0, 1)", "output": "0", "ops": "=="}, {"input": "multiply(0, 0)", "output": "0", "ops": "=="}], "context": "", "instance_idx": 421, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/117", "description": "Given a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]", "code": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result", "input_output_pairs": [{"input": "select_words('Mary had a little lamb', 4)", "output": "['little']", "ops": "=="}, {"input": "select_words('Mary had a little lamb', 3)", "output": "['Mary', 'lamb']", "ops": "=="}, {"input": "select_words('simple white space', 2)", "output": "[]", "ops": "=="}, {"input": "select_words('Hello world', 4)", "output": "['world']", "ops": "=="}, {"input": "select_words('Uncle sam', 3)", "output": "['Uncle']", "ops": "=="}, {"input": "select_words('', 4)", "output": "[]", "ops": "=="}, {"input": "select_words('a b c d e f', 1)", "output": "['b', 'c', 'd', 'f']", "ops": "=="}], "context": "", "instance_idx": 422, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 194, "description": "Write a python function to convert octal number to decimal number.", "code": "def octal_To_Decimal(n):  \n    num = n; \n    dec_value = 0; \n    base = 1; \n    temp = num; \n    while (temp): \n        last_digit = temp % 10; \n        temp = int(temp / 10); \n        dec_value += last_digit*base; \n        base = base * 8; \n    return dec_value;", "input_output_pairs": [{"input": "octal_To_Decimal(25)", "output": "21", "ops": "=="}, {"input": "octal_To_Decimal(30)", "output": "24", "ops": "=="}, {"input": "octal_To_Decimal(40)", "output": "32", "ops": "=="}], "context": "", "instance_idx": 423, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/137", "description": "Create a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None", "code": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b", "input_output_pairs": [{"input": "compare_one(1, 2)", "output": "2", "ops": "=="}, {"input": "compare_one(1, 2.5)", "output": "2.5", "ops": "=="}, {"input": "compare_one(2, 3)", "output": "3", "ops": "=="}, {"input": "compare_one(5, 6)", "output": "6", "ops": "=="}, {"input": "compare_one(1, '2,3')", "output": "'2,3'", "ops": "=="}, {"input": "compare_one('5,1', '6')", "output": "'6'", "ops": "=="}, {"input": "compare_one('1', '2')", "output": "'2'", "ops": "=="}, {"input": "compare_one('1', 1)", "output": "None", "ops": "=="}], "context": "", "instance_idx": 424, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 261, "description": "Write a function to perform mathematical division operation across the given tuples.", "code": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)", "input_output_pairs": [{"input": "division_elements((10, 4, 6, 9), (5, 2, 3, 3))", "output": "(2, 2, 2, 3)", "ops": "=="}, {"input": "division_elements((12, 6, 8, 16), (6, 3, 4, 4))", "output": "(2, 2, 2, 4)", "ops": "=="}, {"input": "division_elements((20, 14, 36, 18), (5, 7, 6, 9))", "output": "(4, 2, 6, 2)", "ops": "=="}], "context": "", "instance_idx": 425, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 319, "description": "Write a function to find all five characters long word in the given string by using regex.", "code": "def find_long_word(text):\n  return (re.findall(r\"\\b\\w{5}\\b\", text))", "input_output_pairs": [{"input": "find_long_word('Please move back to strem')", "output": "['strem']", "ops": "=="}, {"input": "find_long_word('4K Ultra HD streaming player')", "output": "['Ultra']", "ops": "=="}, {"input": "find_long_word('Streaming Media Player')", "output": "['Media']", "ops": "=="}], "context": "import re", "instance_idx": 426, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 483, "description": "Write a python function to find the first natural number whose factorial is divisible by x.", "code": "def first_Factorial_Divisible_Number(x): \n    i = 1;\n    fact = 1; \n    for i in range(1,x): \n        fact = fact * i \n        if (fact % x == 0): \n            break\n    return i", "input_output_pairs": [{"input": "first_Factorial_Divisible_Number(10)", "output": "5", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(15)", "output": "5", "ops": "=="}, {"input": "first_Factorial_Divisible_Number(5)", "output": "4", "ops": "=="}], "context": "", "instance_idx": 427, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/150", "description": "A simple program which should return the value of x if n is\na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5", "code": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x", "input_output_pairs": [{"input": "x_or_y(7, 34, 12)", "output": "34", "ops": "=="}, {"input": "x_or_y(15, 8, 5)", "output": "5", "ops": "=="}, {"input": "x_or_y(3, 33, 5212)", "output": "33", "ops": "=="}, {"input": "x_or_y(1259, 3, 52)", "output": "3", "ops": "=="}, {"input": "x_or_y(7919, -1, 12)", "output": "-1", "ops": "=="}, {"input": "x_or_y(3609, 1245, 583)", "output": "583", "ops": "=="}, {"input": "x_or_y(91, 56, 129)", "output": "129", "ops": "=="}, {"input": "x_or_y(6, 34, 1234)", "output": "1234", "ops": "=="}, {"input": "x_or_y(1, 2, 0)", "output": "0", "ops": "=="}, {"input": "x_or_y(2, 2, 0)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 428, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/49", "description": "Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1", "code": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret", "input_output_pairs": [{"input": "modp(3, 5)", "output": "3", "ops": "=="}, {"input": "modp(1101, 101)", "output": "2", "ops": "=="}, {"input": "modp(0, 101)", "output": "1", "ops": "=="}, {"input": "modp(3, 11)", "output": "8", "ops": "=="}, {"input": "modp(100, 101)", "output": "1", "ops": "=="}, {"input": "modp(30, 5)", "output": "4", "ops": "=="}, {"input": "modp(31, 5)", "output": "3", "ops": "=="}], "context": "", "instance_idx": 429, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 88, "description": "Write a function to get the frequency of the elements in a list.", "code": "def freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count", "input_output_pairs": [{"input": "freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])", "output": "{10: 4, 20: 4, 40: 2, 50: 2, 30: 1}", "ops": "=="}, {"input": "freq_count([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])", "output": "{1: 3, 2: 2, 3: 3, 4: 3}", "ops": "=="}, {"input": "freq_count([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])", "output": "{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2}", "ops": "=="}], "context": "import collections", "instance_idx": 430, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/40", "description": "triples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n>>> triples_sum_to_zero([1])\nFalse", "code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "input_output_pairs": [{"input": "triples_sum_to_zero([1, 3, 5, 0])", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero([1, 3, 5, -1])", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero([1, 3, -2, 1])", "output": "True", "ops": "=="}, {"input": "triples_sum_to_zero([1, 2, 3, 7])", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero([1, 2, 5, 7])", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero([2, 4, -5, 3, 9, 7])", "output": "True", "ops": "=="}, {"input": "triples_sum_to_zero([1])", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero([1, 3, 5, -100])", "output": "False", "ops": "=="}, {"input": "triples_sum_to_zero([100, 3, 5, -100])", "output": "False", "ops": "=="}], "context": "", "instance_idx": 431, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 292, "description": "Write a python function to find quotient of two numbers.", "code": "def find(n,m):  \n    q = n//m \n    return (q)", "input_output_pairs": [{"input": "find(10, 3)", "output": "3", "ops": "=="}, {"input": "find(4, 2)", "output": "2", "ops": "=="}, {"input": "find(20, 5)", "output": "4", "ops": "=="}], "context": "", "instance_idx": 432, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 112, "description": "Write a python function to find the perimeter of a cylinder.", "code": "def perimeter(diameter,height) : \n    return 2*(diameter+height)", "input_output_pairs": [{"input": "perimeter(2, 4)", "output": "12", "ops": "=="}, {"input": "perimeter(1, 2)", "output": "6", "ops": "=="}, {"input": "perimeter(3, 1)", "output": "8", "ops": "=="}], "context": "", "instance_idx": 433, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 420, "description": "Write a python function to find the cube sum of first n even natural numbers.", "code": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum", "input_output_pairs": [{"input": "cube_Sum(2)", "output": "72", "ops": "=="}, {"input": "cube_Sum(3)", "output": "288", "ops": "=="}, {"input": "cube_Sum(4)", "output": "800", "ops": "=="}], "context": "", "instance_idx": 434, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 303, "description": "Write a python function to check whether the count of inversion of two types are same or not.", "code": "def solve(a,n):   \n    mx = -sys.maxsize - 1\n    for j in range(1,n):  \n        if (mx > a[j]):  \n            return False  \n        mx = max(mx,a[j - 1])    \n    return True", "input_output_pairs": [{"input": "solve([1, 0, 2], 3)", "output": "True", "ops": "=="}, {"input": "solve([1, 2, 0], 3)", "output": "False", "ops": "=="}, {"input": "solve([1, 2, 1], 3)", "output": "True", "ops": "=="}], "context": "import sys", "instance_idx": 435, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 20, "description": "Write a function to check if the given number is woodball or not.", "code": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False", "input_output_pairs": [{"input": "is_woodall(383)", "output": "True", "ops": "=="}, {"input": "is_woodall(254)", "output": "False", "ops": "=="}, {"input": "is_woodall(200)", "output": "False", "ops": "=="}, {"input": "is_woodall(32212254719)", "output": "True", "ops": "=="}, {"input": "is_woodall(32212254718)", "output": "False", "ops": "=="}, {"input": "is_woodall(159)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 436, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 436, "description": "Write a python function to print negative numbers in a list.", "code": "def neg_nos(list1):\n  for num in list1: \n    if num < 0: \n       return num", "input_output_pairs": [{"input": "neg_nos([-1, 4, 5, -6])", "output": "-1", "ops": "=="}, {"input": "neg_nos([-1, -2, 3, 4])", "output": "-1", "ops": "=="}, {"input": "neg_nos([-7, -6, 8, 9])", "output": "-7", "ops": "=="}], "context": "", "instance_idx": 437, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/28", "description": "Concatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'", "code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "input_output_pairs": [{"input": "concatenate([])", "output": "''", "ops": "=="}, {"input": "concatenate(['x', 'y', 'z'])", "output": "'xyz'", "ops": "=="}, {"input": "concatenate(['x', 'y', 'z', 'w', 'k'])", "output": "'xyzwk'", "ops": "=="}], "context": "from typing import List", "instance_idx": 438, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 5, "description": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "code": "def count_ways(n): \n\tA = [0] * (n + 1) \n\tB = [0] * (n + 1) \n\tA[0] = 1\n\tA[1] = 0\n\tB[0] = 0\n\tB[1] = 1\n\tfor i in range(2, n+1): \n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \n\t\tB[i] = A[i - 1] + B[i - 2] \n\treturn A[n]", "input_output_pairs": [{"input": "count_ways(2)", "output": "3", "ops": "=="}, {"input": "count_ways(8)", "output": "153", "ops": "=="}, {"input": "count_ways(12)", "output": "2131", "ops": "=="}], "context": "", "instance_idx": 439, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 67, "description": "Write a function to find the number of ways to partition a set of bell numbers.", "code": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0]", "input_output_pairs": [{"input": "bell_number(2)", "output": "2", "ops": "=="}, {"input": "bell_number(10)", "output": "115975", "ops": "=="}, {"input": "bell_number(56)", "output": "6775685320645824322581483068371419745979053216268760300", "ops": "=="}], "context": "", "instance_idx": 440, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/0", "description": "Check if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue", "code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False", "input_output_pairs": [{"input": "has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)", "output": "True", "ops": "=="}, {"input": "has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)", "output": "False", "ops": "=="}, {"input": "has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)", "output": "True", "ops": "=="}, {"input": "has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)", "output": "False", "ops": "=="}, {"input": "has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)", "output": "True", "ops": "=="}, {"input": "has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)", "output": "True", "ops": "=="}, {"input": "has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)", "output": "False", "ops": "=="}], "context": "from typing import List", "instance_idx": 441, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 290, "description": "Write a function to find the list of lists with maximum length.", "code": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)", "input_output_pairs": [{"input": "max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])", "output": "(3, [13, 15, 17])", "ops": "=="}, {"input": "max_length([[1], [5, 7], [10, 12, 14, 15]])", "output": "(4, [10, 12, 14, 15])", "ops": "=="}, {"input": "max_length([[5], [15, 20, 25]])", "output": "(3, [15, 20, 25])", "ops": "=="}], "context": "", "instance_idx": 442, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 214, "description": "Write a function to convert radians to degrees.", "code": "def degree_radian(radian):\n degree = radian*(180/math.pi)\n return degree", "input_output_pairs": [{"input": "degree_radian(90)", "output": "5156.620156177409", "ops": "=="}, {"input": "degree_radian(60)", "output": "3437.746770784939", "ops": "=="}, {"input": "degree_radian(120)", "output": "6875.493541569878", "ops": "=="}], "context": "import math", "instance_idx": 443, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 82, "description": "Write a function to find the volume of a sphere.", "code": "def volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume", "input_output_pairs": [{"input": "volume_sphere(10)", "output": "4188.790204786391", "ops": "=="}, {"input": "volume_sphere(25)", "output": "65449.84694978735", "ops": "=="}, {"input": "volume_sphere(20)", "output": "33510.32163829113", "ops": "=="}], "context": "import math", "instance_idx": 444, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 381, "description": "Write a function to sort a list of lists by a given index of the inner list.", "code": "def index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    return result", "input_output_pairs": [{"input": "index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), (\n    'Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)", "output": "[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, \n    99), ('Wyatt Knott', 91, 94)]", "ops": "=="}, {"input": "index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), (\n    'Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)", "output": "[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96),\n    ('Greyson Fulton', 98, 99)]", "ops": "=="}, {"input": "index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), (\n    'Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)", "output": "[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98),\n    ('Greyson Fulton', 98, 99)]", "ops": "=="}], "context": "from operator import itemgetter", "instance_idx": 445, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/146", "description": "Write a function that takes an array of numbers as input and returns\nthe number of elements in the array that are greater than 10 and both\nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter([15, -73, 14, -15]) => 1\nspecialFilter([33, -2, -3, 45, 21, 109]) => 2", "code": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count", "input_output_pairs": [{"input": "specialFilter([5, -2, 1, -5])", "output": "0", "ops": "=="}, {"input": "specialFilter([15, -73, 14, -15])", "output": "1", "ops": "=="}, {"input": "specialFilter([33, -2, -3, 45, 21, 109])", "output": "2", "ops": "=="}, {"input": "specialFilter([43, -12, 93, 125, 121, 109])", "output": "4", "ops": "=="}, {"input": "specialFilter([71, -2, -33, 75, 21, 19])", "output": "3", "ops": "=="}, {"input": "specialFilter([1])", "output": "0", "ops": "=="}, {"input": "specialFilter([])", "output": "0", "ops": "=="}], "context": "", "instance_idx": 446, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 159, "description": "Write a function to print the season for the given month and day.", "code": "def month_season(month,days):\n if month in ('January', 'February', 'March'):\n\t season = 'winter'\n elif month in ('April', 'May', 'June'):\n\t season = 'spring'\n elif month in ('July', 'August', 'September'):\n\t season = 'summer'\n else:\n\t season = 'autumn'\n if (month == 'March') and (days > 19):\n\t season = 'spring'\n elif (month == 'June') and (days > 20):\n\t season = 'summer'\n elif (month == 'September') and (days > 21):\n\t season = 'autumn'\n elif (month == 'October') and (days > 21):\n\t season = 'autumn'\n elif (month == 'November') and (days > 21):\n\t season = 'autumn'\n elif (month == 'December') and (days > 20):\n\t season = 'winter'\n return season", "input_output_pairs": [{"input": "month_season('January', 4)", "output": "'winter'", "ops": "=="}, {"input": "month_season('October', 28)", "output": "'autumn'", "ops": "=="}, {"input": "month_season('June', 6)", "output": "'spring'", "ops": "=="}], "context": "", "instance_idx": 447, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 40, "description": "Write a function to find frequency of the elements in a given list of lists using collections module.", "code": "def freq_element(nums):\n  result = Counter(chain.from_iterable(nums))\n  return result", "input_output_pairs": [{"input": "freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])", "output": "{2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1}", "ops": "=="}, {"input": "freq_element([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])", "output": "{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}", "ops": "=="}, {"input": "freq_element([[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]])", "output": "{30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1}", "ops": "=="}], "context": "from collections import Counter\nfrom itertools import chain", "instance_idx": 448, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 440, "description": "Write a function to find all adverbs and their positions in a given sentence.", "code": "def find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))", "input_output_pairs": [{"input": "find_adverb_position('clearly!! we can see the sky')", "output": "(0, 7, 'clearly')", "ops": "=="}, {"input": "find_adverb_position('seriously!! there are many roses')", "output": "(0, 9, 'seriously')", "ops": "=="}, {"input": "find_adverb_position('unfortunately!! sita is going to home')", "output": "(0, 13, 'unfortunately')", "ops": "=="}], "context": "import re", "instance_idx": 449, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 37, "description": "Write a function to sort a given mixed list of integers and strings.", "code": "def sort_mixed_list(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part", "input_output_pairs": [{"input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])", "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])", "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}, {"input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])", "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "ops": "=="}], "context": "", "instance_idx": 450, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 157, "description": "Write a function to reflect the run-length encoding from a list.", "code": "def encode_list(list1):\n    return [[len(list(group)), key] for key, group in groupby(list1)]", "input_output_pairs": [{"input": "encode_list([1, 1, 2, 3, 4, 4.3, 5, 1])", "output": "[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]", "ops": "=="}, {"input": "encode_list('automatically')", "output": "[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1,\n    'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]", "ops": "=="}, {"input": "encode_list('python')", "output": "[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]", "ops": "=="}], "context": "from itertools import groupby", "instance_idx": 451, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 25, "description": "Write a python function to find the product of non-repeated elements in a given array.", "code": "def find_Product(arr,n): \n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n        if (arr[i - 1] != arr[i]): \n            prod = prod * arr[i] \n    return prod;", "input_output_pairs": [{"input": "find_Product([1, 1, 2, 3], 4)", "output": "6", "ops": "=="}, {"input": "find_Product([1, 2, 3, 1, 1], 5)", "output": "6", "ops": "=="}, {"input": "find_Product([1, 1, 4, 5, 6], 5)", "output": "120", "ops": "=="}, {"input": "find_Product([1, 1, 4, 5, 6, 5, 7, 1, 1, 3, 4], 11)", "output": "2520", "ops": "=="}], "context": "", "instance_idx": 452, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/129", "description": "Given a grid with N rows and N columns (N >= 2) and a positive integer k,\neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\n\nExamples:\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\nOutput: [1, 2, 1]\n\nInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\nOutput: [1]", "code": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans", "input_output_pairs": [{"input": "minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)", "output": "[1, 2, 1]", "ops": "=="}, {"input": "minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)", "output": "[1]", "ops": "=="}, {"input": "minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4)", "output": "[1, 2, 1, 2]", "ops": "=="}, {"input": "minPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)", "output": "[1, 10, 1, 10, 1, 10, 1]", "ops": "=="}, {"input": "minPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)", "output": "[1, 7, 1, 7, 1]", "ops": "=="}, {"input": "minPath([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9)", "output": "[1, 6, 1, 6, 1, 6, 1, 6, 1]", "ops": "=="}, {"input": "minPath([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12)", "output": "[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]", "ops": "=="}, {"input": "minPath([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8)", "output": "[1, 3, 1, 3, 1, 3, 1, 3]", "ops": "=="}, {"input": "minPath([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8)", "output": "[1, 5, 1, 5, 1, 5, 1, 5]", "ops": "=="}, {"input": "minPath([[1, 2], [3, 4]], 10)", "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]", "ops": "=="}, {"input": "minPath([[1, 3], [3, 2]], 10)", "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]", "ops": "=="}], "context": "", "instance_idx": 453, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 109, "description": "Write a python function to find the count of rotations of a binary string with odd value.", "code": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count", "input_output_pairs": [{"input": "odd_Equivalent('011001', 6)", "output": "3", "ops": "=="}, {"input": "odd_Equivalent('11011', 5)", "output": "4", "ops": "=="}, {"input": "odd_Equivalent('1010', 4)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 454, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/161", "description": "You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"", "code": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s", "input_output_pairs": [{"input": "solve('AsDf')", "output": "'aSdF'", "ops": "=="}, {"input": "solve('1234')", "output": "'4321'", "ops": "=="}, {"input": "solve('ab')", "output": "'AB'", "ops": "=="}, {"input": "solve('#a@C')", "output": "'#A@c'", "ops": "=="}, {"input": "solve('#AsdfW^45')", "output": "'#aSDFw^45'", "ops": "=="}, {"input": "solve('#6@2')", "output": "'2@6#'", "ops": "=="}, {"input": "solve('#$a^D')", "output": "'#$A^d'", "ops": "=="}, {"input": "solve('#ccc')", "output": "'#CCC'", "ops": "=="}], "context": "", "instance_idx": 455, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 153, "description": "Write a function to find the vertex of a parabola.", "code": "def parabola_vertex(a, b, c): \n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  return vertex", "input_output_pairs": [{"input": "parabola_vertex(5, 3, 2)", "output": "(-0.3, 1.55)", "ops": "=="}, {"input": "parabola_vertex(9, 8, 4)", "output": "(-0.4444444444444444, 2.2222222222222223)", "ops": "=="}, {"input": "parabola_vertex(2, 4, 6)", "output": "(-1.0, 4.0)", "ops": "=="}], "context": "", "instance_idx": 456, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 378, "description": "Write a python function to shift last element to first position in the given list.", "code": "def move_first(test_list):\n  test_list = test_list[-1:] + test_list[:-1]  \n  return test_list", "input_output_pairs": [{"input": "move_first([1, 2, 3, 4])", "output": "[4, 1, 2, 3]", "ops": "=="}, {"input": "move_first([0, 1, 2, 3])", "output": "[3, 0, 1, 2]", "ops": "=="}, {"input": "move_first([9, 8, 7, 1])", "output": "[1, 9, 8, 7]", "ops": "=="}], "context": "", "instance_idx": 457, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/84", "description": "Given a positive integer N, return the total sum of its digits in binary.\n\nExample\nFor N = 1000, the sum of digits will be 1 the output should be \"1\".\nFor N = 150, the sum of digits will be 6 the output should be \"110\".\nFor N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n@N integer\nConstraints: 0 \u2264 N \u2264 10000.\nOutput:\na string of binary number", "code": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]", "input_output_pairs": [{"input": "solve(1000)", "output": "'1'", "ops": "=="}, {"input": "solve(150)", "output": "'110'", "ops": "=="}, {"input": "solve(147)", "output": "'1100'", "ops": "=="}, {"input": "solve(333)", "output": "'1001'", "ops": "=="}, {"input": "solve(963)", "output": "'10010'", "ops": "=="}], "context": "", "instance_idx": 458, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 480, "description": "Write a python function to find the maximum occurring character in a given string.", "code": "def get_max_occuring_char(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1;\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "input_output_pairs": [{"input": "get_max_occuring_char('data')", "output": "'a'", "ops": "=="}, {"input": "get_max_occuring_char('create')", "output": "'e'", "ops": "=="}, {"input": "get_max_occuring_char('brilliant girl')", "output": "'i'", "ops": "=="}], "context": "", "instance_idx": 459, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 324, "description": "Write a function to extract the sum of alternate chains of tuples.", "code": "def sum_of_alternates(test_tuple):\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return ((sum1),(sum2))", "input_output_pairs": [{"input": "sum_of_alternates((5, 6, 3, 6, 10, 34))", "output": "(46, 18)", "ops": "=="}, {"input": "sum_of_alternates((1, 2, 3, 4, 5))", "output": "(6, 9)", "ops": "=="}, {"input": "sum_of_alternates((6, 7, 8, 9, 4, 5))", "output": "(21, 18)", "ops": "=="}], "context": "", "instance_idx": 460, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 338, "description": "Write a python function to count the number of substrings with same first and last characters.", "code": "def check_Equality(s): \n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    for i in range(n):\n        for j in range(1,n-i+1): \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result;", "input_output_pairs": [{"input": "count_Substring_With_Equal_Ends('aba')", "output": "4", "ops": "=="}, {"input": "count_Substring_With_Equal_Ends('abcab')", "output": "7", "ops": "=="}, {"input": "count_Substring_With_Equal_Ends('abc')", "output": "3", "ops": "=="}], "context": "", "instance_idx": 461, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 165, "description": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "code": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars", "input_output_pairs": [{"input": "count_char_position('xbcefg')", "output": "2", "ops": "=="}, {"input": "count_char_position('ABcED')", "output": "3", "ops": "=="}, {"input": "count_char_position('AbgdeF')", "output": "5", "ops": "=="}], "context": "", "instance_idx": 462, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 412, "description": "Write a python function to remove odd numbers from a given list.", "code": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l", "input_output_pairs": [{"input": "remove_odd([1, 2, 3])", "output": "[2]", "ops": "=="}, {"input": "remove_odd([2, 4, 6])", "output": "[2, 4, 6]", "ops": "=="}, {"input": "remove_odd([10, 20, 3])", "output": "[10, 20]", "ops": "=="}], "context": "", "instance_idx": 463, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 295, "description": "Write a function to return the sum of all divisors of a number.", "code": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)", "input_output_pairs": [{"input": "sum_div(8)", "output": "7", "ops": "=="}, {"input": "sum_div(12)", "output": "16", "ops": "=="}, {"input": "sum_div(7)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 464, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 346, "description": "Write a function to find entringer number e(n, k).", "code": "def zigzag(n, k): \n\tif (n == 0 and k == 0): \n\t\treturn 1\n\tif (k == 0): \n\t\treturn 0\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)", "input_output_pairs": [{"input": "zigzag(4, 3)", "output": "5", "ops": "=="}, {"input": "zigzag(4, 2)", "output": "4", "ops": "=="}, {"input": "zigzag(3, 1)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 465, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 203, "description": "Write a python function to find the hamming distance between given two integers.", "code": "def hamming_Distance(n1,n2) : \n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n        setBits += x & 1\n        x >>= 1\n    return setBits", "input_output_pairs": [{"input": "hamming_Distance(4, 8)", "output": "2", "ops": "=="}, {"input": "hamming_Distance(2, 4)", "output": "2", "ops": "=="}, {"input": "hamming_Distance(1, 2)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 466, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 16, "description": "Write a function to find sequences of lowercase letters joined with an underscore.", "code": "def text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "input_output_pairs": [{"input": "text_lowercase_underscore('aab_cbbbc')", "output": "'Found a match!'", "ops": "=="}, {"input": "text_lowercase_underscore('aab_Abbbc')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lowercase_underscore('Aaab_abbbc')", "output": "'Not matched!'", "ops": "=="}, {"input": "text_lowercase_underscore('aab-cbbbc')", "output": "'Not matched!'", "ops": "=="}], "context": "import re", "instance_idx": 467, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 333, "description": "Write a python function to sort a list according to the second element in sublist.", "code": "def Sort(sub_li): \n    sub_li.sort(key = lambda x: x[1]) \n    return sub_li", "input_output_pairs": [{"input": "Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]])", "output": "[['b', 5], ['a', 10], ['d', 15], ['c', 20]]", "ops": "=="}, {"input": "Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]])", "output": "[['256', 5], ['452', 10], ['135', 15], ['100', 20]]", "ops": "=="}, {"input": "Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]])", "output": "[['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]", "ops": "=="}], "context": "", "instance_idx": 468, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 269, "description": "Write a function to find the ascii value of a character.", "code": "def ascii_value(k):\n  ch=k\n  return ord(ch)", "input_output_pairs": [{"input": "ascii_value('A')", "output": "65", "ops": "=="}, {"input": "ascii_value('R')", "output": "82", "ops": "=="}, {"input": "ascii_value('S')", "output": "83", "ops": "=="}], "context": "", "instance_idx": 469, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 115, "description": "Write a function to check whether all dictionaries in a list are empty or not.", "code": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit", "input_output_pairs": [{"input": "empty_dit([{}, {}, {}])", "output": "True", "ops": "=="}, {"input": "empty_dit([{1, 2}, {}, {}])", "output": "False", "ops": "=="}, {"input": "empty_dit({})", "output": "True", "ops": "=="}], "context": "", "instance_idx": 470, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 231, "description": "Write a function to find the maximum sum in the given right triangle of numbers.", "code": "def max_sum(tri, n): \n\tif n > 1: \n\t\ttri[1][1] = tri[1][1]+tri[0][0] \n\t\ttri[1][0] = tri[1][0]+tri[0][0] \n\tfor i in range(2, n): \n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \n\t\tfor j in range(1, i): \n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \n\t\t\telse: \n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \n\treturn (max(tri[n-1]))", "input_output_pairs": [{"input": "max_sum([[1], [2, 1], [3, 3, 2]], 3)", "output": "6", "ops": "=="}, {"input": "max_sum([[1], [1, 2], [4, 1, 12]], 3)", "output": "15", "ops": "=="}, {"input": "max_sum([[2], [3, 2], [13, 23, 12]], 3)", "output": "28", "ops": "=="}], "context": "", "instance_idx": 471, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 265, "description": "Write a function to split a list for every nth element.", "code": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "input_output_pairs": [{"input": "list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n    'n'], 3)", "output": "[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "ops": "=="}, {"input": "list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)", "output": "[[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]", "ops": "=="}, {"input": "list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2)", "output": "[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]", "ops": "=="}], "context": "", "instance_idx": 472, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 356, "description": "Write a function to find the third angle of a triangle using two angles.", "code": "def find_angle(a,b):\n c = 180 - (a + b)\n return c", "input_output_pairs": [{"input": "find_angle(47, 89)", "output": "44", "ops": "=="}, {"input": "find_angle(45, 95)", "output": "40", "ops": "=="}, {"input": "find_angle(50, 40)", "output": "90", "ops": "=="}], "context": "", "instance_idx": 473, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 409, "description": "Write a function to find the minimum product from the pairs of tuples within a given list.", "code": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min", "input_output_pairs": [{"input": "min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])", "output": "8", "ops": "=="}, {"input": "min_product_tuple([(10, 20), (15, 2), (5, 10)])", "output": "30", "ops": "=="}, {"input": "min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)])", "output": "100", "ops": "=="}], "context": "", "instance_idx": 474, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 323, "description": "Write a function to re-arrange the given array in alternating positive and negative items.", "code": "def right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\ndef re_arrange(arr, n):\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index-out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = - 1\n\t\tif (out_of_place == -1):\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\n\t\t\t\tout_of_place = index\n\treturn arr", "input_output_pairs": [{"input": "re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)", "output": "[-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]", "ops": "=="}, {"input": "re_arrange([1, 2, 3, -4, -1, 4], 6)", "output": "[-4, 1, -1, 2, 3, 4]", "ops": "=="}, {"input": "re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8)", "output": "[-4, 4, -3, 7, -9, 9, 77, 5]", "ops": "=="}], "context": "", "instance_idx": 475, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/25", "description": "Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]", "code": "def factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact", "input_output_pairs": [{"input": "factorize(2)", "output": "[2]", "ops": "=="}, {"input": "factorize(4)", "output": "[2, 2]", "ops": "=="}, {"input": "factorize(8)", "output": "[2, 2, 2]", "ops": "=="}, {"input": "factorize(3 * 19)", "output": "[3, 19]", "ops": "=="}, {"input": "factorize(3 * 19 * 3 * 19)", "output": "[3, 3, 19, 19]", "ops": "=="}, {"input": "factorize(3 * 19 * 3 * 19 * 3 * 19)", "output": "[3, 3, 3, 19, 19, 19]", "ops": "=="}, {"input": "factorize(3 * 19 * 19 * 19)", "output": "[3, 19, 19, 19]", "ops": "=="}, {"input": "factorize(3 * 2 * 3)", "output": "[2, 3, 3]", "ops": "=="}], "context": "from typing import List", "instance_idx": 476, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/119", "description": "You are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\nExamples:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'", "code": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'", "input_output_pairs": [{"input": "match_parens(['()(', ')'])", "output": "'Yes'", "ops": "=="}, {"input": "match_parens([')', ')'])", "output": "'No'", "ops": "=="}, {"input": "match_parens(['(()(())', '())())'])", "output": "'No'", "ops": "=="}, {"input": "match_parens([')())', '(()()('])", "output": "'Yes'", "ops": "=="}, {"input": "match_parens(['(())))', '(()())(('])", "output": "'Yes'", "ops": "=="}, {"input": "match_parens(['()', '())'])", "output": "'No'", "ops": "=="}, {"input": "match_parens(['(()(', '()))()'])", "output": "'Yes'", "ops": "=="}, {"input": "match_parens(['((((', '((())'])", "output": "'No'", "ops": "=="}, {"input": "match_parens([')(()', '(()('])", "output": "'No'", "ops": "=="}, {"input": "match_parens([')(', ')('])", "output": "'No'", "ops": "=="}, {"input": "match_parens(['(', ')'])", "output": "'Yes'", "ops": "=="}, {"input": "match_parens([')', '('])", "output": "'Yes'", "ops": "=="}], "context": "", "instance_idx": 477, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 279, "description": "Write a function to find the nth decagonal number.", "code": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n", "input_output_pairs": [{"input": "is_num_decagonal(3)", "output": "27", "ops": "=="}, {"input": "is_num_decagonal(7)", "output": "175", "ops": "=="}, {"input": "is_num_decagonal(10)", "output": "370", "ops": "=="}], "context": "", "instance_idx": 478, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 219, "description": "Write a function to extract maximum and minimum k elements in the given tuple.", "code": "def extract_min_max(test_tup, K):\n  res = []\n  test_tup = list(test_tup)\n  temp = sorted(test_tup)\n  for idx, val in enumerate(temp):\n    if idx < K or idx >= len(temp) - K:\n      res.append(val)\n  res = tuple(res)\n  return (res)", "input_output_pairs": [{"input": "extract_min_max((5, 20, 3, 7, 6, 8), 2)", "output": "(3, 5, 8, 20)", "ops": "=="}, {"input": "extract_min_max((4, 5, 6, 1, 2, 7), 3)", "output": "(1, 2, 4, 5, 6, 7)", "ops": "=="}, {"input": "extract_min_max((2, 3, 4, 8, 9, 11, 7), 4)", "output": "(2, 3, 4, 7, 8, 9, 11)", "ops": "=="}], "context": "", "instance_idx": 479, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 348, "description": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "code": "def bin_coff(n, r): \n\tval = 1\n\tif (r > (n - r)): \n\t\tr = (n - r) \n\tfor i in range(0, r): \n\t\tval *= (n - i) \n\t\tval //= (i + 1) \n\treturn val \ndef find_ways(M): \n\tn = M // 2\n\ta = bin_coff(2 * n, n) \n\tb = a // (n + 1) \n\treturn (b)", "input_output_pairs": [{"input": "find_ways(4)", "output": "2", "ops": "=="}, {"input": "find_ways(6)", "output": "5", "ops": "=="}, {"input": "find_ways(8)", "output": "14", "ops": "=="}], "context": "", "instance_idx": 480, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 260, "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "code": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "input_output_pairs": [{"input": "newman_prime(3)", "output": "7", "ops": "=="}, {"input": "newman_prime(4)", "output": "17", "ops": "=="}, {"input": "newman_prime(5)", "output": "41", "ops": "=="}], "context": "", "instance_idx": 481, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 361, "description": "Write a function to remove empty lists from a given list of lists.", "code": "def remove_empty(list1):\n  remove_empty = [x for x in list1 if x]\n  return remove_empty", "input_output_pairs": [{"input": "remove_empty([[], [], [], 'Red', 'Green', [1, 2], 'Blue', [], []])", "output": "['Red', 'Green', [1, 2], 'Blue']", "ops": "=="}, {"input": "remove_empty([[], [], [], [], [], 'Green', [1, 2], 'Blue', [], []])", "output": "['Green', [1, 2], 'Blue']", "ops": "=="}, {"input": "remove_empty([[], [], [], 'Python', [], [], 'programming', 'language', [],\n    [], [], [], []])", "output": "['Python', 'programming', 'language']", "ops": "=="}], "context": "", "instance_idx": 482, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 229, "description": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "code": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr", "input_output_pairs": [{"input": "re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)", "output": "[-1, -3, -7, 4, 5, 6, 2, 8, 9]", "ops": "=="}, {"input": "re_arrange_array([12, -14, -26, 13, 15], 5)", "output": "[-14, -26, 12, 13, 15]", "ops": "=="}, {"input": "re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7)", "output": "[-42, -39, -78, 10, 24, 36, 85]", "ops": "=="}], "context": "", "instance_idx": 483, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 83, "description": "Write a python function to find the character made by adding all the characters of the given string.", "code": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)", "input_output_pairs": [{"input": "get_Char('abc')", "output": "'f'", "ops": "=="}, {"input": "get_Char('gfg')", "output": "'t'", "ops": "=="}, {"input": "get_Char('ab')", "output": "'c'", "ops": "=="}], "context": "", "instance_idx": 484, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 369, "description": "Write a function to find the lateral surface area of cuboid", "code": "def lateralsurface_cuboid(l,w,h):\n  LSA = 2*h*(l+w)\n  return LSA", "input_output_pairs": [{"input": "lateralsurface_cuboid(8, 5, 6)", "output": "156", "ops": "=="}, {"input": "lateralsurface_cuboid(7, 9, 10)", "output": "320", "ops": "=="}, {"input": "lateralsurface_cuboid(10, 20, 30)", "output": "1800", "ops": "=="}], "context": "", "instance_idx": 485, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 19, "description": "Write a function to find whether a given array of integers contains any duplicate element.", "code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)", "input_output_pairs": [{"input": "test_duplicate([1, 2, 3, 4, 5])", "output": "False", "ops": "=="}, {"input": "test_duplicate([1, 2, 3, 4, 4])", "output": "True", "ops": "=="}, {"input": "test_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5])", "output": "True", "ops": "=="}], "context": "", "instance_idx": 486, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 75, "description": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "code": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return (str(res))", "input_output_pairs": [{"input": "find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)", "output": "'[(6, 24, 12)]'", "ops": "=="}, {"input": "find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5)", "output": "'[(5, 25, 30)]'", "ops": "=="}, {"input": "find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4)", "output": "'[(8, 16, 4)]'", "ops": "=="}], "context": "", "instance_idx": 487, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 204, "description": "Write a python function to count the occurrence of a given character in a string.", "code": "def count(s,c) : \n    res = 0 \n    for i in range(len(s)) : \n        if (s[i] == c): \n            res = res + 1\n    return res", "input_output_pairs": [{"input": "count('abcc', 'c')", "output": "2", "ops": "=="}, {"input": "count('ababca', 'a')", "output": "3", "ops": "=="}, {"input": "count('mnmm0pm', 'm')", "output": "4", "ops": "=="}], "context": "", "instance_idx": 488, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/136", "description": "Create a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\n\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)", "input_output_pairs": [{"input": "largest_smallest_integers([2, 4, 1, 3, 5, 7])", "output": "(None, 1)", "ops": "=="}, {"input": "largest_smallest_integers([2, 4, 1, 3, 5, 7, 0])", "output": "(None, 1)", "ops": "=="}, {"input": "largest_smallest_integers([1, 3, 2, 4, 5, 6, -2])", "output": "(-2, 1)", "ops": "=="}, {"input": "largest_smallest_integers([4, 5, 3, 6, 2, 7, -7])", "output": "(-7, 2)", "ops": "=="}, {"input": "largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9])", "output": "(-9, 2)", "ops": "=="}, {"input": "largest_smallest_integers([])", "output": "(None, None)", "ops": "=="}, {"input": "largest_smallest_integers([0])", "output": "(None, None)", "ops": "=="}, {"input": "largest_smallest_integers([-1, -3, -5, -6])", "output": "(-1, None)", "ops": "=="}, {"input": "largest_smallest_integers([-1, -3, -5, -6, 0])", "output": "(-1, None)", "ops": "=="}, {"input": "largest_smallest_integers([-6, -4, -4, -3, 1])", "output": "(-3, 1)", "ops": "=="}, {"input": "largest_smallest_integers([-6, -4, -4, -3, -100, 1])", "output": "(-3, 1)", "ops": "=="}], "context": "", "instance_idx": 489, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 116, "description": "Write a function to convert a given tuple of positive integers into an integer.", "code": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result", "input_output_pairs": [{"input": "tuple_to_int((1, 2, 3))", "output": "123", "ops": "=="}, {"input": "tuple_to_int((4, 5, 6))", "output": "456", "ops": "=="}, {"input": "tuple_to_int((5, 6, 7))", "output": "567", "ops": "=="}], "context": "", "instance_idx": 490, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 11, "description": "Write a python function to remove first and last occurrence of a given character from the string.", "code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s", "input_output_pairs": [{"input": "remove_Occ('hello', 'l')", "output": "'heo'", "ops": "=="}, {"input": "remove_Occ('abcda', 'a')", "output": "'bcd'", "ops": "=="}, {"input": "remove_Occ('PHP', 'P')", "output": "'H'", "ops": "=="}, {"input": "remove_Occ('hellolloll', 'l')", "output": "'helollol'", "ops": "=="}, {"input": "remove_Occ('', 'l')", "output": "''", "ops": "=="}], "context": "", "instance_idx": 491, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 419, "description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "code": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "input_output_pairs": [{"input": "round_and_sum([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5])", "output": "243", "ops": "=="}, {"input": "round_and_sum([5, 2, 9, 24.3, 29])", "output": "345", "ops": "=="}, {"input": "round_and_sum([25.0, 56.7, 89.2])", "output": "513", "ops": "=="}], "context": "", "instance_idx": 492, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/134", "description": "Create a function that returns True if the last character\nof a given string is an alphabetical character and is not\na part of a word, and False otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e False\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e True\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e False\ncheck_if_last_char_is_a_letter(\"\") \u279e False", "code": "def check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False", "input_output_pairs": [{"input": "check_if_last_char_is_a_letter('apple')", "output": "False", "ops": "=="}, {"input": "check_if_last_char_is_a_letter('apple pi e')", "output": "True", "ops": "=="}, {"input": "check_if_last_char_is_a_letter('eeeee')", "output": "False", "ops": "=="}, {"input": "check_if_last_char_is_a_letter('A')", "output": "True", "ops": "=="}, {"input": "check_if_last_char_is_a_letter('Pumpkin pie ')", "output": "False", "ops": "=="}, {"input": "check_if_last_char_is_a_letter('Pumpkin pie 1')", "output": "False", "ops": "=="}, {"input": "check_if_last_char_is_a_letter('')", "output": "False", "ops": "=="}, {"input": "check_if_last_char_is_a_letter('eeeee e ')", "output": "False", "ops": "=="}, {"input": "check_if_last_char_is_a_letter('apple pie')", "output": "False", "ops": "=="}, {"input": "check_if_last_char_is_a_letter('apple pi e ')", "output": "False", "ops": "=="}], "context": "", "instance_idx": 493, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/108", "description": "Write a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3", "code": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "input_output_pairs": [{"input": "count_nums([])", "output": "0", "ops": "=="}, {"input": "count_nums([-1, -2, 0])", "output": "0", "ops": "=="}, {"input": "count_nums([1, 1, 2, -2, 3, 4, 5])", "output": "6", "ops": "=="}, {"input": "count_nums([1, 6, 9, -6, 0, 1, 5])", "output": "5", "ops": "=="}, {"input": "count_nums([1, 100, 98, -7, 1, -1])", "output": "4", "ops": "=="}, {"input": "count_nums([12, 23, 34, -45, -56, 0])", "output": "5", "ops": "=="}, {"input": "count_nums([-0, 1 ** 0])", "output": "1", "ops": "=="}, {"input": "count_nums([1])", "output": "1", "ops": "=="}], "context": "", "instance_idx": 494, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 495, "description": "Write a function to remove lowercase substrings from a given string by using regex.", "code": "def remove_lowercase(str1):\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\n  result =  remove_lower(str1)\n  return (result)", "input_output_pairs": [{"input": "remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')", "output": "'KDALOOOHLAJSI'", "ops": "=="}, {"input": "remove_lowercase('ProducTnamEstreAmIngMediAplAYer')", "output": "'PTEAIMAAY'", "ops": "=="}, {"input": "remove_lowercase('maNufacTuredbYSheZenTechNolOGIes')", "output": "'NTYSZTNOGI'", "ops": "=="}], "context": "import re", "instance_idx": 495, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 108, "description": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "code": "def merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)", "input_output_pairs": [{"input": "merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, \n    154], [24, 26, 54, 48])", "output": "[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "ops": "=="}, {"input": "merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])", "output": "[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]", "ops": "=="}, {"input": "merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14,\n    65, 75, 25, 58], [12, 74, 9, 50, 61, 41])", "output": "[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58,\n    61, 65, 74, 75, 85]", "ops": "=="}], "context": "import heapq", "instance_idx": 496, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/18", "description": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3", "code": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times", "input_output_pairs": [{"input": "how_many_times('', 'x')", "output": "0", "ops": "=="}, {"input": "how_many_times('xyxyxyx', 'x')", "output": "4", "ops": "=="}, {"input": "how_many_times('cacacacac', 'cac')", "output": "4", "ops": "=="}, {"input": "how_many_times('john doe', 'john')", "output": "1", "ops": "=="}], "context": "", "instance_idx": 497, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/157", "description": "Given the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False", "code": "def right_angle_triangle(a, b, c):\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "input_output_pairs": [{"input": "right_angle_triangle(3, 4, 5)", "output": "True", "ops": "=="}, {"input": "right_angle_triangle(1, 2, 3)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(10, 6, 8)", "output": "True", "ops": "=="}, {"input": "right_angle_triangle(2, 2, 2)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(7, 24, 25)", "output": "True", "ops": "=="}, {"input": "right_angle_triangle(10, 5, 7)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(5, 12, 13)", "output": "True", "ops": "=="}, {"input": "right_angle_triangle(15, 8, 17)", "output": "True", "ops": "=="}, {"input": "right_angle_triangle(48, 55, 73)", "output": "True", "ops": "=="}, {"input": "right_angle_triangle(1, 1, 1)", "output": "False", "ops": "=="}, {"input": "right_angle_triangle(2, 2, 10)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 499, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 130, "description": "Write a function to find the item with maximum frequency in a given list.", "code": "def max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result", "input_output_pairs": [{"input": "max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]\n    )", "output": "(2, 5)", "ops": "=="}, {"input": "max_occurrences([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18])", "output": "(8, 2)", "ops": "=="}, {"input": "max_occurrences([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])", "output": "(20, 3)", "ops": "=="}], "context": "from collections import defaultdict", "instance_idx": 500, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 56, "description": "Write a python function to check if a given number is one less than twice its reverse.", "code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)", "input_output_pairs": [{"input": "check(70)", "output": "False", "ops": "=="}, {"input": "check(23)", "output": "False", "ops": "=="}, {"input": "check(73)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 501, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/60", "description": "sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1", "code": "def sum_to_n(n: int):\n    return sum(range(n + 1))", "input_output_pairs": [{"input": "sum_to_n(1)", "output": "1", "ops": "=="}, {"input": "sum_to_n(6)", "output": "21", "ops": "=="}, {"input": "sum_to_n(11)", "output": "66", "ops": "=="}, {"input": "sum_to_n(30)", "output": "465", "ops": "=="}, {"input": "sum_to_n(100)", "output": "5050", "ops": "=="}], "context": "", "instance_idx": 502, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/153", "description": "You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters\nin the extension's name, the strength is given by the fraction CAP - SM.\nYou should find the strongest extension and return a string in this\nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n(its strength is -1).\nExample:\nfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'", "code": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans", "input_output_pairs": [{"input": "Strongest_Extension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])", "output": "'Watashi.eIGHt8OKe'", "ops": "=="}, {"input": "Strongest_Extension('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])", "output": "'Boku123.YEs.WeCaNe'", "ops": "=="}, {"input": "Strongest_Extension('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__',\n    '123NoooneB321'])", "output": "'__YESIMHERE.NuLl__'", "ops": "=="}, {"input": "Strongest_Extension('K', ['Ta', 'TAR', 't234An', 'cosSo'])", "output": "'K.TAR'", "ops": "=="}, {"input": "Strongest_Extension('__HAHA', ['Tab', '123', '781345', '-_-'])", "output": "'__HAHA.123'", "ops": "=="}, {"input": "Strongest_Extension('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'])", "output": "'YameRore.okIWILL123'", "ops": "=="}, {"input": "Strongest_Extension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW'])", "output": "'finNNalLLly.WoW'", "ops": "=="}, {"input": "Strongest_Extension('_', ['Bb', '91245'])", "output": "'_.Bb'", "ops": "=="}, {"input": "Strongest_Extension('Sp', ['671235', 'Bb'])", "output": "'Sp.671235'", "ops": "=="}], "context": "", "instance_idx": 503, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 408, "description": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "code": "def k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs", "input_output_pairs": [{"input": "k_smallest_pairs([1, 3, 7], [2, 4, 6], 2)", "output": "[[1, 2], [1, 4]]", "ops": "=="}, {"input": "k_smallest_pairs([1, 3, 7], [2, 4, 6], 1)", "output": "[[1, 2]]", "ops": "=="}, {"input": "k_smallest_pairs([1, 3, 7], [2, 4, 6], 7)", "output": "[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]", "ops": "=="}], "context": "import heapq", "instance_idx": 504, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 216, "description": "Write a function to check if a nested list is a subset of another nested list.", "code": "def check_subset_list(list1, list2): \n    l1, l2 = list1[0], list2[0] \n    exist = True\n    for i in list2: \n        if i not in list1: \n            exist = False\n    return exist", "input_output_pairs": [{"input": "check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18,\n    23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])", "output": "False", "ops": "=="}, {"input": "check_subset_list([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])", "output": "True", "ops": "=="}, {"input": "check_subset_list([['a', 'b'], ['e'], ['c', 'd']], [['g']])", "output": "False", "ops": "=="}], "context": "", "instance_idx": 505, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 176, "description": "Write a function to find the perimeter of a triangle.", "code": "def perimeter_triangle(a,b,c):\n  perimeter=a+b+c\n  return perimeter", "input_output_pairs": [{"input": "perimeter_triangle(10, 20, 30)", "output": "60", "ops": "=="}, {"input": "perimeter_triangle(3, 4, 5)", "output": "12", "ops": "=="}, {"input": "perimeter_triangle(25, 35, 45)", "output": "105", "ops": "=="}], "context": "", "instance_idx": 506, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 198, "description": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "code": "def largest_triangle(a,b): \n    if (a < 0 or b < 0): \n        return -1 \n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \n    return area", "input_output_pairs": [{"input": "largest_triangle(4, 2)", "output": "10.392304845413264", "ops": "=="}, {"input": "largest_triangle(5, 7)", "output": "4.639421805988064", "ops": "=="}, {"input": "largest_triangle(9, 1)", "output": "105.2220865598093", "ops": "=="}], "context": "import math", "instance_idx": 507, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 160, "description": "Write a function to find x and y that satisfies ax + by = n.", "code": "def solution (a, b, n): \n\ti = 0\n\twhile i * a <= n: \n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (\"x = \",i ,\", y = \", \n\t\t\tint((n - (i * a)) / b)) \n\t\t\treturn 0\n\t\ti = i + 1\n\treturn (\"No solution\")", "input_output_pairs": [{"input": "solution(2, 3, 7)", "output": "('x = ', 2, ', y = ', 1)", "ops": "=="}, {"input": "solution(4, 2, 7)", "output": "'No solution'", "ops": "=="}, {"input": "solution(1, 13, 17)", "output": "('x = ', 4, ', y = ', 1)", "ops": "=="}], "context": "", "instance_idx": 508, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/75", "description": "Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5", "code": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False", "input_output_pairs": [{"input": "is_multiply_prime(5)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(30)", "output": "True", "ops": "=="}, {"input": "is_multiply_prime(8)", "output": "True", "ops": "=="}, {"input": "is_multiply_prime(10)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(125)", "output": "True", "ops": "=="}, {"input": "is_multiply_prime(3 * 5 * 7)", "output": "True", "ops": "=="}, {"input": "is_multiply_prime(3 * 6 * 7)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(9 * 9 * 9)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(11 * 9 * 9)", "output": "False", "ops": "=="}, {"input": "is_multiply_prime(11 * 13 * 7)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 509, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 59, "description": "Write a function to find the nth octagonal number.", "code": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n", "input_output_pairs": [{"input": "is_octagonal(5)", "output": "65", "ops": "=="}, {"input": "is_octagonal(10)", "output": "280", "ops": "=="}, {"input": "is_octagonal(15)", "output": "645", "ops": "=="}], "context": "", "instance_idx": 510, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 486, "description": "Write a function to compute binomial probability for the given number.", "code": "def nCr(n, r): \n\tif (r > n / 2): \n\t\tr = n - r \n\tanswer = 1 \n\tfor i in range(1, r + 1): \n\t\tanswer *= (n - r + i) \n\t\tanswer /= i \n\treturn answer \ndef binomial_probability(n, k, p): \n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k))", "input_output_pairs": [{"input": "binomial_probability(10, 5, 1.0 / 3)", "output": "0.13656454808718185", "ops": "=="}, {"input": "binomial_probability(11, 6, 2.0 / 4)", "output": "0.2255859375", "ops": "=="}, {"input": "binomial_probability(12, 7, 3.0 / 5)", "output": "0.227030335488", "ops": "=="}], "context": "", "instance_idx": 511, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/8", "description": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)", "code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value", "input_output_pairs": [{"input": "sum_product([])", "output": "(0, 1)", "ops": "=="}, {"input": "sum_product([1, 1, 1])", "output": "(3, 1)", "ops": "=="}, {"input": "sum_product([100, 0])", "output": "(100, 0)", "ops": "=="}, {"input": "sum_product([3, 5, 7])", "output": "(3 + 5 + 7, 3 * 5 * 7)", "ops": "=="}, {"input": "sum_product([10])", "output": "(10, 10)", "ops": "=="}], "context": "from typing import List, Tuple", "instance_idx": 512, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 330, "description": "Write a function to find all three, four, five characters long words in the given string by using regex.", "code": "def find_char(text):\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))", "input_output_pairs": [{"input": "find_char('For the four consumer complaints contact manager AKR reddy')", "output": "['For', 'the', 'four', 'AKR', 'reddy']", "ops": "=="}, {"input": "find_char('Certain service are subject to change MSR')", "output": "['are', 'MSR']", "ops": "=="}, {"input": "find_char('Third party legal desclaimers')", "output": "['Third', 'party', 'legal']", "ops": "=="}], "context": "import re", "instance_idx": 513, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 466, "description": "Write a function to find the peak element in the given array.", "code": "def find_peak_util(arr, low, high, n): \n\tmid = low + (high - low)/2\n\tmid = int(mid) \n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \n\t\treturn mid \n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \n\t\treturn find_peak_util(arr, low, (mid - 1), n) \n\telse: \n\t\treturn find_peak_util(arr, (mid + 1), high, n) \ndef find_peak(arr, n): \n\treturn find_peak_util(arr, 0, n - 1, n)", "input_output_pairs": [{"input": "find_peak([1, 3, 20, 4, 1, 0], 6)", "output": "2", "ops": "=="}, {"input": "find_peak([2, 3, 4, 5, 6], 5)", "output": "4", "ops": "=="}, {"input": "find_peak([8, 9, 11, 12, 14, 15], 6)", "output": "5", "ops": "=="}], "context": "", "instance_idx": 514, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 302, "description": "Write a python function to find the most significant bit number which is also a set bit.", "code": "def set_Bit_Number(n): \n    if (n == 0): \n        return 0; \n    msb = 0; \n    n = int(n / 2); \n    while (n > 0): \n        n = int(n / 2); \n        msb += 1; \n    return (1 << msb)", "input_output_pairs": [{"input": "set_Bit_Number(6)", "output": "4", "ops": "=="}, {"input": "set_Bit_Number(10)", "output": "8", "ops": "=="}, {"input": "set_Bit_Number(18)", "output": "16", "ops": "=="}], "context": "", "instance_idx": 515, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 280, "description": "Write a function to search an element in the given array by using sequential search.", "code": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos", "input_output_pairs": [{"input": "sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)", "output": "(True, 3)", "ops": "=="}, {"input": "sequential_search([12, 32, 45, 62, 35, 47, 44, 61], 61)", "output": "(True, 7)", "ops": "=="}, {"input": "sequential_search([9, 10, 17, 19, 22, 39, 48, 56], 48)", "output": "(True, 6)", "ops": "=="}], "context": "", "instance_idx": 516, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/78", "description": "You have been tasked to write a function that receives\na hexadecimal number as a string and counts the number of hexadecimal\ndigits that are primes (prime number, or a prime, is a natural number\ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7,\nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string,\nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.", "code": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total", "input_output_pairs": [{"input": "hex_key('AB')", "output": "1", "ops": "=="}, {"input": "hex_key('1077E')", "output": "2", "ops": "=="}, {"input": "hex_key('ABED1A33')", "output": "4", "ops": "=="}, {"input": "hex_key('2020')", "output": "2", "ops": "=="}, {"input": "hex_key('123456789ABCDEF0')", "output": "6", "ops": "=="}, {"input": "hex_key('112233445566778899AABBCCDDEEFF00')", "output": "12", "ops": "=="}, {"input": "hex_key([])", "output": "0", "ops": "=="}], "context": "", "instance_idx": 517, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/35", "description": "Return maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123", "code": "def max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m", "input_output_pairs": [{"input": "max_element([1, 2, 3])", "output": "3", "ops": "=="}, {"input": "max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])", "output": "124", "ops": "=="}], "context": "", "instance_idx": 518, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 164, "description": "Write a python function to check whether the sum of divisors are same or not.", "code": "def divSum(n): \n    sum = 1; \n    i = 2; \n    while(i * i <= n): \n        if (n % i == 0): \n            sum = (sum + i +math.floor(n / i)); \n        i += 1; \n    return sum; \ndef areEquivalent(num1,num2): \n    return divSum(num1) == divSum(num2);", "input_output_pairs": [{"input": "areEquivalent(36, 57)", "output": "False", "ops": "=="}, {"input": "areEquivalent(2, 4)", "output": "False", "ops": "=="}, {"input": "areEquivalent(23, 47)", "output": "True", "ops": "=="}], "context": "import math", "instance_idx": 519, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 172, "description": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "code": "def count_occurance(s):\n  count=0\n  for i in range(len(s)):\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\n      count = count + 1\n  return count", "input_output_pairs": [{"input": "count_occurance('letstdlenstdporstd')", "output": "3", "ops": "=="}, {"input": "count_occurance('truststdsolensporsd')", "output": "1", "ops": "=="}, {"input": "count_occurance('makestdsostdworthit')", "output": "2", "ops": "=="}], "context": "", "instance_idx": 520, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 72, "description": "Write a python function to check whether the given number can be represented as difference of two squares or not.", "code": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False", "input_output_pairs": [{"input": "dif_Square(5)", "output": "True", "ops": "=="}, {"input": "dif_Square(10)", "output": "False", "ops": "=="}, {"input": "dif_Square(15)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 521, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 298, "description": "Write a function to find the nested list elements which are present in another list.", "code": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result", "input_output_pairs": [{"input": "intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n    [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])", "output": "[[12], [7, 11], [1, 5, 8]]", "ops": "=="}, {"input": "intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])", "output": "[[], []]", "ops": "=="}, {"input": "intersection_nested_lists(['john', 'amal', 'joel', 'george'], [['john'], [\n    'jack', 'john', 'mary'], ['howard', 'john'], ['jude']])", "output": "[['john'], ['john'], ['john'], []]", "ops": "=="}], "context": "", "instance_idx": 522, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/68", "description": "\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\n\nExample 1:\nInput: [4,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\nInput: [1,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 3:\nInput: []\nOutput: []\n\nExample 4:\nInput: [5, 0, 3, 0, 4, 2]\nOutput: [0, 1]\nExplanation: 0 is the smallest value, but  there are two zeros,\nso we will choose the first zero, which has the smallest index.\n\nConstraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value", "code": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]", "input_output_pairs": [{"input": "pluck([4, 2, 3])", "output": "[2, 1]", "ops": "=="}, {"input": "pluck([1, 2, 3])", "output": "[2, 1]", "ops": "=="}, {"input": "pluck([])", "output": "[]", "ops": "=="}, {"input": "pluck([5, 0, 3, 0, 4, 2])", "output": "[0, 1]", "ops": "=="}, {"input": "pluck([1, 2, 3, 0, 5, 3])", "output": "[0, 3]", "ops": "=="}, {"input": "pluck([5, 4, 8, 4, 8])", "output": "[4, 1]", "ops": "=="}, {"input": "pluck([7, 6, 7, 1])", "output": "[6, 1]", "ops": "=="}, {"input": "pluck([7, 9, 7, 1])", "output": "[]", "ops": "=="}], "context": "", "instance_idx": 523, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 190, "description": "Write a python function to count the number of integral co-ordinates that lie inside a square.", "code": "def count_Intgral_Points(x1,y1,x2,y2): \n    return ((y2 - y1 - 1) * (x2 - x1 - 1))", "input_output_pairs": [{"input": "count_Intgral_Points(1, 1, 4, 4)", "output": "4", "ops": "=="}, {"input": "count_Intgral_Points(1, 2, 1, 2)", "output": "1", "ops": "=="}, {"input": "count_Intgral_Points(4, 2, 6, 4)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 524, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 113, "description": "Write a function to check if a string represents an integer or not.", "code": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False", "input_output_pairs": [{"input": "check_integer('python')", "output": "False", "ops": "=="}, {"input": "check_integer('1')", "output": "True", "ops": "=="}, {"input": "check_integer('12345')", "output": "True", "ops": "=="}], "context": "", "instance_idx": 525, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/72", "description": "Write a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly([1, 2], 5) \u279e False\n# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly([3, 2, 3], 1) \u279e False\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly([3, 2, 3], 9) \u279e True\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly([3], 5) \u279e True\n# 3 is less than the maximum possible weight, and it's balanced.", "code": "def will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True", "input_output_pairs": [{"input": "will_it_fly([3, 2, 3], 9)", "output": "True", "ops": "is"}, {"input": "will_it_fly([1, 2], 5)", "output": "False", "ops": "is"}, {"input": "will_it_fly([3], 5)", "output": "True", "ops": "is"}, {"input": "will_it_fly([3, 2, 3], 1)", "output": "False", "ops": "is"}, {"input": "will_it_fly([1, 2, 3], 6)", "output": "False", "ops": "is"}, {"input": "will_it_fly([5], 5)", "output": "True", "ops": "is"}], "context": "", "instance_idx": 526, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 256, "description": "Write a python function to count the number of prime numbers less than a given non-negative number.", "code": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr", "input_output_pairs": [{"input": "count_Primes_nums(5)", "output": "2", "ops": "=="}, {"input": "count_Primes_nums(10)", "output": "4", "ops": "=="}, {"input": "count_Primes_nums(100)", "output": "25", "ops": "=="}], "context": "", "instance_idx": 527, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 288, "description": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "code": "def modular_inverse(arr, N, P):\n\tcurrent_element = 0\n\tfor i in range(0, N):\n\t\tif ((arr[i] * arr[i]) % P == 1):\n\t\t\tcurrent_element = current_element + 1\n\treturn current_element", "input_output_pairs": [{"input": "modular_inverse([1, 6, 4, 5], 4, 7)", "output": "2", "ops": "=="}, {"input": "modular_inverse([1, 3, 8, 12, 12], 5, 13)", "output": "3", "ops": "=="}, {"input": "modular_inverse([2, 3, 4, 5], 4, 6)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 528, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 15, "description": "Write a function to split a string at lowercase letters.", "code": "def split_lowerstring(text):\n return (re.findall('[a-z][^a-z]*', text))", "input_output_pairs": [{"input": "split_lowerstring('AbCd')", "output": "['bC', 'd']", "ops": "=="}, {"input": "split_lowerstring('Python')", "output": "['y', 't', 'h', 'o', 'n']", "ops": "=="}, {"input": "split_lowerstring('Programming')", "output": "['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "ops": "=="}], "context": "import re", "instance_idx": 529, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 464, "description": "Write a function to check if all values are same in a dictionary.", "code": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result", "input_output_pairs": [{"input": "check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12,\n    'Pierre Cox': 12}, 10)", "output": "False", "ops": "=="}, {"input": "check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12,\n    'Pierre Cox': 12}, 12)", "output": "True", "ops": "=="}, {"input": "check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12,\n    'Pierre Cox': 12}, 5)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 530, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 18, "description": "Write a function to remove characters from the first string which are present in the second string.", "code": "def str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind])", "input_output_pairs": [{"input": "remove_dirty_chars('probasscurve', 'pros')", "output": "'bacuve'", "ops": "=="}, {"input": "remove_dirty_chars('digitalindia', 'talent')", "output": "'digiidi'", "ops": "=="}, {"input": "remove_dirty_chars('exoticmiles', 'toxic')", "output": "'emles'", "ops": "=="}], "context": "NO_OF_CHARS = 256", "instance_idx": 531, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 86, "description": "Write a function to find nth centered hexagonal number.", "code": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1", "input_output_pairs": [{"input": "centered_hexagonal_number(10)", "output": "271", "ops": "=="}, {"input": "centered_hexagonal_number(2)", "output": "7", "ops": "=="}, {"input": "centered_hexagonal_number(9)", "output": "217", "ops": "=="}], "context": "", "instance_idx": 532, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 73, "description": "Write a function to split the given string with multiple delimiters by using regex.", "code": "def multiple_split(text):\n  return (re.split('; |, |\\*|\\n',text))", "input_output_pairs": [{"input": "multiple_split(\"\"\"Forces of the \ndarkness*are coming into the play.\"\"\")", "output": "['Forces of the ', 'darkness', 'are coming into the play.']", "ops": "=="}, {"input": "multiple_split(\n    \"\"\"Mi Box runs on the \n Latest android*which has google assistance and chromecast.\"\"\"\n    )", "output": "['Mi Box runs on the ', ' Latest android',\n    'which has google assistance and chromecast.']", "ops": "=="}, {"input": "multiple_split(\n    \"\"\"Certain services\nare subjected to change*over the seperate subscriptions.\"\"\"\n    )", "output": "['Certain services', 'are subjected to change',\n    'over the seperate subscriptions.']", "ops": "=="}], "context": "import re", "instance_idx": 533, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 34, "description": "Write a python function to find the missing number in a sorted array.", "code": "def find_missing(ar,N): \n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n            return (mid + 1)  \n        elif (ar[mid] != mid + 1): \n            r = mid - 1 \n        else: \n            l = mid + 1\n    return (-1)", "input_output_pairs": [{"input": "find_missing([1, 2, 3, 5], 4)", "output": "4", "ops": "=="}, {"input": "find_missing([1, 3, 4, 5], 4)", "output": "2", "ops": "=="}, {"input": "find_missing([1, 2, 3, 5, 6, 7], 5)", "output": "4", "ops": "=="}], "context": "", "instance_idx": 534, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/160", "description": "Given two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\n\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.", "code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)", "input_output_pairs": [{"input": "do_algebra(['**', '*', '+'], [2, 3, 4, 5])", "output": "37", "ops": "=="}, {"input": "do_algebra(['+', '*', '-'], [2, 3, 4, 5])", "output": "9", "ops": "=="}, {"input": "do_algebra(['//', '*'], [7, 3, 4])", "output": "8", "ops": "=="}], "context": "", "instance_idx": 535, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 94, "description": "Write a function to extract the index minimum value record from the given tuples.", "code": "def index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res)", "input_output_pairs": [{"input": "index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])", "output": "'Varsha'", "ops": "=="}, {"input": "index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)])", "output": "'Dawood'", "ops": "=="}, {"input": "index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)])", "output": "'Ayesha'", "ops": "=="}], "context": "from operator import itemgetter", "instance_idx": 536, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 186, "description": "Write a function to search some literals strings in a string by using regex.", "code": "def check_literals(text, patterns):\n  for pattern in patterns:\n    if re.search(pattern,  text):\n        return ('Matched!')\n    else:\n        return ('Not Matched!')", "input_output_pairs": [{"input": "check_literals('The quick brown fox jumps over the lazy dog.', ['fox'])", "output": "'Matched!'", "ops": "=="}, {"input": "check_literals('The quick brown fox jumps over the lazy dog.', ['horse'])", "output": "'Not Matched!'", "ops": "=="}, {"input": "check_literals('The quick brown fox jumps over the lazy dog.', ['lazy'])", "output": "'Matched!'", "ops": "=="}], "context": "import re", "instance_idx": 537, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 182, "description": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "code": "def find_character(string):\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \n  lowercase_characters = re.findall(r\"[a-z]\", string) \n  numerical_characters = re.findall(r\"[0-9]\", string) \n  special_characters = re.findall(r\"[, .!?]\", string) \n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "input_output_pairs": [{"input": "find_character('ThisIsGeeksforGeeks')", "output": "(['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o',\n    'r', 'e', 'e', 'k', 's'], [], [])", "ops": "=="}, {"input": "find_character('Hithere2')", "output": "(['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])", "ops": "=="}, {"input": "find_character('HeyFolks32')", "output": "(['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])", "ops": "=="}], "context": "import re", "instance_idx": 538, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 236, "description": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "code": "def No_of_Triangle(N,K):\n    if (N < K):\n        return -1;\n    else:\n        Tri_up = 0;\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\n        Tri_down = 0;\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\n        return Tri_up + Tri_down;", "input_output_pairs": [{"input": "No_of_Triangle(4, 2)", "output": "7", "ops": "=="}, {"input": "No_of_Triangle(4, 3)", "output": "3", "ops": "=="}, {"input": "No_of_Triangle(1, 3)", "output": "-1", "ops": "=="}], "context": "", "instance_idx": 539, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 29, "description": "Write a python function to find the element occurring odd number of times.", "code": "def get_Odd_Occurrence(arr,arr_size):   \n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n                count+=1     \n        if (count % 2 != 0): \n            return arr[i]     \n    return -1", "input_output_pairs": [{"input": "get_Odd_Occurrence([1, 2, 3, 1, 2, 3, 1], 7)", "output": "1", "ops": "=="}, {"input": "get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 3], 7)", "output": "3", "ops": "=="}, {"input": "get_Odd_Occurrence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)", "output": "5", "ops": "=="}], "context": "", "instance_idx": 540, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 470, "description": "Write a function to find the pairwise addition of the elements of the given tuples.", "code": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)", "input_output_pairs": [{"input": "add_pairwise((1, 5, 7, 8, 10))", "output": "(6, 12, 15, 18)", "ops": "=="}, {"input": "add_pairwise((2, 6, 8, 9, 11))", "output": "(8, 14, 17, 20)", "ops": "=="}, {"input": "add_pairwise((3, 7, 9, 10, 12))", "output": "(10, 16, 19, 22)", "ops": "=="}], "context": "", "instance_idx": 541, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 340, "description": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.", "code": "def sum_three_smallest_nums(lst):\n\treturn sum(sorted([x for x in lst if x > 0])[:3])", "input_output_pairs": [{"input": "sum_three_smallest_nums([10, 20, 30, 40, 50, 60, 7])", "output": "37", "ops": "=="}, {"input": "sum_three_smallest_nums([1, 2, 3, 4, 5])", "output": "6", "ops": "=="}, {"input": "sum_three_smallest_nums([0, 1, 2, 3, 4, 5])", "output": "6", "ops": "=="}], "context": "", "instance_idx": 542, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 2, "description": "Write a function to find the similar elements from the given two tuple lists.", "code": "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res)", "input_output_pairs": [{"input": "similar_elements((3, 4, 5, 6), (5, 7, 4, 10))", "output": "(4, 5)", "ops": "=="}, {"input": "similar_elements((1, 2, 3, 4), (5, 4, 3, 7))", "output": "(3, 4)", "ops": "=="}, {"input": "similar_elements((11, 12, 14, 13), (17, 15, 14, 13))", "output": "(13, 14)", "ops": "=="}], "context": "", "instance_idx": 543, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 355, "description": "Write a python function to count the number of rectangles in a circle of radius r.", "code": "def count_Rectangles(radius):  \n    rectangles = 0 \n    diameter = 2 * radius \n    diameterSquare = diameter * diameter \n    for a in range(1, 2 * radius):  \n        for b in range(1, 2 * radius): \n            diagnalLengthSquare = (a * a +  b * b)  \n            if (diagnalLengthSquare <= diameterSquare) : \n                rectangles += 1\n    return rectangles", "input_output_pairs": [{"input": "count_Rectangles(2)", "output": "8", "ops": "=="}, {"input": "count_Rectangles(1)", "output": "1", "ops": "=="}, {"input": "count_Rectangles(0)", "output": "0", "ops": "=="}], "context": "", "instance_idx": 544, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/98", "description": "Given a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 0", "code": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count", "input_output_pairs": [{"input": "count_upper('aBCdEf')", "output": "1", "ops": "=="}, {"input": "count_upper('abcdefg')", "output": "0", "ops": "=="}, {"input": "count_upper('dBBE')", "output": "0", "ops": "=="}, {"input": "count_upper('B')", "output": "0", "ops": "=="}, {"input": "count_upper('U')", "output": "1", "ops": "=="}, {"input": "count_upper('')", "output": "0", "ops": "=="}, {"input": "count_upper('EEEE')", "output": "2", "ops": "=="}], "context": "", "instance_idx": 545, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 366, "description": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.", "code": "def adjacent_num_product(list_nums):\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "input_output_pairs": [{"input": "adjacent_num_product([1, 2, 3, 4, 5, 6])", "output": "30", "ops": "=="}, {"input": "adjacent_num_product([1, 2, 3, 4, 5])", "output": "20", "ops": "=="}, {"input": "adjacent_num_product([2, 3])", "output": "6", "ops": "=="}], "context": "", "instance_idx": 546, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 497, "description": "Write a function to find the surface area of a cone.", "code": "def surfacearea_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  SA = math.pi * r * (r + l)\n  return SA", "input_output_pairs": [{"input": "surfacearea_cone(5, 12)", "output": "282.7433388230814", "ops": "=="}, {"input": "surfacearea_cone(10, 15)", "output": "880.5179353159282", "ops": "=="}, {"input": "surfacearea_cone(19, 17)", "output": "2655.923961165254", "ops": "=="}], "context": "import math", "instance_idx": 547, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 424, "description": "Write a function to extract only the rear index element of each string in the given tuple.", "code": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res)", "input_output_pairs": [{"input": "extract_rear(('Mers', 'for', 'Vers'))", "output": "['s', 'r', 's']", "ops": "=="}, {"input": "extract_rear(('Avenge', 'for', 'People'))", "output": "['e', 'r', 'e']", "ops": "=="}, {"input": "extract_rear(('Gotta', 'get', 'go'))", "output": "['a', 't', 'o']", "ops": "=="}], "context": "", "instance_idx": 548, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/16", "description": "Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4", "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "input_output_pairs": [{"input": "count_distinct_characters('')", "output": "0", "ops": "=="}, {"input": "count_distinct_characters('abcde')", "output": "5", "ops": "=="}, {"input": "count_distinct_characters('abcde' + 'cade' + 'CADE')", "output": "5", "ops": "=="}, {"input": "count_distinct_characters('aaaaAAAAaaaa')", "output": "1", "ops": "=="}, {"input": "count_distinct_characters('Jerry jERRY JeRRRY')", "output": "5", "ops": "=="}], "context": "", "instance_idx": 549, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/74", "description": "Write a function that accepts two lists of strings and returns the list that has\ntotal number of chars in the all strings of the list less than the other list.\n\nif the two lists have the same number of chars, return the first list.\n\nExamples\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']", "code": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2", "input_output_pairs": [{"input": "total_match([], [])", "output": "[]", "ops": "=="}, {"input": "total_match(['hi', 'admin'], ['hi', 'hi'])", "output": "['hi', 'hi']", "ops": "=="}, {"input": "total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])", "output": "['hi', 'admin']", "ops": "=="}, {"input": "total_match(['4'], ['1', '2', '3', '4', '5'])", "output": "['4']", "ops": "=="}, {"input": "total_match(['hi', 'admin'], ['hI', 'Hi'])", "output": "['hI', 'Hi']", "ops": "=="}, {"input": "total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])", "output": "['hI', 'hi', 'hi']", "ops": "=="}, {"input": "total_match(['hi', 'admin'], ['hI', 'hi', 'hii'])", "output": "['hi', 'admin']", "ops": "=="}, {"input": "total_match([], ['this'])", "output": "[]", "ops": "=="}, {"input": "total_match(['this'], [])", "output": "[]", "ops": "=="}], "context": "", "instance_idx": 550, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 374, "description": "Write a function to print all permutations of a given string including duplicates.", "code": "def permute_string(str):\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list", "input_output_pairs": [{"input": "permute_string('ab')", "output": "['ab', 'ba']", "ops": "=="}, {"input": "permute_string('abc')", "output": "['abc', 'bac', 'bca', 'acb', 'cab', 'cba']", "ops": "=="}, {"input": "permute_string('abcd')", "output": "['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb',\n    'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc',\n    'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']", "ops": "=="}], "context": "", "instance_idx": 551, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 493, "description": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "code": "def calculate_polygons(startx, starty, endx, endy, radius):\n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl   \n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            p2x = startx\n            p2y = starty + (3 * p)\n            p3x = startx + b\n            p3y = starty + h\n            p4x = startx + w\n            p4y = starty + (3 * p)\n            p5x = startx + w\n            p5y = starty + p\n            p6x = startx + b\n            p6y = starty\n            poly = [\n                (p1x, p1y),\n                (p2x, p2y),\n                (p3x, p3y),\n                (p4x, p4y),\n                (p5x, p5y),\n                (p6x, p6y),\n                (p1x, p1y)]\n            polygons.append(poly)\n            counter += 1\n            startx += w\n        starty += yoffset\n        row += 1\n    return polygons", "input_output_pairs": [{"input": "calculate_polygons(1, 1, 4, 4, 3)", "output": "[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (\n    1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -\n    5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -\n    4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -\n    0.7320508075688767), (7.0, -4.196152422706632), (4.0, -\n    5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -\n    4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -\n    0.7320508075688767), (13.0, -4.196152422706632), (10.0, -\n    5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, \n    1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632\n    ), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -\n    0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, \n    1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632),\n    (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -\n    0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, \n    6.196152422706632), (-5.0, 9.660254037844387), (-2.0, \n    11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632),\n    (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, \n    6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264),\n    (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, \n    4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632\n    ), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, \n    9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755\n    ), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, \n    14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102),\n    (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, \n    11.392304845413264)], [(4.0, 11.392304845413264), (4.0, \n    14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102\n    ), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, \n    11.392304845413264)]]", "ops": "=="}, {"input": "calculate_polygons(5, 4, 7, 9, 8)", "output": "[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (\n    5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -\n    14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -\n    9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -\n    0.6188021535170058), (21.0, -9.856406460551018), (13.0, -\n    14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -\n    9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -\n    0.6188021535170058), (37.0, -9.856406460551018), (29.0, -\n    14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, \n    13.237604307034012), (5.0, 17.856406460551018), (13.0, \n    13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, \n    4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, \n    17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -\n    0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0,\n    27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503\n    ), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, \n    17.856406460551018)], [(5.0, 17.856406460551018), (5.0, \n    27.09401076758503), (13.0, 31.712812921102035), (21.0, \n    27.09401076758503), (21.0, 17.856406460551018), (13.0, \n    13.237604307034012), (5.0, 17.856406460551018)], [(21.0, \n    17.856406460551018), (21.0, 27.09401076758503), (29.0, \n    31.712812921102035), (37.0, 27.09401076758503), (37.0, \n    17.856406460551018), (29.0, 13.237604307034012), (21.0, \n    17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, \n    40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605\n    ), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, \n    31.712812921102035)], [(13.0, 31.712812921102035), (13.0, \n    40.95041722813605), (21.0, 45.569219381653056), (29.0, \n    40.95041722813605), (29.0, 31.712812921102035), (21.0, \n    27.09401076758503), (13.0, 31.712812921102035)]]", "ops": "=="}, {"input": "calculate_polygons(9, 6, 4, 3, 2)", "output": "[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, \n    4.8452994616207485), (9.0, 2.5358983848622456), (7.0, \n    1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, \n    8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503),\n    (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]", "ops": "=="}], "context": "import math", "instance_idx": 552, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 58, "description": "Write a python function to check whether the given two integers have opposite sign or not.", "code": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0);", "input_output_pairs": [{"input": "opposite_Signs(1, -2)", "output": "True", "ops": "=="}, {"input": "opposite_Signs(3, 2)", "output": "False", "ops": "=="}, {"input": "opposite_Signs(-10, -10)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 553, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 437, "description": "Write a function to remove odd characters in a string.", "code": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2", "input_output_pairs": [{"input": "remove_odd('python')", "output": "'yhn'", "ops": "=="}, {"input": "remove_odd('program')", "output": "'rga'", "ops": "=="}, {"input": "remove_odd('language')", "output": "'agae'", "ops": "=="}], "context": "", "instance_idx": 554, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 211, "description": "Write a python function to count numbers whose oth and nth bits are set.", "code": "def count_Num(n): \n    if (n == 1): \n        return 1\n    count = pow(2,n - 2) \n    return count", "input_output_pairs": [{"input": "count_Num(2)", "output": "1", "ops": "=="}, {"input": "count_Num(3)", "output": "2", "ops": "=="}, {"input": "count_Num(1)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 555, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/31", "description": "Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nFalse\n>>> is_prime(101)\nTrue\n>>> is_prime(11)\nTrue\n>>> is_prime(13441)\nTrue\n>>> is_prime(61)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(1)\nFalse", "code": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True", "input_output_pairs": [{"input": "is_prime(6)", "output": "False", "ops": "=="}, {"input": "is_prime(101)", "output": "True", "ops": "=="}, {"input": "is_prime(11)", "output": "True", "ops": "=="}, {"input": "is_prime(13441)", "output": "True", "ops": "=="}, {"input": "is_prime(61)", "output": "True", "ops": "=="}, {"input": "is_prime(4)", "output": "False", "ops": "=="}, {"input": "is_prime(1)", "output": "False", "ops": "=="}, {"input": "is_prime(5)", "output": "True", "ops": "=="}, {"input": "is_prime(11)", "output": "True", "ops": "=="}, {"input": "is_prime(17)", "output": "True", "ops": "=="}, {"input": "is_prime(5 * 17)", "output": "False", "ops": "=="}, {"input": "is_prime(11 * 7)", "output": "False", "ops": "=="}, {"input": "is_prime(13441 * 19)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 556, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 133, "description": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "code": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)", "input_output_pairs": [{"input": "sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])", "output": "-32", "ops": "=="}, {"input": "sum_negativenum([10, 15, -14, 13, -18, 12, -20])", "output": "-52", "ops": "=="}, {"input": "sum_negativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])", "output": "-894", "ops": "=="}], "context": "", "instance_idx": 557, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/24", "description": "For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5", "code": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i", "input_output_pairs": [{"input": "largest_divisor(3)", "output": "1", "ops": "=="}, {"input": "largest_divisor(7)", "output": "1", "ops": "=="}, {"input": "largest_divisor(10)", "output": "5", "ops": "=="}, {"input": "largest_divisor(100)", "output": "50", "ops": "=="}, {"input": "largest_divisor(49)", "output": "7", "ops": "=="}], "context": "", "instance_idx": 558, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 393, "description": "Write a function to find the list with maximum length using lambda function.", "code": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)", "input_output_pairs": [{"input": "max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])", "output": "(3, [13, 15, 17])", "ops": "=="}, {"input": "max_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])", "output": "(5, [1, 2, 3, 4, 5])", "ops": "=="}, {"input": "max_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]])", "output": "(4, [6, 7, 8, 9])", "ops": "=="}], "context": "", "instance_idx": 559, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 6, "description": "Write a python function to check whether the two numbers differ at one bit position only or not.", "code": "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)", "input_output_pairs": [{"input": "differ_At_One_Bit_Pos(13, 9)", "output": "True", "ops": "=="}, {"input": "differ_At_One_Bit_Pos(15, 8)", "output": "False", "ops": "=="}, {"input": "differ_At_One_Bit_Pos(2, 4)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 560, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 276, "description": "Write a function to find the volume of a cylinder.", "code": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume", "input_output_pairs": [{"input": "volume_cylinder(10, 5)", "output": "1570.7500000000002", "ops": "=="}, {"input": "volume_cylinder(4, 5)", "output": "251.32000000000002", "ops": "=="}, {"input": "volume_cylinder(4, 10)", "output": "502.64000000000004", "ops": "=="}], "context": "", "instance_idx": 561, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/122", "description": "Given a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\nInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\nOutput: 24 # sum of 21 + 3\n\nConstraints:\n1. 1 <= len(arr) <= 100\n2. 1 <= k <= len(arr)", "code": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)", "input_output_pairs": [{"input": "add_elements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3)", "output": "-4", "ops": "=="}, {"input": "add_elements([111, 121, 3, 4000, 5, 6], 2)", "output": "0", "ops": "=="}, {"input": "add_elements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)", "output": "125", "ops": "=="}, {"input": "add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)", "output": "24", "ops": "=="}, {"input": "add_elements([1], 1)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 562, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 362, "description": "Write a python function to find the item with maximum occurrences in a given list.", "code": "def max_occurrences(nums):\n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result", "input_output_pairs": [{"input": "max_occurrences([1, 2, 3, 1, 2, 3, 12, 4, 2])", "output": "2", "ops": "=="}, {"input": "max_occurrences([1, 2, 6, 7, 0, 1, 0, 1, 0])", "output": "1", "ops": "=="}, {"input": "max_occurrences([1, 2, 3, 1, 2, 4, 1])", "output": "1", "ops": "=="}], "context": "", "instance_idx": 563, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 353, "description": "Write a function to remove a specified column from a given nested list.", "code": "def remove_column(list1, n):\n   for i in list1: \n    del i[n] \n   return list1", "input_output_pairs": [{"input": "remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)", "output": "[[2, 3], [4, 5], [1, 1]]", "ops": "=="}, {"input": "remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)", "output": "[[1, 2], [-2, 4], [1, -1]]", "ops": "=="}, {"input": "remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)", "output": "[[3], [7], [3], [15, 17], [7], [11]]", "ops": "=="}], "context": "", "instance_idx": 564, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/26", "description": "From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]", "code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]", "input_output_pairs": [{"input": "remove_duplicates([])", "output": "[]", "ops": "=="}, {"input": "remove_duplicates([1, 2, 3, 4])", "output": "[1, 2, 3, 4]", "ops": "=="}, {"input": "remove_duplicates([1, 2, 3, 2, 4, 3, 5])", "output": "[1, 4, 5]", "ops": "=="}], "context": "from typing import List", "instance_idx": 565, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 415, "description": "Write a python function to find a pair with highest product from a given array of integers.", "code": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y", "input_output_pairs": [{"input": "max_Product([1, 2, 3, 4, 7, 0, 8, 4])", "output": "(7, 8)", "ops": "=="}, {"input": "max_Product([0, -1, -2, -4, 5, 0, -6])", "output": "(-4, -6)", "ops": "=="}, {"input": "max_Product([1, 2, 3])", "output": "(2, 3)", "ops": "=="}], "context": "", "instance_idx": 566, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 238, "description": "Write a python function to count number of non-empty substrings of a given string.", "code": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2);", "input_output_pairs": [{"input": "number_of_substrings('abc')", "output": "6", "ops": "=="}, {"input": "number_of_substrings('abcd')", "output": "10", "ops": "=="}, {"input": "number_of_substrings('abcde')", "output": "15", "ops": "=="}], "context": "", "instance_idx": 567, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/95", "description": "Given a dictionary, return True if all keys are strings in lower\ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty.\nExamples:\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.", "code": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\"", "input_output_pairs": [{"input": "check_dict_case({'p': 'pineapple', 'b': 'banana'})", "output": "True", "ops": "=="}, {"input": "check_dict_case({'p': 'pineapple', 'A': 'banana', 'B': 'banana'})", "output": "False", "ops": "=="}, {"input": "check_dict_case({'p': 'pineapple', (5): 'banana', 'a': 'apple'})", "output": "False", "ops": "=="}, {"input": "check_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'})", "output": "False", "ops": "=="}, {"input": "check_dict_case({'STATE': 'NC', 'ZIP': '12345'})", "output": "True", "ops": "=="}, {"input": "check_dict_case({'fruit': 'Orange', 'taste': 'Sweet'})", "output": "True", "ops": "=="}, {"input": "check_dict_case({})", "output": "False", "ops": "=="}], "context": "", "instance_idx": 568, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/54", "description": "Check if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>> same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\nFalse\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse", "code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "input_output_pairs": [{"input": "same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')", "output": "True", "ops": "=="}, {"input": "same_chars('abcd', 'dddddddabc')", "output": "True", "ops": "=="}, {"input": "same_chars('dddddddabc', 'abcd')", "output": "True", "ops": "=="}, {"input": "same_chars('eabcd', 'dddddddabc')", "output": "False", "ops": "=="}, {"input": "same_chars('abcd', 'dddddddabcf')", "output": "False", "ops": "=="}, {"input": "same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')", "output": "False", "ops": "=="}, {"input": "same_chars('aabb', 'aaccc')", "output": "False", "ops": "=="}], "context": "", "instance_idx": 569, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 205, "description": "Write a function to find the inversions of tuple elements in the given tuple list.", "code": "def inversion_elements(test_tup):\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  return (res)", "input_output_pairs": [{"input": "inversion_elements((7, 8, 9, 1, 10, 7))", "output": "(-8, -9, -10, -2, -11, -8)", "ops": "=="}, {"input": "inversion_elements((2, 4, 5, 6, 1, 7))", "output": "(-3, -5, -6, -7, -2, -8)", "ops": "=="}, {"input": "inversion_elements((8, 9, 11, 14, 12, 13))", "output": "(-9, -10, -12, -15, -13, -14)", "ops": "=="}], "context": "", "instance_idx": 570, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 13, "description": "Write a function to count the most common words in a dictionary.", "code": "def count_common(words):\n  word_counts = Counter(words)\n  top_four = word_counts.most_common(4)\n  return (top_four)", "input_output_pairs": [{"input": "count_common(['red', 'green', 'black', 'pink', 'black', 'white', 'black',\n    'eyes', 'white', 'black', 'orange', 'pink', 'pink', 'red', 'red',\n    'white', 'orange', 'white', 'black', 'pink', 'green', 'green', 'pink',\n    'green', 'pink', 'white', 'orange', 'orange', 'red'])", "output": "[('pink', 6), ('black', 5), ('white', 5), ('red', 4)]", "ops": "=="}, {"input": "count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one',\n    'three', 'one'])", "output": "[('one', 4), ('two', 2), ('three', 2), ('four', 1)]", "ops": "=="}, {"input": "count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple',\n    'Netflix', 'Amazon'])", "output": "[('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]", "ops": "=="}], "context": "from collections import Counter", "instance_idx": 571, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 233, "description": "Write a function to find the lateral surface area of a cylinder.", "code": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface", "input_output_pairs": [{"input": "lateralsuface_cylinder(10, 5)", "output": "314.15000000000003", "ops": "=="}, {"input": "lateralsuface_cylinder(4, 5)", "output": "125.66000000000001", "ops": "=="}, {"input": "lateralsuface_cylinder(4, 10)", "output": "251.32000000000002", "ops": "=="}], "context": "", "instance_idx": 572, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/14", "description": "Return list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']", "code": "def all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result", "input_output_pairs": [{"input": "all_prefixes('')", "output": "[]", "ops": "=="}, {"input": "all_prefixes('asdfgh')", "output": "['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']", "ops": "=="}, {"input": "all_prefixes('WWW')", "output": "['W', 'WW', 'WWW']", "ops": "=="}], "context": "from typing import List", "instance_idx": 573, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 173, "description": "Write a function to remove everything except alphanumeric characters from a string.", "code": "def remove_splchar(text): \n pattern = re.compile('[\\W_]+')\n return (pattern.sub('', text))", "input_output_pairs": [{"input": "remove_splchar('python  @#&^%$*program123')", "output": "'pythonprogram123'", "ops": "=="}, {"input": "remove_splchar('python %^$@!^&*()  programming24%$^^()    language')", "output": "'pythonprogramming24language'", "ops": "=="}, {"input": "remove_splchar('python   ^%&^()(+_)(_^&67)                  program')", "output": "'python67program'", "ops": "=="}], "context": "import re", "instance_idx": 574, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 175, "description": "Write a function to verify validity of a string of parentheses.", "code": "def is_valid_parenthese( str1):\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for parenthese in str1:\n            if parenthese in pchar:\n                stack.append(parenthese)\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n                return False\n        return len(stack) == 0", "input_output_pairs": [{"input": "is_valid_parenthese('(){}[]')", "output": "True", "ops": "=="}, {"input": "is_valid_parenthese('()[{)}')", "output": "False", "ops": "=="}, {"input": "is_valid_parenthese('()')", "output": "True", "ops": "=="}], "context": "", "instance_idx": 575, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 404, "description": "Write a python function to find the minimum of two numbers.", "code": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b", "input_output_pairs": [{"input": "minimum(1, 2)", "output": "1", "ops": "=="}, {"input": "minimum(-5, -4)", "output": "-5", "ops": "=="}, {"input": "minimum(0, 0)", "output": "0", "ops": "=="}], "context": "", "instance_idx": 576, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 316, "description": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "code": "def find_last_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "input_output_pairs": [{"input": "find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)", "output": "3", "ops": "=="}, {"input": "find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)", "output": "9", "ops": "=="}, {"input": "find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)", "output": "6", "ops": "=="}], "context": "", "instance_idx": 577, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 45, "description": "Write a function to find the gcd of the given array elements.", "code": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef get_gcd(l):\n  num1 = l[0]\n  num2 = l[1]\n  gcd = find_gcd(num1, num2)\n  for i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\n  return gcd", "input_output_pairs": [{"input": "get_gcd([2, 4, 6, 8, 16])", "output": "2", "ops": "=="}, {"input": "get_gcd([1, 2, 3])", "output": "1", "ops": "=="}, {"input": "get_gcd([2, 4, 6, 8])", "output": "2", "ops": "=="}], "context": "", "instance_idx": 578, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 481, "description": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "code": "def is_subset_sum(set, n, sum):\n\tif (sum == 0):\n\t\treturn True\n\tif (n == 0):\n\t\treturn False\n\tif (set[n - 1] > sum):\n\t\treturn is_subset_sum(set, n - 1, sum)\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])", "input_output_pairs": [{"input": "is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9)", "output": "True", "ops": "=="}, {"input": "is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30)", "output": "False", "ops": "=="}, {"input": "is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 579, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 31, "description": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "code": "def func(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "input_output_pairs": [{"input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1,\n    4, 7, 8, 12]], 3)", "output": "[5, 7, 1]", "ops": "=="}, {"input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1,\n    4, 7, 8, 12]], 1)", "output": "[1]", "ops": "=="}, {"input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1,\n    4, 7, 8, 12]], 5)", "output": "[6, 5, 7, 8, 1]", "ops": "=="}], "context": "", "instance_idx": 580, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/1", "description": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']", "code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result", "input_output_pairs": [{"input": "separate_paren_groups('(()()) ((())) () ((())()())')", "output": "['(()())', '((()))', '()', '((())()())']", "ops": "=="}, {"input": "separate_paren_groups('() (()) ((())) (((())))')", "output": "['()', '(())', '((()))', '(((())))']", "ops": "=="}, {"input": "separate_paren_groups('(()(())((())))')", "output": "['(()(())((())))']", "ops": "=="}, {"input": "separate_paren_groups('( ) (( )) (( )( ))')", "output": "['()', '(())', '(()())']", "ops": "=="}], "context": "from typing import List", "instance_idx": 581, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 380, "description": "Write a function to generate a two-dimensional array.", "code": "def multi_list(rownum,colnum):\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n  for row in range(rownum):\n    for col in range(colnum):\n        multi_list[row][col]= row*col\n  return multi_list", "input_output_pairs": [{"input": "multi_list(3, 4)", "output": "[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]", "ops": "=="}, {"input": "multi_list(5, 7)", "output": "[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0,\n    3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]", "ops": "=="}, {"input": "multi_list(10, 15)", "output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8,\n    9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24,\n    26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, \n    4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, \n    20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36,\n    42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63,\n    70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96,\n    104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]", "ops": "=="}], "context": "", "instance_idx": 582, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/103", "description": "You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"", "code": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))", "input_output_pairs": [{"input": "rounded_avg(1, 5)", "output": "'0b11'", "ops": "=="}, {"input": "rounded_avg(7, 13)", "output": "'0b1010'", "ops": "=="}, {"input": "rounded_avg(964, 977)", "output": "'0b1111001010'", "ops": "=="}, {"input": "rounded_avg(996, 997)", "output": "'0b1111100100'", "ops": "=="}, {"input": "rounded_avg(560, 851)", "output": "'0b1011000010'", "ops": "=="}, {"input": "rounded_avg(185, 546)", "output": "'0b101101110'", "ops": "=="}, {"input": "rounded_avg(362, 496)", "output": "'0b110101101'", "ops": "=="}, {"input": "rounded_avg(350, 902)", "output": "'0b1001110010'", "ops": "=="}, {"input": "rounded_avg(197, 233)", "output": "'0b11010111'", "ops": "=="}, {"input": "rounded_avg(7, 5)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(5, 1)", "output": "-1", "ops": "=="}, {"input": "rounded_avg(5, 5)", "output": "'0b101'", "ops": "=="}], "context": "", "instance_idx": 583, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/33", "description": "This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]", "code": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l", "input_output_pairs": [{"input": "tuple(sort_third([1, 2, 3]))", "output": "tuple(sort_third([1, 2, 3]))", "ops": "=="}, {"input": "tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "output": "tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "ops": "=="}, {"input": "tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))", "output": "tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))", "ops": "=="}, {"input": "tuple(sort_third([5, 6, 3, 4, 8, 9, 2]))", "output": "tuple([2, 6, 3, 4, 8, 9, 5])", "ops": "=="}, {"input": "tuple(sort_third([5, 8, 3, 4, 6, 9, 2]))", "output": "tuple([2, 8, 3, 4, 6, 9, 5])", "ops": "=="}, {"input": "tuple(sort_third([5, 6, 9, 4, 8, 3, 2]))", "output": "tuple([2, 6, 9, 4, 8, 3, 5])", "ops": "=="}, {"input": "tuple(sort_third([5, 6, 3, 4, 8, 9, 2, 1]))", "output": "tuple([2, 6, 3, 4, 8, 9, 5, 1])", "ops": "=="}], "context": "", "instance_idx": 584, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 168, "description": "Write a python function to find the frequency of a number in a given array.", "code": "def frequency(a,x): \n    count = 0  \n    for i in a: \n        if i == x: count += 1\n    return count", "input_output_pairs": [{"input": "frequency([1, 2, 3], 4)", "output": "0", "ops": "=="}, {"input": "frequency([1, 2, 2, 3, 3, 3, 4], 3)", "output": "3", "ops": "=="}, {"input": "frequency([0, 1, 2, 3, 1, 2], 1)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 585, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 111, "description": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "code": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result", "input_output_pairs": [{"input": "common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8,\n    12, 15, 16, 18]])", "output": "[18, 12]", "ops": "=="}, {"input": "common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, \n    18, 23, 16]])", "output": "[5, 23]", "ops": "=="}, {"input": "common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])", "output": "[4]", "ops": "=="}], "context": "", "instance_idx": 586, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/20", "description": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)", "code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair", "input_output_pairs": [{"input": "find_closest_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])", "output": "(3.9, 4.0)", "ops": "=="}, {"input": "find_closest_elements([1.0, 2.0, 5.9, 4.0, 5.0])", "output": "(5.0, 5.9)", "ops": "=="}, {"input": "find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])", "output": "(2.0, 2.2)", "ops": "=="}, {"input": "find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])", "output": "(2.0, 2.0)", "ops": "=="}, {"input": "find_closest_elements([1.1, 2.2, 3.1, 4.1, 5.1])", "output": "(2.2, 3.1)", "ops": "=="}], "context": "from typing import List, Tuple", "instance_idx": 587, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 450, "description": "Write a function to extract specified size of strings from a give list of string values.", "code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result", "input_output_pairs": [{"input": "extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)", "output": "['practice', 'solution']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 6)", "output": "['Python']", "ops": "=="}, {"input": "extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 9)", "output": "['exercises']", "ops": "=="}], "context": "", "instance_idx": 588, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 89, "description": "Write a function to find the closest smaller number than n.", "code": "def closest_num(N):\n  return (N - 1)", "input_output_pairs": [{"input": "closest_num(11)", "output": "10", "ops": "=="}, {"input": "closest_num(7)", "output": "6", "ops": "=="}, {"input": "closest_num(12)", "output": "11", "ops": "=="}], "context": "", "instance_idx": 589, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 384, "description": "Write a python function to find the frequency of the smallest value in a given array.", "code": "def frequency_Of_Smallest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq", "input_output_pairs": [{"input": "frequency_Of_Smallest(5, [1, 2, 3, 4, 3])", "output": "1", "ops": "=="}, {"input": "frequency_Of_Smallest(7, [3, 1, 2, 5, 6, 2, 3])", "output": "1", "ops": "=="}, {"input": "frequency_Of_Smallest(7, [3, 3, 6, 3, 7, 4, 9])", "output": "3", "ops": "=="}], "context": "", "instance_idx": 590, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/65", "description": "Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"", "code": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]", "input_output_pairs": [{"input": "circular_shift(100, 2)", "output": "'001'", "ops": "=="}, {"input": "circular_shift(12, 2)", "output": "'12'", "ops": "=="}, {"input": "circular_shift(97, 8)", "output": "'79'", "ops": "=="}, {"input": "circular_shift(12, 1)", "output": "'21'", "ops": "=="}, {"input": "circular_shift(11, 101)", "output": "'11'", "ops": "=="}], "context": "", "instance_idx": 591, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 376, "description": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "code": "def remove_replica(test_tup):\n  temp = set()\n  res = tuple(ele if ele not in temp and not temp.add(ele) \n\t\t\t\telse 'MSP' for ele in test_tup)\n  return (res)", "input_output_pairs": [{"input": "remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))", "output": "(1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')", "ops": "=="}, {"input": "remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))", "output": "(2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')", "ops": "=="}, {"input": "remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7))", "output": "(2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')", "ops": "=="}], "context": "", "instance_idx": 592, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 178, "description": "Write a function to search some literals strings in a string.", "code": "def string_literals(patterns,text):\n  for pattern in patterns:\n     if re.search(pattern,  text):\n       return ('Matched!')\n     else:\n       return ('Not Matched!')", "input_output_pairs": [{"input": "string_literals(['language'], 'python language')", "output": "'Matched!'", "ops": "=="}, {"input": "string_literals(['program'], 'python language')", "output": "'Not Matched!'", "ops": "=="}, {"input": "string_literals(['python'], 'programming language')", "output": "'Not Matched!'", "ops": "=="}], "context": "import re", "instance_idx": 593, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 425, "description": "Write a function to count the number of sublists containing a particular element.", "code": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "input_output_pairs": [{"input": "count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)", "output": "3", "ops": "=="}, {"input": "count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C',\n    'D']], 'A')", "output": "3", "ops": "=="}, {"input": "count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C',\n    'D']], 'E')", "output": "1", "ops": "=="}], "context": "", "instance_idx": 594, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 414, "description": "Write a python function to check whether the value exists in a sequence or not.", "code": "def overlapping(list1,list2):  \n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n        d+=1\n    for i in range(0,c): \n        for j in range(0,d): \n            if(list1[i]==list2[j]): \n                return 1\n    return 0", "input_output_pairs": [{"input": "overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9])", "output": "False", "ops": "=="}, {"input": "overlapping([1, 2, 3], [4, 5, 6])", "output": "False", "ops": "=="}, {"input": "overlapping([1, 4, 5], [1, 4, 5])", "output": "True", "ops": "=="}], "context": "", "instance_idx": 595, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 249, "description": "Write a function to find the intersection of two arrays using lambda function.", "code": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result", "input_output_pairs": [{"input": "intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])", "output": "[1, 2, 8, 9]", "ops": "=="}, {"input": "intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])", "output": "[3, 5, 7, 9]", "ops": "=="}, {"input": "intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])", "output": "[10]", "ops": "=="}], "context": "", "instance_idx": 596, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 492, "description": "Write a function to search an element in the given array by using binary search.", "code": "def binary_search(item_list,item):\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t\tfound = True\n\t\telse:\n\t\t\tif item < item_list[mid]:\n\t\t\t\tlast = mid - 1\n\t\t\telse:\n\t\t\t\tfirst = mid + 1\t\n\treturn found", "input_output_pairs": [{"input": "binary_search([1, 2, 3, 5, 8], 6)", "output": "False", "ops": "=="}, {"input": "binary_search([7, 8, 9, 10, 13], 10)", "output": "True", "ops": "=="}, {"input": "binary_search([11, 13, 14, 19, 22, 36], 23)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 597, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 36, "description": "Write a python function to find the nth digit in the proper fraction of two given numbers.", "code": "def find_Nth_Digit(p,q,N) :  \n    while (N > 0) : \n        N -= 1;  \n        p *= 10;  \n        res = p // q;  \n        p %= q;  \n    return res;", "input_output_pairs": [{"input": "find_Nth_Digit(1, 2, 1)", "output": "5", "ops": "=="}, {"input": "find_Nth_Digit(3, 5, 1)", "output": "6", "ops": "=="}, {"input": "find_Nth_Digit(5, 6, 5)", "output": "3", "ops": "=="}], "context": "", "instance_idx": 598, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 403, "description": "Write a function to check if a url is valid or not using regex.", "code": "def is_valid_URL(str):\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False", "input_output_pairs": [{"input": "is_valid_URL('https://www.google.com')", "output": "True", "ops": "=="}, {"input": "is_valid_URL('https:/www.gmail.com')", "output": "False", "ops": "=="}, {"input": "is_valid_URL('https:// www.redit.com')", "output": "False", "ops": "=="}], "context": "import re", "instance_idx": 599, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/17", "description": "Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "code": "def parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]", "input_output_pairs": [{"input": "parse_music('')", "output": "[]", "ops": "=="}, {"input": "parse_music('o o o o')", "output": "[4, 4, 4, 4]", "ops": "=="}, {"input": "parse_music('.| .| .| .|')", "output": "[1, 1, 1, 1]", "ops": "=="}, {"input": "parse_music('o| o| .| .| o o o o')", "output": "[2, 2, 1, 1, 4, 4, 4, 4]", "ops": "=="}, {"input": "parse_music('o| .| o| .| o o| o o|')", "output": "[2, 1, 2, 1, 4, 2, 4, 2]", "ops": "=="}], "context": "from typing import List", "instance_idx": 600, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/11", "description": "Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'", "code": "def string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))", "input_output_pairs": [{"input": "string_xor('111000', '101010')", "output": "'010010'", "ops": "=="}, {"input": "string_xor('1', '1')", "output": "'0'", "ops": "=="}, {"input": "string_xor('0101', '0000')", "output": "'0101'", "ops": "=="}], "context": "from typing import List", "instance_idx": 601, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/105", "description": "Given an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\narr = [2, 1, 1, 4, 5, 8, 2, 3]\n-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\nreturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\nIf the array is empty, return an empty array:\narr = []\nreturn []\n\nIf the array has any strange number ignore it:\narr = [1, -1 , 55]\n-> sort arr -> [-1, 1, 55]\n-> reverse arr -> [55, 1, -1]\nreturn = ['One']", "code": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr", "input_output_pairs": [{"input": "by_length([2, 1, 1, 4, 5, 8, 2, 3])", "output": "['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']", "ops": "=="}, {"input": "by_length([])", "output": "[]", "ops": "=="}, {"input": "by_length([1, -1, 55])", "output": "['One']", "ops": "=="}, {"input": "by_length([1, -1, 3, 2])", "output": "['Three', 'Two', 'One']", "ops": "=="}, {"input": "by_length([9, 4, 8])", "output": "['Nine', 'Eight', 'Four']", "ops": "=="}], "context": "", "instance_idx": 602, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 291, "description": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "code": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]", "input_output_pairs": [{"input": "count_no_of_ways(2, 4)", "output": "16", "ops": "=="}, {"input": "count_no_of_ways(3, 2)", "output": "6", "ops": "=="}, {"input": "count_no_of_ways(4, 4)", "output": "228", "ops": "=="}], "context": "", "instance_idx": 603, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 311, "description": "Write a python function to set the left most unset bit.", "code": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos)))", "input_output_pairs": [{"input": "set_left_most_unset_bit(10)", "output": "14", "ops": "=="}, {"input": "set_left_most_unset_bit(12)", "output": "14", "ops": "=="}, {"input": "set_left_most_unset_bit(15)", "output": "15", "ops": "=="}], "context": "", "instance_idx": 604, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 195, "description": "Write a python function to find the first position of an element in a sorted array.", "code": "def first(arr,x,n): \n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res", "input_output_pairs": [{"input": "first([1, 2, 3, 4, 5, 6, 6], 6, 6)", "output": "5", "ops": "=="}, {"input": "first([1, 2, 2, 2, 3, 2, 2, 4, 2], 2, 9)", "output": "1", "ops": "=="}, {"input": "first([1, 2, 3], 1, 3)", "output": "0", "ops": "=="}], "context": "", "instance_idx": 605, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/19", "description": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'", "code": "def sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))", "input_output_pairs": [{"input": "sort_numbers('')", "output": "''", "ops": "=="}, {"input": "sort_numbers('three')", "output": "'three'", "ops": "=="}, {"input": "sort_numbers('three five nine')", "output": "'three five nine'", "ops": "=="}, {"input": "sort_numbers('five zero four seven nine eight')", "output": "'zero four five seven eight nine'", "ops": "=="}, {"input": "sort_numbers('six five four three two one zero')", "output": "'zero one two three four five six'", "ops": "=="}], "context": "from typing import List", "instance_idx": 606, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/133", "description": "You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6", "code": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared", "input_output_pairs": [{"input": "sum_squares([1, 2, 3])", "output": "14", "ops": "=="}, {"input": "sum_squares([1.0, 2, 3])", "output": "14", "ops": "=="}, {"input": "sum_squares([1, 3, 5, 7])", "output": "84", "ops": "=="}, {"input": "sum_squares([1.4, 4.2, 0])", "output": "29", "ops": "=="}, {"input": "sum_squares([-2.4, 1, 1])", "output": "6", "ops": "=="}, {"input": "sum_squares([100, 1, 15, 2])", "output": "10230", "ops": "=="}, {"input": "sum_squares([10000, 10000])", "output": "200000000", "ops": "=="}, {"input": "sum_squares([-1.4, 4.6, 6.3])", "output": "75", "ops": "=="}, {"input": "sum_squares([-1.4, 17.9, 18.9, 19.9])", "output": "1086", "ops": "=="}, {"input": "sum_squares([0])", "output": "0", "ops": "=="}, {"input": "sum_squares([-1])", "output": "1", "ops": "=="}, {"input": "sum_squares([-1, 1, 0])", "output": "2", "ops": "=="}], "context": "", "instance_idx": 607, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/12", "description": "Out of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'", "code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s", "input_output_pairs": [{"input": "longest([])", "output": "None", "ops": "=="}, {"input": "longest(['x', 'y', 'z'])", "output": "'x'", "ops": "=="}, {"input": "longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc'])", "output": "'zzzz'", "ops": "=="}], "context": "from typing import List, Optional", "instance_idx": 608, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 341, "description": "Write a function to convert the given set into tuples.", "code": "def set_to_tuple(s):\n  t = tuple(s)\n  return (t)", "input_output_pairs": [{"input": "set_to_tuple({1, 2, 3, 4, 5})", "output": "(1, 2, 3, 4, 5)", "ops": "=="}, {"input": "set_to_tuple({6, 7, 8, 9, 10, 11})", "output": "(6, 7, 8, 9, 10, 11)", "ops": "=="}, {"input": "set_to_tuple({12, 13, 14, 15, 16})", "output": "(12, 13, 14, 15, 16)", "ops": "=="}], "context": "", "instance_idx": 609, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 124, "description": "Write a function to get the angle of a complex number.", "code": "def angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle", "input_output_pairs": [{"input": "angle_complex(0, 1.0j)", "output": "1.5707963267948966", "ops": "=="}, {"input": "angle_complex(2, 1.0j)", "output": "0.4636476090008061", "ops": "=="}, {"input": "angle_complex(0, 2.0j)", "output": "1.5707963267948966", "ops": "=="}], "context": "import cmath", "instance_idx": 610, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 304, "description": "Write a python function to find element at a given index after number of rotations.", "code": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index]", "input_output_pairs": [{"input": "find_Element([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1)", "output": "3", "ops": "=="}, {"input": "find_Element([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2)", "output": "3", "ops": "=="}, {"input": "find_Element([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 611, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 191, "description": "Write a function to check whether the given month name contains 30 days or not.", "code": "def check_monthnumber(monthname3):\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n  else:\n    return False", "input_output_pairs": [{"input": "check_monthnumber('February')", "output": "False", "ops": "=="}, {"input": "check_monthnumber('June')", "output": "True", "ops": "=="}, {"input": "check_monthnumber('April')", "output": "True", "ops": "=="}], "context": "", "instance_idx": 612, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 103, "description": "Write a function to find eulerian number a(n, m).", "code": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "input_output_pairs": [{"input": "eulerian_num(3, 1)", "output": "4", "ops": "=="}, {"input": "eulerian_num(4, 1)", "output": "11", "ops": "=="}, {"input": "eulerian_num(5, 3)", "output": "26", "ops": "=="}], "context": "", "instance_idx": 613, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/73", "description": "Given an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change([1,2,3,5,4,7,9,6]) == 4\nsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmallest_change([1, 2, 3, 2, 1]) == 0", "code": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans", "input_output_pairs": [{"input": "smallest_change([1, 2, 3, 5, 4, 7, 9, 6])", "output": "4", "ops": "=="}, {"input": "smallest_change([1, 2, 3, 4, 3, 2, 2])", "output": "1", "ops": "=="}, {"input": "smallest_change([1, 4, 2])", "output": "1", "ops": "=="}, {"input": "smallest_change([1, 4, 4, 2])", "output": "1", "ops": "=="}, {"input": "smallest_change([1, 2, 3, 2, 1])", "output": "0", "ops": "=="}, {"input": "smallest_change([3, 1, 1, 3])", "output": "0", "ops": "=="}, {"input": "smallest_change([1])", "output": "0", "ops": "=="}, {"input": "smallest_change([0, 1])", "output": "1", "ops": "=="}], "context": "", "instance_idx": 614, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 427, "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "code": "def change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "input_output_pairs": [{"input": "change_date_format('2026-01-02')", "output": "'02-01-2026'", "ops": "=="}, {"input": "change_date_format('2020-11-13')", "output": "'13-11-2020'", "ops": "=="}, {"input": "change_date_format('2021-04-26')", "output": "'26-04-2021'", "ops": "=="}], "context": "import re", "instance_idx": 615, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/139", "description": "The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.", "code": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact", "input_output_pairs": [{"input": "special_factorial(4)", "output": "288", "ops": "=="}, {"input": "special_factorial(5)", "output": "34560", "ops": "=="}, {"input": "special_factorial(7)", "output": "125411328000", "ops": "=="}, {"input": "special_factorial(1)", "output": "1", "ops": "=="}], "context": "", "instance_idx": 616, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 297, "description": "Write a function to flatten a given nested list structure.", "code": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list", "input_output_pairs": [{"input": "flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])", "output": "[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "ops": "=="}, {"input": "flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])", "output": "[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]", "ops": "=="}, {"input": "flatten_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])", "output": "[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]", "ops": "=="}], "context": "", "instance_idx": 617, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 471, "description": "Write a python function to find remainder of array multiplication divided by n.", "code": "def find_remainder(arr, lens, n): \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n", "input_output_pairs": [{"input": "find_remainder([100, 10, 5, 25, 35, 14], 6, 11)", "output": "9", "ops": "=="}, {"input": "find_remainder([1, 1, 1], 3, 1)", "output": "0", "ops": "=="}, {"input": "find_remainder([1, 2, 1], 3, 2)", "output": "0", "ops": "=="}], "context": "", "instance_idx": 618, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 225, "description": "Write a python function to find the minimum element in a sorted and rotated array.", "code": "def find_Min(arr,low,high): \n    while (low < high): \n        mid = low + (high - low) // 2;   \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high];", "input_output_pairs": [{"input": "find_Min([1, 2, 3, 4, 5], 0, 4)", "output": "1", "ops": "=="}, {"input": "find_Min([4, 6, 8], 0, 2)", "output": "4", "ops": "=="}, {"input": "find_Min([2, 3, 5, 7, 9], 0, 4)", "output": "2", "ops": "=="}], "context": "", "instance_idx": 619, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 237, "description": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "code": "def check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res)", "input_output_pairs": [{"input": "check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])", "output": "{(1, 3): 2, (2, 5): 2, (3, 6): 1}", "ops": "=="}, {"input": "check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)])", "output": "{(2, 4): 2, (3, 6): 2, (4, 7): 1}", "ops": "=="}, {"input": "check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)])", "output": "{(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}", "ops": "=="}], "context": "from collections import Counter", "instance_idx": 620, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 354, "description": "Write a function to find t-nth term of arithemetic progression.", "code": "def tn_ap(a,n,d):\n  tn = a + (n - 1) * d\n  return tn", "input_output_pairs": [{"input": "tn_ap(1, 5, 2)", "output": "9", "ops": "=="}, {"input": "tn_ap(2, 6, 4)", "output": "22", "ops": "=="}, {"input": "tn_ap(1, 4, 5)", "output": "16", "ops": "=="}], "context": "", "instance_idx": 621, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 239, "description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "code": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]", "input_output_pairs": [{"input": "get_total_number_of_sequences(10, 4)", "output": "4", "ops": "=="}, {"input": "get_total_number_of_sequences(5, 2)", "output": "6", "ops": "=="}, {"input": "get_total_number_of_sequences(16, 3)", "output": "84", "ops": "=="}], "context": "", "instance_idx": 622, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/70", "description": "Given list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_list([]) == []", "code": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res", "input_output_pairs": [{"input": "strange_sort_list([1, 2, 3, 4])", "output": "[1, 4, 2, 3]", "ops": "=="}, {"input": "strange_sort_list([5, 6, 7, 8, 9])", "output": "[5, 9, 6, 8, 7]", "ops": "=="}, {"input": "strange_sort_list([1, 2, 3, 4, 5])", "output": "[1, 5, 2, 4, 3]", "ops": "=="}, {"input": "strange_sort_list([5, 6, 7, 8, 9, 1])", "output": "[1, 9, 5, 8, 6, 7]", "ops": "=="}, {"input": "strange_sort_list([5, 5, 5, 5])", "output": "[5, 5, 5, 5]", "ops": "=="}, {"input": "strange_sort_list([])", "output": "[]", "ops": "=="}, {"input": "strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8])", "output": "[1, 8, 2, 7, 3, 6, 4, 5]", "ops": "=="}, {"input": "strange_sort_list([0, 2, 2, 2, 5, 5, -5, -5])", "output": "[-5, 5, -5, 5, 0, 2, 2, 2]", "ops": "=="}, {"input": "strange_sort_list([111111])", "output": "[111111]", "ops": "=="}], "context": "", "instance_idx": 623, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/158", "description": "Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"", "code": "def find_max(words):\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "input_output_pairs": [{"input": "find_max(['name', 'of', 'string'])", "output": "'string'", "ops": "=="}, {"input": "find_max(['name', 'enam', 'game'])", "output": "'enam'", "ops": "=="}, {"input": "find_max(['aaaaaaa', 'bb', 'cc'])", "output": "'aaaaaaa'", "ops": "=="}, {"input": "find_max(['abc', 'cba'])", "output": "'abc'", "ops": "=="}, {"input": "find_max(['play', 'this', 'game', 'of', 'footbott'])", "output": "'footbott'", "ops": "=="}, {"input": "find_max(['we', 'are', 'gonna', 'rock'])", "output": "'gonna'", "ops": "=="}, {"input": "find_max(['we', 'are', 'a', 'mad', 'nation'])", "output": "'nation'", "ops": "=="}, {"input": "find_max(['this', 'is', 'a', 'prrk'])", "output": "'this'", "ops": "=="}, {"input": "find_max(['b'])", "output": "'b'", "ops": "=="}, {"input": "find_max(['play', 'play', 'play'])", "output": "'play'", "ops": "=="}], "context": "", "instance_idx": 624, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 449, "description": "Write a python function to check whether the triangle is valid or not if 3 points are given.", "code": "def check_Triangle(x1,y1,x2,y2,x3,y3): \n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \n    if a == 0: \n        return ('No') \n    else: \n        return ('Yes')", "input_output_pairs": [{"input": "check_Triangle(1, 5, 2, 5, 4, 6)", "output": "'Yes'", "ops": "=="}, {"input": "check_Triangle(1, 1, 1, 4, 1, 5)", "output": "'No'", "ops": "=="}, {"input": "check_Triangle(1, 1, 1, 1, 1, 1)", "output": "'No'", "ops": "=="}], "context": "", "instance_idx": 625, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 228, "description": "Write a python function to check whether all the bits are unset in the given range or not.", "code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False", "input_output_pairs": [{"input": "all_Bits_Set_In_The_Given_Range(4, 1, 2)", "output": "True", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(17, 2, 4)", "output": "True", "ops": "=="}, {"input": "all_Bits_Set_In_The_Given_Range(39, 4, 6)", "output": "False", "ops": "=="}], "context": "", "instance_idx": 626, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/41", "description": "Imagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.", "code": "def car_race_collision(n: int):\n    return n**2", "input_output_pairs": [{"input": "car_race_collision(2)", "output": "4", "ops": "=="}, {"input": "car_race_collision(3)", "output": "9", "ops": "=="}, {"input": "car_race_collision(4)", "output": "16", "ops": "=="}, {"input": "car_race_collision(8)", "output": "64", "ops": "=="}, {"input": "car_race_collision(10)", "output": "100", "ops": "=="}], "context": "", "instance_idx": 627, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 433, "description": "Write a function to check whether the entered number is greater than the elements of the given array.", "code": "def check_greater(arr, number):\n  arr.sort()\n  if number > arr[-1]:\n    return ('Yes, the entered number is greater than those in the array')\n  else:\n    return ('No, entered number is less than those in the array')", "input_output_pairs": [{"input": "check_greater([1, 2, 3, 4, 5], 4)", "output": "'No, entered number is less than those in the array'", "ops": "=="}, {"input": "check_greater([2, 3, 4, 5, 6], 8)", "output": "'Yes, the entered number is greater than those in the array'", "ops": "=="}, {"input": "check_greater([9, 7, 4, 8, 6, 1], 11)", "output": "'Yes, the entered number is greater than those in the array'", "ops": "=="}], "context": "", "instance_idx": 629, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 222, "description": "Write a function to check if all the elements in tuple have same data type or not.", "code": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res)", "input_output_pairs": [{"input": "check_type((5, 6, 7, 3, 5, 6))", "output": "True", "ops": "=="}, {"input": "check_type((1, 2, '4'))", "output": "False", "ops": "=="}, {"input": "check_type((3, 2, 1, 4, 5))", "output": "True", "ops": "=="}], "context": "", "instance_idx": 630, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 391, "description": "Write a function to convert more than one list to nested dictionary.", "code": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "input_output_pairs": [{"input": "convert_list_dictionary(['S001', 'S002', 'S003', 'S004'], ['Adina Park',\n    'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92])", "output": "[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {\n    'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "ops": "=="}, {"input": "convert_list_dictionary(['abc', 'def', 'ghi', 'jkl'], ['python', 'program',\n    'language', 'programs'], [100, 200, 300, 400])", "output": "[{'abc': {'python': 100}}, {'def': {'program': 200}}, {'ghi': {'language': \n    300}}, {'jkl': {'programs': 400}}]", "ops": "=="}, {"input": "convert_list_dictionary(['A1', 'A2', 'A3', 'A4'], ['java', 'C', 'C++',\n    'DBMS'], [10, 20, 30, 40])", "output": "[{'A1': {'java': 10}}, {'A2': {'C': 20}}, {'A3': {'C++': 30}}, {'A4': {\n    'DBMS': 40}}]", "ops": "=="}], "context": "", "instance_idx": 631, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 10, "description": "Write a function to get the n smallest items from a dataset.", "code": "def small_nnum(list1,n):\n  smallest=heapq.nsmallest(n,list1)\n  return smallest", "input_output_pairs": [{"input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)", "output": "[10, 20]", "ops": "=="}, {"input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)", "output": "[10, 20, 20, 40, 50]", "ops": "=="}, {"input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)", "output": "[10, 20, 20]", "ops": "=="}], "context": "import heapq", "instance_idx": 632, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/57", "description": "Return True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue", "code": "def monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False", "input_output_pairs": [{"input": "monotonic([1, 2, 4, 10])", "output": "True", "ops": "=="}, {"input": "monotonic([1, 2, 4, 20])", "output": "True", "ops": "=="}, {"input": "monotonic([1, 20, 4, 10])", "output": "False", "ops": "=="}, {"input": "monotonic([4, 1, 0, -10])", "output": "True", "ops": "=="}, {"input": "monotonic([4, 1, 1, 0])", "output": "True", "ops": "=="}, {"input": "monotonic([1, 2, 3, 2, 5, 60])", "output": "False", "ops": "=="}, {"input": "monotonic([1, 2, 3, 4, 5, 60])", "output": "True", "ops": "=="}, {"input": "monotonic([9, 9, 9, 9])", "output": "True", "ops": "=="}], "context": "", "instance_idx": 633, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 27, "description": "Write a python function to remove all digits from a list of strings.", "code": "def remove(list): \n    pattern = '[0-9]'\n    list = [re.sub(pattern, '', i) for i in list] \n    return list", "input_output_pairs": [{"input": "remove(['4words', '3letters', '4digits'])", "output": "['words', 'letters', 'digits']", "ops": "=="}, {"input": "remove(['28Jan', '12Jan', '11Jan'])", "output": "['Jan', 'Jan', 'Jan']", "ops": "=="}, {"input": "remove(['wonder1', 'wonder2', 'wonder3'])", "output": "['wonder', 'wonder', 'wonder']", "ops": "=="}], "context": "import re", "instance_idx": 634, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 23, "description": "Write a python function to find the maximum sum of elements of list in a list of lists.", "code": "def maximum_Sum(list1): \n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        for y in x: \n            sum+= y      \n        maxi = max(sum,maxi)     \n    return maxi", "input_output_pairs": [{"input": "maximum_Sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])", "output": "33", "ops": "=="}, {"input": "maximum_Sum([[0, 1, 1], [1, 1, 2], [3, 2, 1]])", "output": "6", "ops": "=="}, {"input": "maximum_Sum([[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]])", "output": "19", "ops": "=="}, {"input": "maximum_Sum([[0, -1, -1], [-1, -1, -2], [-3, -2, -1]])", "output": "-2", "ops": "=="}], "context": "", "instance_idx": 635, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 32, "description": "Write a python function to find the largest prime factor of a given number.", "code": "def max_Prime_Factors (n): \n    maxPrime = -1 \n    while n%2 == 0: \n        maxPrime = 2\n        n >>= 1    \n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i \n    if n > 2: \n        maxPrime = n  \n    return int(maxPrime)", "input_output_pairs": [{"input": "max_Prime_Factors(15)", "output": "5", "ops": "=="}, {"input": "max_Prime_Factors(6)", "output": "3", "ops": "=="}, {"input": "max_Prime_Factors(2)", "output": "2", "ops": "=="}], "context": "import math", "instance_idx": 636, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 326, "description": "Write a function to get the word with most number of occurrences in the given strings list.", "code": "def most_occurrences(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res))", "input_output_pairs": [{"input": "most_occurrences(['UTS is best for RTF', 'RTF love UTS', 'UTS is best'])", "output": "'UTS'", "ops": "=="}, {"input": "most_occurrences(['Its been a great year', 'this year is so worse',\n    'this year is okay'])", "output": "'year'", "ops": "=="}, {"input": "most_occurrences(['Families can be reunited', 'people can be reunited',\n    'Tasks can be achieved '])", "output": "'can'", "ops": "=="}], "context": "from collections import defaultdict", "instance_idx": 637, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 105, "description": "Write a python function to count true booleans in the given list.", "code": "def count(lst):   \n    return sum(lst)", "input_output_pairs": [{"input": "count([True, False, True])", "output": "2", "ops": "=="}, {"input": "count([False, False])", "output": "0", "ops": "=="}, {"input": "count([True, True, True])", "output": "3", "ops": "=="}], "context": "", "instance_idx": 638, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/109", "description": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing\nthe following operation on the given array:\nYou are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index.\n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball([3, 4, 5, 1, 2])==>True\nExplanation: By performin 2 right shift operations, non-decreasing order can\nbe achieved for the given array.\nmove_one_ball([3, 5, 4, 1, 2])==>False\nExplanation:It is not possible to get non-decreasing order for the given\narray by performing any number of right shift operations.", "code": "def move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True", "input_output_pairs": [{"input": "move_one_ball([3, 4, 5, 1, 2])", "output": "True", "ops": "=="}, {"input": "move_one_ball([3, 5, 10, 1, 2])", "output": "True", "ops": "=="}, {"input": "move_one_ball([4, 3, 1, 2])", "output": "False", "ops": "=="}, {"input": "move_one_ball([3, 5, 4, 1, 2])", "output": "False", "ops": "=="}, {"input": "move_one_ball([])", "output": "True", "ops": "=="}], "context": "", "instance_idx": 639, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 235, "description": "Write a python function to set all even bits of a given number.", "code": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res)", "input_output_pairs": [{"input": "even_bit_set_number(10)", "output": "10", "ops": "=="}, {"input": "even_bit_set_number(20)", "output": "30", "ops": "=="}, {"input": "even_bit_set_number(30)", "output": "30", "ops": "=="}], "context": "", "instance_idx": 640, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 273, "description": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "code": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res)", "input_output_pairs": [{"input": "substract_elements((10, 4, 5), (2, 5, 18))", "output": "(8, -1, -13)", "ops": "=="}, {"input": "substract_elements((11, 2, 3), (24, 45, 16))", "output": "(-13, -43, -13)", "ops": "=="}, {"input": "substract_elements((7, 18, 9), (10, 11, 12))", "output": "(-3, 7, -3)", "ops": "=="}], "context": "", "instance_idx": 641, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 457, "description": "Write a python function to find the sublist having minimum length.", "code": "def Find_Min(lst): \n    minList = min((x) for x in lst) \n    return minList", "input_output_pairs": [{"input": "Find_Min([[1], [1, 2], [1, 2, 3]])", "output": "[1]", "ops": "=="}, {"input": "Find_Min([[1, 1], [1, 1, 1], [1, 2, 7, 8]])", "output": "[1, 1]", "ops": "=="}, {"input": "Find_Min([['x'], ['x', 'y'], ['x', 'y', 'z']])", "output": "['x']", "ops": "=="}], "context": "", "instance_idx": 642, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 3, "description": "Write a python function to identify non-prime numbers.", "code": "def is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result", "input_output_pairs": [{"input": "is_not_prime(2)", "output": "False", "ops": "=="}, {"input": "is_not_prime(10)", "output": "True", "ops": "=="}, {"input": "is_not_prime(35)", "output": "True", "ops": "=="}], "context": "import math", "instance_idx": 643, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/126", "description": "Given a list of numbers, return whether or not they are sorted\nin ascending order. If list has more than 1 duplicate of the same\nnumber, return False. Assume no negative numbers and only integers.\n\nExamples\nis_sorted([5]) \u279e True\nis_sorted([1, 2, 3, 4, 5]) \u279e True\nis_sorted([1, 3, 2, 4, 5]) \u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279e False", "code": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False", "input_output_pairs": [{"input": "is_sorted([5])", "output": "True", "ops": "=="}, {"input": "is_sorted([1, 2, 3, 4, 5])", "output": "True", "ops": "=="}, {"input": "is_sorted([1, 3, 2, 4, 5])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 2, 3, 4, 5, 6])", "output": "True", "ops": "=="}, {"input": "is_sorted([1, 2, 3, 4, 5, 6, 7])", "output": "True", "ops": "=="}, {"input": "is_sorted([1, 3, 2, 4, 5, 6, 7])", "output": "False", "ops": "=="}, {"input": "is_sorted([])", "output": "True", "ops": "=="}, {"input": "is_sorted([1])", "output": "True", "ops": "=="}, {"input": "is_sorted([3, 2, 1])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 2, 2, 2, 3, 4])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 2, 3, 3, 3, 4])", "output": "False", "ops": "=="}, {"input": "is_sorted([1, 2, 2, 3, 3, 4])", "output": "True", "ops": "=="}, {"input": "is_sorted([1, 2, 3, 4])", "output": "True", "ops": "=="}], "context": "", "instance_idx": 644, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 444, "description": "Write a function to trim each tuple by k in the given tuple list.", "code": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res))", "input_output_pairs": [{"input": "trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1,\n    7)], 2)", "output": "'[(2,), (9,), (2,), (2,)]'", "ops": "=="}, {"input": "trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1,\n    7)], 1)", "output": "'[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'", "ops": "=="}, {"input": "trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7)], 1)", "output": "'[(8, 4), (8, 12), (1, 7), (6, 9)]'", "ops": "=="}], "context": "", "instance_idx": 645, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 400, "description": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "code": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)", "input_output_pairs": [{"input": "extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)])", "output": "3", "ops": "=="}, {"input": "extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)])", "output": "4", "ops": "=="}, {"input": "extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)])", "output": "4", "ops": "=="}], "context": "", "instance_idx": 646, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 30, "description": "Write a python function to count all the substrings starting and ending with same characters.", "code": "def check_Equality(s): \n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    for i in range(n): \n        for j in range(1,n-i+1):  \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result;", "input_output_pairs": [{"input": "count_Substring_With_Equal_Ends('abc')", "output": "3", "ops": "=="}, {"input": "count_Substring_With_Equal_Ends('abcda')", "output": "6", "ops": "=="}, {"input": "count_Substring_With_Equal_Ends('ab')", "output": "2", "ops": "=="}], "context": "", "instance_idx": 647, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 500, "description": "Write a function to concatenate all elements of the given list into a string.", "code": "def concatenate_elements(list):\n  ans = ' '\n  for i in list:\n    ans = ans+ ' '+i\n  return (ans)", "input_output_pairs": [{"input": "concatenate_elements(['hello', 'there', 'have', 'a', 'rocky', 'day'])", "output": "'  hello there have a rocky day'", "ops": "=="}, {"input": "concatenate_elements(['Hi', 'there', 'How', 'are', 'you'])", "output": "'  Hi there How are you'", "ops": "=="}, {"input": "concatenate_elements(['Part', 'of', 'the', 'journey', 'is', 'end'])", "output": "'  Part of the journey is end'", "ops": "=="}], "context": "", "instance_idx": 648, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 97, "description": "Write a function to find frequency count of list of lists.", "code": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data", "input_output_pairs": [{"input": "frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])", "output": "{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "ops": "=="}, {"input": "frequency_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])", "output": "{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}", "ops": "=="}, {"input": "frequency_lists([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])", "output": "{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1}", "ops": "=="}], "context": "", "instance_idx": 649, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 215, "description": "Write a function to decode a run-length encoded given list.", "code": "def decode_list(alist):\n    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n        else:\n            return [(g, [0])]\n    return [x for g in alist for x, R in aux(g) for i in R]", "input_output_pairs": [{"input": "decode_list([[2, 1], 2, 3, [2, 4], 5, 1])", "output": "[1, 1, 2, 3, 4, 4, 5, 1]", "ops": "=="}, {"input": "decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])", "output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "ops": "=="}, {"input": "decode_list(['p', 'y', 't', 'h', 'o', 'n'])", "output": "['p', 'y', 't', 'h', 'o', 'n']", "ops": "=="}], "context": "", "instance_idx": 650, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 389, "description": "Write a function to find the n'th lucas number.", "code": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2)", "input_output_pairs": [{"input": "find_lucas(9)", "output": "76", "ops": "=="}, {"input": "find_lucas(4)", "output": "7", "ops": "=="}, {"input": "find_lucas(3)", "output": "4", "ops": "=="}], "context": "", "instance_idx": 651, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 484, "description": "Write a function to remove the matching tuples from the given two tuples.", "code": "def remove_matching_tuple(test_list1, test_list2):\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  return (res)", "input_output_pairs": [{"input": "remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [(\n    'Hello', 'dude'), ('How', 'are')])", "output": "[('you', '?')]", "ops": "=="}, {"input": "remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')],\n    [('Journey', 'the'), ('is', 'end')])", "output": "[('Part', 'of'), ('the', 'journey'), ('is ', 'end')]", "ops": "=="}, {"input": "remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')],\n    [('a', 'long'), ('my', 'friend')])", "output": "[('Its', 'been'), ('day', 'without')]", "ops": "=="}], "context": "", "instance_idx": 652, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 461, "description": "Write a python function to count the upper case characters in a given string.", "code": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr", "input_output_pairs": [{"input": "upper_ctr('PYthon')", "output": "1", "ops": "=="}, {"input": "upper_ctr('BigData')", "output": "1", "ops": "=="}, {"input": "upper_ctr('program')", "output": "0", "ops": "=="}], "context": "", "instance_idx": 653, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/7", "description": "Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']", "code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]", "input_output_pairs": [{"input": "filter_by_substring([], 'john')", "output": "[]", "ops": "=="}, {"input": "filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')", "output": "['xxx', 'xxxAAA', 'xxx']", "ops": "=="}, {"input": "filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')", "output": "['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "ops": "=="}, {"input": "filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')", "output": "['grunt', 'prune']", "ops": "=="}], "context": "from typing import List", "instance_idx": 654, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 121, "description": "Write a function to find the triplet with sum of the given array", "code": "def check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\n           check_triplet(A, n - 1, sum, count)", "input_output_pairs": [{"input": "check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)", "output": "True", "ops": "=="}, {"input": "check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0)", "output": "False", "ops": "=="}, {"input": "check_triplet([10, 4, 2, 3, 5], 5, 15, 0)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 655, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 262, "description": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "code": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]", "input_output_pairs": [{"input": "split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3)", "output": "([1, 1, 2], [3, 4, 4, 5, 1])", "ops": "=="}, {"input": "split_two_parts(['a', 'b', 'c', 'd'], 2)", "output": "(['a', 'b'], ['c', 'd'])", "ops": "=="}, {"input": "split_two_parts(['p', 'y', 't', 'h', 'o', 'n'], 4)", "output": "(['p', 'y', 't', 'h'], ['o', 'n'])", "ops": "=="}], "context": "", "instance_idx": 656, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 65, "description": "Write a function of recursion list sum.", "code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "input_output_pairs": [{"input": "recursive_list_sum([1, 2, [3, 4], [5, 6]])", "output": "21", "ops": "=="}, {"input": "recursive_list_sum([7, 10, [15, 14], [19, 41]])", "output": "106", "ops": "=="}, {"input": "recursive_list_sum([10, 20, [30, 40], [50, 60]])", "output": "210", "ops": "=="}], "context": "", "instance_idx": 657, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/86", "description": "Write a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'", "code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "input_output_pairs": [{"input": "anti_shuffle('Hi')", "output": "'Hi'", "ops": "=="}, {"input": "anti_shuffle('hello')", "output": "'ehllo'", "ops": "=="}, {"input": "anti_shuffle('number')", "output": "'bemnru'", "ops": "=="}, {"input": "anti_shuffle('abcd')", "output": "'abcd'", "ops": "=="}, {"input": "anti_shuffle('Hello World!!!')", "output": "'Hello !!!Wdlor'", "ops": "=="}, {"input": "anti_shuffle('')", "output": "''", "ops": "=="}, {"input": "anti_shuffle('Hi. My name is Mister Robot. How are you?')", "output": "'.Hi My aemn is Meirst .Rboot How aer ?ouy'", "ops": "=="}], "context": "", "instance_idx": 658, "test_negations": [], "exclude_tests": []}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 138, "description": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "code": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True", "input_output_pairs": [{"input": "is_Sum_Of_Powers_Of_Two(10)", "output": "True", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(7)", "output": "False", "ops": "=="}, {"input": "is_Sum_Of_Powers_Of_Two(14)", "output": "True", "ops": "=="}], "context": "", "instance_idx": 659, "test_negations": [], "exclude_tests": []}
