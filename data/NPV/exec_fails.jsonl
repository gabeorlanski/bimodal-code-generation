{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/44", "description": "Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'", "code": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret", "input_output_pairs": [{"input": "change_base(8, 3)", "output": "'22'", "ops": "=="}, {"input": "change_base(9, 3)", "output": "'100'", "ops": "=="}, {"input": "change_base(234, 2)", "output": "'11101010'", "ops": "=="}, {"input": "change_base(16, 2)", "output": "'10000'", "ops": "=="}, {"input": "change_base(8, 2)", "output": "'1000'", "ops": "=="}, {"input": "change_base(7, 2)", "output": "'111'", "ops": "=="}, {"input": "change_base(x, x + 1)", "output": "str(x)", "ops": "=="}], "context": "", "instance_idx": 143}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/50", "description": "returns encoded string by shifting every character by 5 in the alphabet.", "code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "input_output_pairs": [{"input": "decode_shift(copy.deepcopy(encoded_str))", "output": "str", "ops": "=="}], "context": "", "instance_idx": 183}
{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 367, "description": "Write a function to check if a binary tree is balanced or not.", "code": "class Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\ndef get_height(root): \n\tif root is None: \n\t\treturn 0\n\treturn max(get_height(root.left), get_height(root.right)) + 1\ndef is_tree_balanced(root): \n\tif root is None: \n\t\treturn True\n\tlh = get_height(root.left) \n\trh = get_height(root.right) \n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \n\troot.left) is True and is_tree_balanced( root.right) is True: \n\t\treturn True\n\treturn False", "input_output_pairs": [{"input": "is_tree_balanced(root)", "output": "False", "ops": "=="}, {"input": "is_tree_balanced(root1)", "output": "True", "ops": "=="}, {"input": "is_tree_balanced(root2)", "output": "False", "ops": "=="}], "context": "root = Node(1) \nroot.left = Node(2) \nroot.right = Node(3) \nroot.left.left = Node(4) \nroot.left.right = Node(5) \nroot.left.left.left = Node(8) \nroot1 = Node(1) \nroot1.left = Node(2) \nroot1.right = Node(3) \nroot1.left.left = Node(4) \nroot1.left.right = Node(5) \nroot1.right.left = Node(6) \nroot1.left.left.left = Node(7)\nroot2 = Node(1) \nroot2.left = Node(2) \nroot2.right = Node(3) \nroot2.left.left = Node(4) \nroot2.left.right = Node(5)\nroot2.left.left.left = Node(7)", "instance_idx": 266}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/10", "description": "Test if given string is a palindrome", "code": "def is_palindrome(string: str) -> bool:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]", "input_output_pairs": [{"input": "make_palindrome('')", "output": "''", "ops": "=="}, {"input": "make_palindrome('x')", "output": "'x'", "ops": "=="}, {"input": "make_palindrome('xyz')", "output": "'xyzyx'", "ops": "=="}, {"input": "make_palindrome('xyx')", "output": "'xyx'", "ops": "=="}, {"input": "make_palindrome('jerry')", "output": "'jerryrrej'", "ops": "=="}], "context": "", "instance_idx": 364}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/32", "description": "Evaluates polynomial with coefficients xs at point x.\nreturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n", "code": "def poly(xs: list, x: float):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin", "input_output_pairs": [{"input": "coeff", "output": "0", "ops": "=="}, {"input": "math.fabs(poly(coeffs, solution))", "output": "0.0001", "ops": "<"}], "context": "import math", "instance_idx": 375}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/53", "description": "Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12", "code": "def add(x: int, y: int):\n    return x + y", "input_output_pairs": [{"input": "add(0, 1)", "output": "1", "ops": "=="}, {"input": "add(1, 0)", "output": "1", "ops": "=="}, {"input": "add(2, 3)", "output": "5", "ops": "=="}, {"input": "add(5, 7)", "output": "12", "ops": "=="}, {"input": "add(7, 5)", "output": "12", "ops": "=="}, {"input": "add(x, y)", "output": "x + y", "ops": "=="}], "context": "", "instance_idx": 498}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/151", "description": "Given a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\n\nIf the input list is empty, return 0.", "code": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])", "input_output_pairs": [{"input": "double_the_difference([])", "output": "0", "ops": "=="}, {"input": "double_the_difference([5, 4])", "output": "25", "ops": "=="}, {"input": "double_the_difference([0.1, 0.2, 0.3])", "output": "0", "ops": "=="}, {"input": "double_the_difference([-10, -20, -30])", "output": "0", "ops": "=="}, {"input": "double_the_difference([-1, -2, 8])", "output": "0", "ops": "=="}, {"input": "double_the_difference([0.2, 3, 5])", "output": "34", "ops": "=="}, {"input": "(i % 2)", "output": "0", "ops": "!="}, {"input": "i", "output": "0", "ops": ">"}, {"input": "double_the_difference(lst)", "output": "odd_sum", "ops": "=="}], "context": "", "instance_idx": 628}
