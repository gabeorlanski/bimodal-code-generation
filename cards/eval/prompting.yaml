starting_commands: templates/commands/sbatch_experiment.txt
experiments:
#  PromptingTitleCodeRepeat:
#    description: "Baseline Evaluation of the models finetuned on SO with Only Title and Repeating + Only Code Answer
#    + different prompting methods"
#    overrides:
#      ++device: 0
#      +processor: stackoverflow
#      ++raw_dump_path: data/dumps
#      is_checkpoint: true
#      objective: lm
#      ++tracking.tags:
#        - O2
#        - Prompting
#      ++evaluation:
#        num_generate_per_step: 200
#        remove_input_ids: False
#        seq_per_sample: 200
#      ++task.dump_name: python_${..__META__.ablation.name}
#      ++task.raw_dump_name: python
#      ++task.tensorized_name: python_${..__META__.ablation.name}
#      ++processor.params.repeat_prompt_each_answer: True
#      ++processor.params.repeat_body_for_each_answer: False
#      ++prompts:
#        file: templates/so_prompts.yaml
#        disable_prompts: True
#      ++processor.params.remove_modality: "NL"
#    ablations:
#      - Model:
#          Neo125M:
#            description: GPT Neo 125M
#            overrides:
#              ++model: 'EleutherAI/gpt-neo-125M'
#            step_overrides:
#              PreTrain:
#                ++training.batch_size: 32
#                ++training.gradient_accumulation_steps: 1
#          ParrotSmall:
#            description: CodeParrot Small
#            overrides:
#              ++model: 'lvwerra/codeparrot-small'
#            step_overrides:
#              PreTrain:
#                ++training.batch_size: 32
#                ++training.gradient_accumulation_steps: 1
#                ++training.gradient_checkpointing: True
#      - Prompts:
#          TitleMarker:
#            description: Add at "TITLE:" before the actual Title
#            hypothesis: Slight Improvement B/C of "TITLE"
#            prompts.pipe:
#              - title
#          Baseline:
#            description: Only the Title
#            hypothesis: Baseline
#            prompts.pipe:
#              - base
#          QualityAfter:
#            description: The Title followed by a quality adjective based on the answers score
#            hypothesis: Slight Improvement B/C of "TITLE"
#            prompts.pipe:
#              - quality_after
#          AnswerYearMonth:
#            description: The year and month of the answer followed by the title
#            hypothesis: 'Should improve results as it handles the issue of deprecated code,
#            should also be better than the question date'
#            prompts.pipe:
#              - answer_date_before
#            ++processor.params.date_format_str: "%Y-%m"
#          QuestionYearMonth:
#            description: The year and month of the question followed by the title
#            hypothesis: 'Should improve results as it handles the issue of deprecated code,
#            should also be worse than the answer date'
#            prompts.pipe:
#              - question_date_before
#            ++processor.params.date_format_str: "%Y-%m"
#    steps:
#      - name: PreTrain
#        description: Finetune on the SO Data
#        add_name: False
#        base: pretrain
#        group: SO
#        overrides:
#          ++task.buffer_size: 5000
#          tracking:
#            log_model: True
#          is_checkpoint: true
#          ++task.sequence_length: 1024
#          task: so
#      - name: FineTune
#        description: Finetune on the MBPP Data
#        base: greene_config
#        group: MBPP
#        overrides:
#          task: mbpp
#          ++is_checkpoint: True
#          ++model_path: outputs/so/${..__META__.PreTrain.name}/best_model
#          ++training:
#            batch_size: 32
#            gradient_accumulation_steps: 1
#            learning_rate: 5e-5
#          tracking:
#            log_model: False
#    command:
#      file: templates/commands/evaluate_model.txt
#      kwargs:
#        train_sbatch: train_single_gpu
#        pretrain_time: "12:00:00"
#        use_cds: True
#      fields:
#        - model_path
  QualityPrompt:
    description: "Testing Different Quality Adjectives for evaluating the model finetuned on SO with Only Title and Repeating + Only Code Answer + The quality prompt"
    overrides:
      ++device: 0
      +processor: stackoverflow
      ++raw_dump_path: data/dumps
      is_checkpoint: true
      objective: lm
      ++tracking.tags:
        - O2
        - Prompting
      ++evaluation:
        num_generate_per_step: 200
        remove_input_ids: False
        seq_per_sample: 200
      ++task.dump_name: python_${..__META__.ablation.name}
      ++task.raw_dump_name: python
      ++task.tensorized_name: python_${..__META__.ablation.name}
      ++processor.params.repeat_prompt_each_answer: True
      ++processor.params.repeat_body_for_each_answer: False
      ++prompts:
        file: templates/so_prompts.yaml
      ++processor.params.remove_modality: "NL"
    ablations:
      - Model:
          Neo125M:
            description: GPT Neo 125M
            overrides:
              ++model: 'EleutherAI/gpt-neo-125M'
            step_overrides:
              PreTrain:
                ++training.batch_size: 32
                ++training.gradient_accumulation_steps: 1
          ParrotSmall:
            description: CodeParrot Small
            overrides:
              ++model: 'lvwerra/codeparrot-small'
            step_overrides:
              PreTrain:
                ++training.batch_size: 32
                ++training.gradient_accumulation_steps: 1
                ++training.gradient_checkpointing: True
      - Prompts:
          QualityAfter:
            description: The Title followed by a quality adjective based on the answers score
            hypothesis: Slight Improvement B/C of "TITLE"
            prompts.pipe:
              - quality_after
      - QualityAdjective:
          Bad:
            description: The 'BAD' adjective, should in theory do the worst
            ++prompts.params:
              quality: BAD
          Worst:
            description: The 'WORST' adjective, should have no effect b/c it was not used in training
            ++prompts.params:
              quality: WORST
          Ok:
            description: The 'OK' adjective, should have minimal effect b/c is neutral
            ++prompts.params:
              quality: OK
          Good:
            description: The 'GOOD' adjective, should have slight performance improvement
            ++prompts.params:
              quality: GOOD
    steps:
      - name: PreTrain
        description: Finetune on the SO Data
        add_name: False
        base: pretrain
        group: SO
        overrides:
          ++task.buffer_size: 5000
          tracking:
            log_model: True
          is_checkpoint: true
          ++task.sequence_length: 1024
          task: so
      - name: FineTune
        description: Finetune on the MBPP Data
        base: greene_config
        group: MBPP
        overrides:
          task: mbpp
          ++is_checkpoint: True
          ++model_path: outputs/so/PromptingTitleCodeRepeat.${..__META__.ablation.Model}.QualityAfter/best_model
          ++training:
            batch_size: 32
            gradient_accumulation_steps: 1
            learning_rate: 5e-5
          tracking:
            log_model: False
      - name: Eval
        description: Evaluate the model
        base: mbpp_finetune
        group: MBPP
        overrides:
          task: mbpp
          ++is_checkpoint: true
          ++model_path: outputs/so/PromptingTitleCodeRepeat.${..__META__.ablation.Model}.QualityAfter/best_model
          tracking:
            log_model: False
            watch: null
    command:
      file: templates/commands/mbpp_eval.txt
      kwargs:
        train_sbatch: train_single_gpu
        pretrain_time: "12:00:00"
        use_cds: True
      fields:
        - model_path