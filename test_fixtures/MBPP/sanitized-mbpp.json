[
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 2,
        "prompt": "Write a function to find the shared elements from the given two lists.",
        "code": "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
            "assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))",
            "assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))"
        ]
    }
, {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 3,
    "prompt": "Write a python function to identify non-prime numbers.",
    "code": "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result",
    "test_imports": [],
    "test_list": [
        "assert is_not_prime(2) == False", "assert is_not_prime(10) == True",
        "assert is_not_prime(35) == True", "assert is_not_prime(37) == False"
    ]
}, {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 4,
    "prompt": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
    "code": "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums",
    "test_imports": [],
    "test_list": [
        "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
        "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]",
        "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
    ]
}, {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 6,
    "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.",
    "code": "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)",
    "test_imports": [],
    "test_list": [
        "assert differ_At_One_Bit_Pos(13,9) == True", "assert differ_At_One_Bit_Pos(15,8) == False",
        "assert differ_At_One_Bit_Pos(2,4) == False", "assert differ_At_One_Bit_Pos(2, 3) == True",
        "assert differ_At_One_Bit_Pos(5, 1) == True", "assert differ_At_One_Bit_Pos(1, 5) == True"
    ]
}, {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 7,
    "prompt": "Write a function to find all words which are at least 4 characters long in a string.",
    "code": "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))",
    "test_imports": [],
    "test_list": [
        "assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
        "assert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])",
        "assert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])"


    ]
}, {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 8,
    "prompt": "Write a function to find squares of individual elements in a list.",
    "code": "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums",
    "test_imports": [],
    "test_list": [
        "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "assert square_nums([10,20,30])==([100,400,900])",
        "assert square_nums([12,15])==([144,225])"
    ]
}, {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 9,
    "prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
    "code": "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n ",
    "test_imports": [],
    "test_list": [
        "assert find_Rotations(\"aaaa\") == 1", "assert find_Rotations(\"ab\") == 2",
        "assert find_Rotations(\"abc\") == 3"
    ]
}, {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 11,
    "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
    "code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
    "test_imports": [],
    "test_list": [
        "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
        "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
}, {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 12,
    "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
    "test_imports": [],
    "test_list": [
        "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
        "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
        "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
}, {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 14,
    "prompt": "Write a python function to find the volume of a triangular prism.",
    "code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
    "test_imports": [],
    "test_list": [
        "assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6",
        "assert find_Volume(1,2,1) == 1"
    ]
}, {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 16,
    "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
    "code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
    "test_imports": [],
    "test_list": [
        "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)",
        "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)",
        "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"
    ]
}, {
    "source_file": "Benchmark Questions Verification V2.ipynb",
    "task_id": 17,
    "prompt": "Write a function that returns the perimeter of a square given its side length as input.",
    "code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
    "test_imports": [],
    "test_list": [
        "assert square_perimeter(10)==40", "assert square_perimeter(5)==20",
        "assert square_perimeter(4)==16"
    ]
}
]