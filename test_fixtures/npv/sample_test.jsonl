{"source_file": "mbpp.jsonl", "function": "split_lowerstring", "task": "MBPP", "description": "Write a function to split a string at lowercase letters.", "code": "def split_lowerstring(text):\n return (re.findall('[a-z][^a-z]*', text))", "context": "import re", "instance_idx": 14, "original_task_id": 15, "all_tasks": {"MBPP_14_0": {"input": "split_lowerstring('AbCd')", "op": "==", "output": "['bC', 'd']", "is_manual_fix": false, "is_negation_of": null, "is_original": true, "task_id": "MBPP_14_0", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_1": {"input": "split_lowerstring('AbCd')", "op": "!=", "output": "['bC', 'd']", "is_manual_fix": false, "is_negation_of": "MBPP_14_0", "is_original": true, "task_id": "MBPP_14_1", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_2": {"input": "split_lowerstring('Python')", "op": "==", "output": "['y', 't', 'h', 'o', 'n']", "is_manual_fix": false, "is_negation_of": null, "is_original": true, "task_id": "MBPP_14_2", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_3": {"input": "split_lowerstring('Python')", "op": "!=", "output": "['y', 't', 'h', 'o', 'n']", "is_manual_fix": false, "is_negation_of": "MBPP_14_2", "is_original": true, "task_id": "MBPP_14_3", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_4": {"input": "split_lowerstring('Programming')", "op": "==", "output": "['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "is_manual_fix": false, "is_negation_of": null, "is_original": true, "task_id": "MBPP_14_4", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_5": {"input": "split_lowerstring('Programming')", "op": "!=", "output": "['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "is_manual_fix": false, "is_negation_of": "MBPP_14_4", "is_original": true, "task_id": "MBPP_14_5", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_6": {"input": "split_lowerstring('0')", "op": "==", "output": "[]", "is_manual_fix": false, "is_negation_of": null, "is_original": true, "task_id": "MBPP_14_6", "result": "True", "is_input_generated": true, "is_output_generated": true}, "MBPP_14_7": {"input": "split_lowerstring('0')", "op": "!=", "output": "[]", "is_manual_fix": false, "is_negation_of": "MBPP_14_6", "is_original": true, "task_id": "MBPP_14_7", "result": "False", "is_input_generated": true, "is_output_generated": true}, "MBPP_14_8": {"input": "split_lowerstring(u'\u00fcberb\u00fcr')", "op": "==", "output": "['b', 'e', 'r', 'b\u00fc', 'r']", "is_manual_fix": false, "is_negation_of": null, "is_original": true, "task_id": "MBPP_14_8", "result": "True", "is_input_generated": true, "is_output_generated": true}, "MBPP_14_9": {"input": "split_lowerstring(u'\u00fcberb\u00fcr')", "op": "!=", "output": "['b', 'e', 'r', 'b\u00fc', 'r']", "is_manual_fix": false, "is_negation_of": "MBPP_14_8", "is_original": true, "task_id": "MBPP_14_9", "result": "False", "is_input_generated": true, "is_output_generated": true}, "MBPP_14_10": {"input": "split_lowerstring('AbCd')", "op": "==", "output": "['y', 't', 'h', 'o', 'n']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_10", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_11": {"input": "split_lowerstring('AbCd')", "op": "!=", "output": "['y', 't', 'h', 'o', 'n']", "is_manual_fix": false, "is_negation_of": "MBPP_14_10", "is_original": false, "task_id": "MBPP_14_11", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_12": {"input": "split_lowerstring('AbCd')", "op": "==", "output": "['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_12", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_13": {"input": "split_lowerstring('AbCd')", "op": "!=", "output": "['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "is_manual_fix": false, "is_negation_of": "MBPP_14_12", "is_original": false, "task_id": "MBPP_14_13", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_14": {"input": "split_lowerstring('AbCd')", "op": "==", "output": "[]", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_14", "result": "False", "is_input_generated": false, "is_output_generated": true}, "MBPP_14_15": {"input": "split_lowerstring('AbCd')", "op": "!=", "output": "[]", "is_manual_fix": false, "is_negation_of": "MBPP_14_14", "is_original": false, "task_id": "MBPP_14_15", "result": "True", "is_input_generated": false, "is_output_generated": true}, "MBPP_14_16": {"input": "split_lowerstring('AbCd')", "op": "==", "output": "['b', 'e', 'r', 'b\u00fc', 'r']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_16", "result": "False", "is_input_generated": false, "is_output_generated": true}, "MBPP_14_17": {"input": "split_lowerstring('AbCd')", "op": "!=", "output": "['b', 'e', 'r', 'b\u00fc', 'r']", "is_manual_fix": false, "is_negation_of": "MBPP_14_16", "is_original": false, "task_id": "MBPP_14_17", "result": "True", "is_input_generated": false, "is_output_generated": true}, "MBPP_14_18": {"input": "split_lowerstring('Python')", "op": "==", "output": "['bC', 'd']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_18", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_19": {"input": "split_lowerstring('Python')", "op": "!=", "output": "['bC', 'd']", "is_manual_fix": false, "is_negation_of": "MBPP_14_18", "is_original": false, "task_id": "MBPP_14_19", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_20": {"input": "split_lowerstring('Python')", "op": "==", "output": "['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_20", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_21": {"input": "split_lowerstring('Python')", "op": "!=", "output": "['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "is_manual_fix": false, "is_negation_of": "MBPP_14_20", "is_original": false, "task_id": "MBPP_14_21", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_22": {"input": "split_lowerstring('Python')", "op": "==", "output": "[]", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_22", "result": "False", "is_input_generated": false, "is_output_generated": true}, "MBPP_14_23": {"input": "split_lowerstring('Python')", "op": "!=", "output": "[]", "is_manual_fix": false, "is_negation_of": "MBPP_14_22", "is_original": false, "task_id": "MBPP_14_23", "result": "True", "is_input_generated": false, "is_output_generated": true}, "MBPP_14_24": {"input": "split_lowerstring('Python')", "op": "==", "output": "['b', 'e', 'r', 'b\u00fc', 'r']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_24", "result": "False", "is_input_generated": false, "is_output_generated": true}, "MBPP_14_25": {"input": "split_lowerstring('Python')", "op": "!=", "output": "['b', 'e', 'r', 'b\u00fc', 'r']", "is_manual_fix": false, "is_negation_of": "MBPP_14_24", "is_original": false, "task_id": "MBPP_14_25", "result": "True", "is_input_generated": false, "is_output_generated": true}, "MBPP_14_26": {"input": "split_lowerstring('Programming')", "op": "==", "output": "['bC', 'd']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_26", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_27": {"input": "split_lowerstring('Programming')", "op": "!=", "output": "['bC', 'd']", "is_manual_fix": false, "is_negation_of": "MBPP_14_26", "is_original": false, "task_id": "MBPP_14_27", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_28": {"input": "split_lowerstring('Programming')", "op": "==", "output": "['y', 't', 'h', 'o', 'n']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_28", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_29": {"input": "split_lowerstring('Programming')", "op": "!=", "output": "['y', 't', 'h', 'o', 'n']", "is_manual_fix": false, "is_negation_of": "MBPP_14_28", "is_original": false, "task_id": "MBPP_14_29", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_14_30": {"input": "split_lowerstring('Programming')", "op": "==", "output": "[]", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_30", "result": "False", "is_input_generated": false, "is_output_generated": true}, "MBPP_14_31": {"input": "split_lowerstring('Programming')", "op": "!=", "output": "[]", "is_manual_fix": false, "is_negation_of": "MBPP_14_30", "is_original": false, "task_id": "MBPP_14_31", "result": "True", "is_input_generated": false, "is_output_generated": true}, "MBPP_14_32": {"input": "split_lowerstring('Programming')", "op": "==", "output": "['b', 'e', 'r', 'b\u00fc', 'r']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_32", "result": "False", "is_input_generated": false, "is_output_generated": true}, "MBPP_14_33": {"input": "split_lowerstring('Programming')", "op": "!=", "output": "['b', 'e', 'r', 'b\u00fc', 'r']", "is_manual_fix": false, "is_negation_of": "MBPP_14_32", "is_original": false, "task_id": "MBPP_14_33", "result": "True", "is_input_generated": false, "is_output_generated": true}, "MBPP_14_34": {"input": "split_lowerstring('0')", "op": "==", "output": "['bC', 'd']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_34", "result": "False", "is_input_generated": true, "is_output_generated": false}, "MBPP_14_35": {"input": "split_lowerstring('0')", "op": "!=", "output": "['bC', 'd']", "is_manual_fix": false, "is_negation_of": "MBPP_14_34", "is_original": false, "task_id": "MBPP_14_35", "result": "True", "is_input_generated": true, "is_output_generated": false}, "MBPP_14_36": {"input": "split_lowerstring('0')", "op": "==", "output": "['y', 't', 'h', 'o', 'n']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_36", "result": "False", "is_input_generated": true, "is_output_generated": false}, "MBPP_14_37": {"input": "split_lowerstring('0')", "op": "!=", "output": "['y', 't', 'h', 'o', 'n']", "is_manual_fix": false, "is_negation_of": "MBPP_14_36", "is_original": false, "task_id": "MBPP_14_37", "result": "True", "is_input_generated": true, "is_output_generated": false}, "MBPP_14_38": {"input": "split_lowerstring('0')", "op": "==", "output": "['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_38", "result": "False", "is_input_generated": true, "is_output_generated": false}, "MBPP_14_39": {"input": "split_lowerstring('0')", "op": "!=", "output": "['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "is_manual_fix": false, "is_negation_of": "MBPP_14_38", "is_original": false, "task_id": "MBPP_14_39", "result": "True", "is_input_generated": true, "is_output_generated": false}, "MBPP_14_40": {"input": "split_lowerstring('0')", "op": "==", "output": "['b', 'e', 'r', 'b\u00fc', 'r']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_40", "result": "False", "is_input_generated": true, "is_output_generated": true}, "MBPP_14_41": {"input": "split_lowerstring('0')", "op": "!=", "output": "['b', 'e', 'r', 'b\u00fc', 'r']", "is_manual_fix": false, "is_negation_of": "MBPP_14_40", "is_original": false, "task_id": "MBPP_14_41", "result": "True", "is_input_generated": true, "is_output_generated": true}, "MBPP_14_42": {"input": "split_lowerstring(u'\u00fcberb\u00fcr')", "op": "==", "output": "['bC', 'd']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_42", "result": "False", "is_input_generated": true, "is_output_generated": false}, "MBPP_14_43": {"input": "split_lowerstring(u'\u00fcberb\u00fcr')", "op": "!=", "output": "['bC', 'd']", "is_manual_fix": false, "is_negation_of": "MBPP_14_42", "is_original": false, "task_id": "MBPP_14_43", "result": "True", "is_input_generated": true, "is_output_generated": false}, "MBPP_14_44": {"input": "split_lowerstring(u'\u00fcberb\u00fcr')", "op": "==", "output": "['y', 't', 'h', 'o', 'n']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_44", "result": "False", "is_input_generated": true, "is_output_generated": false}, "MBPP_14_45": {"input": "split_lowerstring(u'\u00fcberb\u00fcr')", "op": "!=", "output": "['y', 't', 'h', 'o', 'n']", "is_manual_fix": false, "is_negation_of": "MBPP_14_44", "is_original": false, "task_id": "MBPP_14_45", "result": "True", "is_input_generated": true, "is_output_generated": false}, "MBPP_14_46": {"input": "split_lowerstring(u'\u00fcberb\u00fcr')", "op": "==", "output": "['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_46", "result": "False", "is_input_generated": true, "is_output_generated": false}, "MBPP_14_47": {"input": "split_lowerstring(u'\u00fcberb\u00fcr')", "op": "!=", "output": "['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "is_manual_fix": false, "is_negation_of": "MBPP_14_46", "is_original": false, "task_id": "MBPP_14_47", "result": "True", "is_input_generated": true, "is_output_generated": false}, "MBPP_14_48": {"input": "split_lowerstring(u'\u00fcberb\u00fcr')", "op": "==", "output": "[]", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_14_48", "result": "False", "is_input_generated": true, "is_output_generated": true}, "MBPP_14_49": {"input": "split_lowerstring(u'\u00fcberb\u00fcr')", "op": "!=", "output": "[]", "is_manual_fix": false, "is_negation_of": "MBPP_14_48", "is_original": false, "task_id": "MBPP_14_49", "result": "True", "is_input_generated": true, "is_output_generated": true}}, "instances": ["MBPP_14_0", "MBPP_14_1", "MBPP_14_2", "MBPP_14_3", "MBPP_14_4", "MBPP_14_5", "MBPP_14_6", "MBPP_14_7", "MBPP_14_8", "MBPP_14_9", "MBPP_14_10", "MBPP_14_11", "MBPP_14_18", "MBPP_14_19", "MBPP_14_28", "MBPP_14_29", "MBPP_14_36", "MBPP_14_37", "MBPP_14_46", "MBPP_14_47"], "tid_by_result": {"True": {"split_lowerstring('AbCd')": ["MBPP_14_0", "MBPP_14_11", "MBPP_14_13", "MBPP_14_15", "MBPP_14_17"], "split_lowerstring('Python')": ["MBPP_14_2", "MBPP_14_19", "MBPP_14_21", "MBPP_14_23", "MBPP_14_25"], "split_lowerstring('Programming')": ["MBPP_14_4", "MBPP_14_27", "MBPP_14_29", "MBPP_14_31", "MBPP_14_33"], "split_lowerstring('0')": ["MBPP_14_6", "MBPP_14_35", "MBPP_14_37", "MBPP_14_39", "MBPP_14_41"], "split_lowerstring(u'\u00fcberb\u00fcr')": ["MBPP_14_8", "MBPP_14_43", "MBPP_14_45", "MBPP_14_47", "MBPP_14_49"]}, "False": {"split_lowerstring('AbCd')": ["MBPP_14_1", "MBPP_14_10", "MBPP_14_12", "MBPP_14_14", "MBPP_14_16"], "split_lowerstring('Python')": ["MBPP_14_3", "MBPP_14_18", "MBPP_14_20", "MBPP_14_22", "MBPP_14_24"], "split_lowerstring('Programming')": ["MBPP_14_5", "MBPP_14_26", "MBPP_14_28", "MBPP_14_30", "MBPP_14_32"], "split_lowerstring('0')": ["MBPP_14_7", "MBPP_14_34", "MBPP_14_36", "MBPP_14_38", "MBPP_14_40"], "split_lowerstring(u'\u00fcberb\u00fcr')": ["MBPP_14_9", "MBPP_14_42", "MBPP_14_44", "MBPP_14_46", "MBPP_14_48"]}}}
{"source_file": "mbpp.jsonl", "function": "min_cost", "task": "MBPP", "description": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "code": "def min_cost(cost, m, n): \n\ttc = [[0 for x in range(C)] for x in range(R)] \n\ttc[0][0] = cost[0][0] \n\tfor i in range(1, m+1): \n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \n\tfor j in range(1, n+1): \n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \n\tfor i in range(1, m+1): \n\t\tfor j in range(1, n+1): \n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \n\treturn tc[m][n]", "context": "R = 3\nC = 3", "instance_idx": 0, "original_task_id": 1, "all_tasks": {"MBPP_0_0": {"input": "min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)", "op": "==", "output": "8", "is_manual_fix": false, "is_negation_of": null, "is_original": true, "task_id": "MBPP_0_0", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_1": {"input": "min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)", "op": "!=", "output": "8", "is_manual_fix": false, "is_negation_of": "MBPP_0_0", "is_original": true, "task_id": "MBPP_0_1", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_2": {"input": "min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)", "op": "==", "output": "12", "is_manual_fix": false, "is_negation_of": null, "is_original": true, "task_id": "MBPP_0_2", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_3": {"input": "min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)", "op": "!=", "output": "12", "is_manual_fix": false, "is_negation_of": "MBPP_0_2", "is_original": true, "task_id": "MBPP_0_3", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_4": {"input": "min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)", "op": "==", "output": "16", "is_manual_fix": false, "is_negation_of": null, "is_original": true, "task_id": "MBPP_0_4", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_5": {"input": "min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)", "op": "!=", "output": "16", "is_manual_fix": false, "is_negation_of": "MBPP_0_4", "is_original": true, "task_id": "MBPP_0_5", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_6": {"input": "min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)", "op": "==", "output": "12", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_0_6", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_7": {"input": "min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)", "op": "!=", "output": "12", "is_manual_fix": false, "is_negation_of": "MBPP_0_6", "is_original": false, "task_id": "MBPP_0_7", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_8": {"input": "min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)", "op": "==", "output": "16", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_0_8", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_9": {"input": "min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)", "op": "!=", "output": "16", "is_manual_fix": false, "is_negation_of": "MBPP_0_8", "is_original": false, "task_id": "MBPP_0_9", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_10": {"input": "min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)", "op": "==", "output": "8", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_0_10", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_11": {"input": "min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)", "op": "!=", "output": "8", "is_manual_fix": false, "is_negation_of": "MBPP_0_10", "is_original": false, "task_id": "MBPP_0_11", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_12": {"input": "min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)", "op": "==", "output": "16", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_0_12", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_13": {"input": "min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)", "op": "!=", "output": "16", "is_manual_fix": false, "is_negation_of": "MBPP_0_12", "is_original": false, "task_id": "MBPP_0_13", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_14": {"input": "min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)", "op": "==", "output": "8", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_0_14", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_15": {"input": "min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)", "op": "!=", "output": "8", "is_manual_fix": false, "is_negation_of": "MBPP_0_14", "is_original": false, "task_id": "MBPP_0_15", "result": "True", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_16": {"input": "min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)", "op": "==", "output": "12", "is_manual_fix": false, "is_negation_of": null, "is_original": false, "task_id": "MBPP_0_16", "result": "False", "is_input_generated": false, "is_output_generated": false}, "MBPP_0_17": {"input": "min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)", "op": "!=", "output": "12", "is_manual_fix": false, "is_negation_of": "MBPP_0_16", "is_original": false, "task_id": "MBPP_0_17", "result": "True", "is_input_generated": false, "is_output_generated": false}}, "instances": ["MBPP_0_0", "MBPP_0_1", "MBPP_0_2", "MBPP_0_3", "MBPP_0_4", "MBPP_0_5", "MBPP_0_6", "MBPP_0_7", "MBPP_0_12", "MBPP_0_13", "MBPP_0_16", "MBPP_0_17"], "tid_by_result": {"True": {"min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)": ["MBPP_0_0", "MBPP_0_7", "MBPP_0_9"], "min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)": ["MBPP_0_2", "MBPP_0_11", "MBPP_0_13"], "min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)": ["MBPP_0_4", "MBPP_0_15", "MBPP_0_17"]}, "False": {"min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)": ["MBPP_0_1", "MBPP_0_6", "MBPP_0_8"], "min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)": ["MBPP_0_3", "MBPP_0_10", "MBPP_0_12"], "min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)": ["MBPP_0_5", "MBPP_0_14", "MBPP_0_16"]}}}