{"source_file": "mbpp.jsonl", "task": "MBPP", "task_id": 300, "description": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "code": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res", "input_output_pairs": [{"input": "count_binary_seq(1)", "output": "2.0", "ops": "=="}, {"input": "count_binary_seq(2)", "output": "6.0", "ops": "=="}, {"input": "count_binary_seq(3)", "output": "20.0", "ops": "=="}], "context": "", "idx": 276, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/115", "description": "You are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\n\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\n\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\n\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10", "code": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])", "input_output_pairs": [{"input": "max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)", "output": "6", "ops": "=="}, {"input": "max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)", "output": "5", "ops": "=="}, {"input": "max_fill([[0, 0, 0], [0, 0, 0]], 5)", "output": "0", "ops": "=="}, {"input": "max_fill([[1, 1, 1, 1], [1, 1, 1, 1]], 2)", "output": "4", "ops": "=="}, {"input": "max_fill([[1, 1, 1, 1], [1, 1, 1, 1]], 9)", "output": "2", "ops": "=="}], "context": "", "idx": 108, "test_negations": [], "exclude_tests": []}
{"source_file": "human_eval.jsonl", "task": "HUMAN_EVAL", "task_id": "HumanEval/138", "description": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True", "code": "def is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8", "input_output_pairs": [{"input": "is_equal_to_sum_even(4)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(6)", "output": "False", "ops": "=="}, {"input": "is_equal_to_sum_even(8)", "output": "True", "ops": "=="}, {"input": "is_equal_to_sum_even(10)", "output": "True", "ops": "=="}], "context": "", "idx": 114, "test_negations": [], "exclude_tests": []}