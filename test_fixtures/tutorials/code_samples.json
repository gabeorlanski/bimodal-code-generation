{
    "numpy": [
        {
            "domain": "numpy",
            "name": "tutorial_basics_copies",
            "tags": [
                {
                    "tag": "section",
                    "idx": 0,
                    "text": "Copies and views",
                    "parent_idx": -1
                }, {
                    "parent_idx": 1,
                    "idx": 1,
                    "text": "When operating on NumPy arrays, it is possible to access the internal data buffer directly using a view without copying data around. This ensures good performance but can also cause unwanted problems if the user is not aware of how this works. Hence, it is important to know the difference between these two terms and to know which operations return copies and which return views.",
                    "tag": "p"
                }, {
                    "parent_idx": 2,
                    "idx": 2,
                    "text": "The NumPy array is a data structure consisting of two parts: the contiguous data buffer with the actual data elements and the metadata that contains information about the data buffer. The metadata includes data type, strides, and other important information that helps manipulate the `ndarray` easily. See the Internal organization of NumPy arrays section for a detailed look.",
                    "tag": "p"
                }, {
                    "tag": "section",
                    "idx": 3,
                    "text": "View",
                    "parent_idx": 0
                }, {
                    "parent_idx": 4,
                    "idx": 4,
                    "text": "It is possible to access the array differently by just changing certain metadata like stride and dtype without changing the data buffer. This creates a new way of looking at the data and these new arrays are called views. The data buffer remains the same, so any changes made to a view reflects in the original copy. A view can be forced through the `ndarray.view` method.",
                    "tag": "p"
                }, {
                    "tag": "section",
                    "idx": 5,
                    "text": "Copy",
                    "parent_idx": 0
                }, {
                    "parent_idx": 6,
                    "idx": 6,
                    "text": "When a new array is created by duplicating the data buffer as well as the metadata, it is called a copy. Changes made to the copy do not reflect on the original array. Making a copy is slower and memory-consuming but sometimes necessary. A copy can be forced by using `ndarray.copy`.",
                    "tag": "p"
                }, {
                    "tag": "section",
                    "idx": 7,
                    "text": "Indexing operations",
                    "parent_idx": 0
                }, {
                    "parent_idx": 8,
                    "idx": 8,
                    "text": "See also",
                    "tag": "p"
                }, {
                    "parent_idx": 9,
                    "idx": 9,
                    "text": "Indexing on ndarrays",
                    "tag": "p"
                }, {
                    "parent_idx": 10,
                    "idx": 10,
                    "text": "Views are created when elements can be addressed with offsets and strides in the original array. Hence, basic indexing always creates views. For example:",
                    "tag": "p"
                }, {
                    "parent_idx": 11,
                    "idx": 11,
                    "text": ">>> x = np.arange(10)\n>>> x\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> y = x[1:3]  # creates a view\n>>> y\narray([1, 2])\n>>> x[1:3] = [10, 11]\n>>> x\narray([ 0, 10, 11,  3,  4,  5,  6,  7,  8,  9])\n>>> y\narray([10, 11])\n\n",
                    "tag": "code"
                }
            ],
            "samples": {
                "11": [
                    {
                        "idx": 11,
                        "snippet_idx": 0,
                        "body_code": "x = np.arange(10)",
                        "return_code": [
                            "x"
                        ],
                        "expected_result": [
                            "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
                        ],
                        "start_char_idx": 0,
                        "context": "import numpy as np",
                        "section_path": "Copies and views/Indexing operations",
                        "returned": {
                            "OUT_0": {
                                "val": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                                "type": "ndarray"
                            },
                            "STDOUT": "",
                            "STDERR": ""
                        }
                    }, {
                        "idx": 11,
                        "snippet_idx": 1,
                        "body_code": "y = x[1:3]  # creates a view",
                        "return_code": [
                            "y"
                        ],
                        "expected_result": [
                            "array([1, 2])"
                        ],
                        "start_char_idx": 67,
                        "context": "import numpy as np\nx = np.arange(10)",
                        "section_path": "Copies and views/Indexing operations",
                        "returned": {
                            "OUT_0": {
                                "val": "array([1,2])",
                                "type": "ndarray"
                            },
                            "STDOUT": "",
                            "STDERR": ""
                        }
                    }, {
                        "idx": 11,
                        "snippet_idx": 2,
                        "body_code": "x[1:3] = [10, 11]",
                        "return_code": [
                            "x", "y"
                        ],
                        "expected_result": [
                            "array([ 0, 10, 11,  3,  4,  5,  6,  7,  8,  9])", "array([10, 11])"
                        ],
                        "start_char_idx": 120,
                        "context": "import numpy as np\nx = np.arange(10)\ny = x[1:3]",
                        "section_path": "Copies and views/Indexing operations",
                        "returned": {
                            "OUT_0": {
                                "val": "array([ 0, 10, 11,  3,  4,  5,  6,  7,  8,  9])",
                                "type": "ndarray"
                            },
                            "OUT_1": {
                                "val": "array([10, 11])",
                                "type": "ndarray"
                            },
                            "STDOUT": "",
                            "STDERR": ""
                        }
                    }
                ]
            },
            "idx": 0
        }
    ]
}