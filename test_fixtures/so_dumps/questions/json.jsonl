{"answers": {"58176": {"line": 37589, "body": "<p>Go through the library manager and make sure your version is 5.14.3 and not higher. The higher ones are Beta versions and there has been changes that are not compatible with the previous non-Beta versions. </p>\n\n<p>This is an annoyance because you would think that the latest would be the best. But that is not always the case.</p>\n", "result": "PASS", "type": 2, "id": "58176", "date": "2018-11-25T17:44:06.123", "score": 1, "comment_count": 0, "parent_id": "58175"}}, "line": 37588, "body": "<p>I have installed via the Arduino Library Manager a library called ArduinoJson.  It seems to install fine and I have included the library in my sketch using:</p>\n\n<pre><code>#include \"ArduinoJson.h\"\n</code></pre>\n\n<p>But when I compile the sketch I get the following error:</p>\n\n<pre><code>\"C:\\\\Program Files (x86)\\\\Arduino\\\\hardware\\\\tools\\\\avr/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -flto -w -x c++ -E -CC -mmcu=atmega2560 -DF_CPU=16000000L -DARDUINO=10807 -DARDUINO_AVR_MEGA2560 -DARDUINO_ARCH_AVR \"-IC:\\\\Program Files (x86)\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\cores\\\\arduino\" \"-IC:\\\\Program Files (x86)\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\variants\\\\mega\" \"-IG:\\\\My Drive\\\\Personal\\\\jdeation\\\\Arduino\\\\libraries\\\\HX711-0.1\" \"-IG:\\\\My Drive\\\\Personal\\\\jdeation\\\\Arduino\\\\libraries\\\\ArduinoJson\\\\src\" \"C:\\\\Users\\\\jason\\\\AppData\\\\Local\\\\Temp\\\\arduino_build_7871\\\\sketch\\\\counting_machine.ino.cpp\" -o nul\n\nIn file included from G:\\My Drive\\Personal\\jdeation\\Arduino\\libraries\\ArduinoJson\\src/ArduinoJson/JsonBufferBase.hpp:7:0,\n\n                 from G:\\My Drive\\Personal\\jdeation\\Arduino\\libraries\\ArduinoJson\\src/ArduinoJson/DynamicJsonBuffer.hpp:7,\n\n                 from G:\\My Drive\\Personal\\jdeation\\Arduino\\libraries\\ArduinoJson\\src/ArduinoJson.hpp:9,\n\n                 from G:\\My Drive\\Personal\\jdeation\\Arduino\\libraries\\ArduinoJson\\src/ArduinoJson.h:9,\n\n                 from G:\\My Drive\\Personal\\jdeation\\Arduino\\counting_machine\\counting_machine.ino:32:\n\nG:\\My Drive\\Personal\\jdeation\\Arduino\\libraries\\ArduinoJson\\src/ArduinoJson/Deserialization/JsonParser.hpp:7:29: fatal error: ../JsonBuffer.hpp: No such file or directory\n\ncompilation terminated.\n</code></pre>\n\n<p>I'm very new to Arduino programming,  can someone point me in the right direction.</p>\n\n<p>Thanks.</p>\n", "result": "PASS", "type": 1, "id": "58175", "date": "2018-11-25T17:05:13.367", "score": -1, "comment_count": 1, "tags": ["json"], "title": "Library Compiler Error - ArduinoJson", "answer_count": 1, "views": 296, "accepted_answer": null}
{"answers": {}, "line": 41193, "body": "<p>I want to get JSON string from a URL which goes like this </p>\n\n<blockquote>\n  <p><a href=\"https://maps.googleapis.com/maps/api/directions/json?origin=7649+Paseo+Santa+Cruz&amp;destination=SJSU&amp;key=MY_API_KEY\" rel=\"nofollow noreferrer\">https://maps.googleapis.com/maps/api/directions/json?origin=7649+Paseo+Santa+Cruz&amp;destination=SJSU&amp;key=MY_API_KEY</a></p>\n</blockquote>\n\n<p>and here is my code:\n</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;Bridge.h&gt;\n\n//#include &lt;b64.h&gt;\n#include &lt;HttpClient.h&gt;\n\n//#include &lt;ArduinoHttpClient.h&gt;\n\n#include &lt;Arduino_JSON.h&gt;\n#include &lt;SPI.h&gt;\n#include &lt;WiFiNINA.h&gt;\n\n//#include \"arduino_secrets.h\"\n///////please enter your sensitive data in the Secret tab/arduino_secrets.h\nchar ssid[] = \"my_wifi_ssid\";        // your network SSID (name)\nchar pass[] = \"my_wifi_password\";    // your network password (use for WPA, or use as key for WEP)\nint status = WL_IDLE_STATUS;     // the Wifi radio's status\n\nWiFiSSLClient wifi;\nchar serverAddress[] = \"maps.googleapis.com\";\n\nvoid setup() {\n  //Bridge.begin();\n  Serial.begin(9600);\n  //listNetworks();\n  //Initialize serial and wait for port to open:\n\n  while (!Serial) {\n    ; // wait for serial port to connect. Needed for native USB port only\n  }\n\n  // check for the WiFi module:\n  if (WiFi.status() == WL_NO_MODULE) {\n    Serial.println(\"Communication with WiFi module failed!\");\n    // don't continue\n    while (true);\n  }\n\n  String fv = WiFi.firmwareVersion();\n  if (fv &lt; \"1.0.0\") {\n    Serial.println(\"Please upgrade the firmware\");\n  }\n\n  // attempt to connect to Wifi network:\n  while (status != WL_CONNECTED) {\n    Serial.print(\"Attempting to connect to WPA SSID: \");\n    Serial.println(ssid);\n    // Connect to WPA/WPA2 network:\n    status = WiFi.begin(ssid, pass);\n\n    // wait 10 seconds for connection:\n    delay(10000);\n  }\n\n  // you're connected now, so print out the data:\n  Serial.print(\"You're connected to the network\");\n  printCurrentNet();\n  printWifiData();\n  Serial.println(\"\\nStarting connection to server...\");\n  // if you get a connection, report back via serial:\n  if (wifi.connect(serverAddress, 80)) {\n    Serial.println(\"connected to server\");\n    // Make a HTTP request:\n    wifi.println(\"GET /maps/api/directions/json?origin=7649+Paseo+Santa+Cruz&amp;destination=SJSU&amp;key=MY_API_KEY\");\n    wifi.println(\"Host: maps.googleapis.com\");\n    wifi.println();\n  }\n}\n\nvoid loop() {\n  while (wifi.available()) {\n    char c = wifi.read();\n    Serial.write(c);\n  }\n\n  // if the server's disconnected, stop the client:\n  if (!wifi.connected()) {\n    Serial.println();\n    Serial.println(\"disconnecting from server.\");\n    wifi.stop();\n\n    // do nothing forevermore:\n    while (true);\n  }  \n\n  // check the network connection once every 10 seconds:\n  delay(10000);\n  }\n</code></pre>\n\n<p>It only printed in Serial Monitor:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>Starting connection to server...\n\ndisconnecting from server.\n</code></pre>\n", "result": "PASS", "type": 1, "id": "65744", "date": "2019-05-26T06:33:28.423", "score": 1, "comment_count": 3, "tags": ["json"], "title": "How to get Json String from URL?", "answer_count": 0, "views": 765, "accepted_answer": null}
{"answers": {"75585": {"line": 47548, "body": "<p>Okay, I've found a solution. To start with, you need to download the server response length and loop according to the response length. </p>\n", "result": "PASS", "type": 2, "id": "75585", "date": "2020-05-11T07:29:46.113", "score": 1, "comment_count": 0, "parent_id": "75437"}}, "line": 47442, "body": "<pre><code>  void toSerial(int delay_ms)\n  {\n    delay(delay_ms);\n\n    while(mySerial.available()) \n    {\n       Serial.write(mySerial.read());\n    }\n  }\n\n  Serial.begin(9600);\n  mySerial.begin(9600);\n\n  mySerial.println(\"AT+HTTPINIT\"); \n  toSerial(500);\n\n  mySerial.println(\"AT+HTTPPARA=\\\"CID\\\", 1\"); \n  toSerial(500);\n\n  mySerial.println(\"AT+HTTPPARA=\\\"URL\\\", \\\"www.example.test\\\"\");\n  toSerial(500);\n\n  mySerial.println(\"AT+HTTPPARA=\\\"CONTENT\\\", \\\"application/json\\\"\");\n  toSerial(500);\n\n  mySerial.println(\"AT+HTTPACTION=0\"); \n  toSerial(4000);\n\n  mySerial.println(\"AT+HTTPREAD\");\n  delay(3000);\n\n  while(mySerial.available()) \n  {\n    Serial.write(mySerial.read());\n  }\n\n  Serial.println(\"\");\n  mySerial.println(\"AT+HTTPTERM\"); \n  toSerial(500);\n\n</code></pre>\n\n<p><strong>Result:</strong> </p>\n\n<pre><code>AT+HTTPREAD\n\n+HTTPREAD:39\n{\"pinRed\":0,\"pinGreen\":1,\"pinYello\n\n</code></pre>\n\n<p><strong>I expect messages:</strong> </p>\n\n<pre><code>{\"pinRed\":0,\"pinGreen\":1,\"pinYellow\":0}\n</code></pre>\n", "result": "PASS", "type": 1, "id": "75437", "date": "2020-05-04T22:28:29.233", "score": 1, "comment_count": 2, "tags": ["json"], "title": "How to get full response json SIM900 + Arduino?", "answer_count": 1, "views": 111, "accepted_answer": null}
{"answers": {"80694": {"line": 51492, "body": "<p>For an <code>extern</code> the whole definition has to match the &quot;master&quot; definition.</p>\n<p>So if you have:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>StaticJsonDocument&lt;JSON_SIZE_IOT&gt; paramJSON;\n</code></pre>\n<p>then you <code>extern</code> has to be:</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>extern StaticJsonDocument&lt;JSON_SIZE_IOT&gt; paramJSON;\n</code></pre>\n<p>Of course you have to make sure your <code>JSON_SIZE_IOT</code> is the same for both - so it's best if that comes from a common source.</p>\n<p>This is known as <em>explicit instantiation declaration</em> and you can read more about it in the <a href=\"https://en.cppreference.com/w/cpp/language/class_template\" rel=\"nofollow noreferrer\">Class template C++ reference</a>.</p>\n", "result": "PASS", "type": 2, "id": "80694", "date": "2021-01-11T11:47:17.743", "score": 1, "comment_count": 2, "parent_id": "80666"}}, "line": 51470, "body": "<p>My sketch contains 2 <code>.h</code> files. one defines</p>\n<p>on 1st <code>.h</code> file:</p>\n<pre><code>#define JSON_SIZE_IOT 400\n#define JSON_SIZE_SKETCH 300\nStaticJsonDocument&lt;JSON_SIZE_IOT&gt; paramJSON;\nStaticJsonDocument&lt;JSON_SIZE_SKETCH&gt; sketchJSON;\n</code></pre>\n<p>and other need to define <code>paramJSON</code> and <code>sketchJSON</code> as <code>extern</code></p>\n<p>on 2nd <code>.h</code> file:</p>\n<pre><code>extern JsonDocument paramJSON;\nextern JsonDocument paramJSON;\n</code></pre>\n<p>but I get this error:</p>\n<pre><code>error: conflicting declaration 'ArduinoJson6172_91::StaticJsonDocument&lt;400u&gt; paramJSON'\n StaticJsonDocument&lt;JSON_SIZE_IOT&gt; paramJSON;\n</code></pre>\n<p>....</p>\n<pre><code>: previous declaration as 'ArduinoJson6172_91::JsonDocument paramJSON'\n extern JsonDocument paramJSON;\n</code></pre>\n", "result": "PASS", "type": 1, "id": "80666", "date": "2021-01-09T21:49:49.867", "score": 0, "comment_count": 9, "tags": ["json"], "title": "ArduinoJSON define as extern", "answer_count": 1, "views": 107, "accepted_answer": "80694"}
